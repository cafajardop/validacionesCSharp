using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Dynamic;
using System.Globalization;
using Newtonsoft.Json;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace OpheliaSuiteV2.BRMRuntime
{
    /// <sumary>
    /// ResultPrototype_Expression
    /// </sumary> 
    public sealed class ResultPrototype_Expression
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// CompanyIdLn
        /// </sumary>
        private long CompanyIdLn;
        /// <sumary>
        /// OperatorIdLn
        /// </sumary>
        private long OperatorIdLn;
        /// <sumary>
        /// LibraryIdLn
        /// </sumary>
        private long LibraryIdLn;
        /// <sumary>
        /// TemplateIdLn
        /// </sumary>
        private long TemplateIdLn;
        /// <sumary>
        /// FrmCodiLn
        /// </sumary>
        private string FrmCodiLn;
        /// <sumary>
        /// CaseNumberLn
        /// </sumary>
        private string CaseNumberLn;
        /// <sumary>
        /// PeriodLn
        /// </sumary>
        private long PeriodLn;
        /// <sumary>
        /// YearLn
        /// </sumary>
        private long YearLn;
        /// <sumary>
        /// UserCodeLn
        /// </sumary>
        private string UserCodeLn;
        /// <sumary>
        /// FileIdLn
        /// </sumary>
        private string FileIdLn;
        /// <sumary>
        /// IdTypePopulationLn
        /// </sumary>
        private long IdTypePopulationLn;
        /// <sumary>
        /// Mensaje resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// Resultado prototipo detalle 0247
        /// </sumary>
        private bool ResultPrototype;
        #endregion

        #region Members
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por trabajo social
        /// </sumary>
        private readonly RUL_CAWORKSOCI RUL_CAWORKSOCI = new RUL_CAWORKSOCI();
        /// <sumary>
        /// Estado vital al finalizar este corte
        /// </sumary>
        private readonly RUL_CAVITALSTA RUL_CAVITALSTA = new RUL_CAVITALSTA();
        /// <sumary>
        /// Estado vital al finalizar la única o última cirugía de este corte
        /// </sumary>
        private readonly RUL_CAVISTLASU RUL_CAVISTLASU = new RUL_CAVISTLASU();
        /// <sumary>
        /// En este último ciclo el usuario recibió Vincristina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAVINCRIST RUL_CAVINCRIST = new RUL_CAVINCRIST();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Vincristina
        /// </sumary>
        private readonly RUL_CAVINCFIRS RUL_CAVINCFIRS = new RUL_CAVINCFIRS();
        /// <sumary>
        /// En este último esquema el usuario recibió Vinblastina
        /// </sumary>
        private readonly RUL_CAVINBLAST RUL_CAVINBLAST = new RUL_CAVINBLAST();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Vinblastina 
        /// </sumary>
        private readonly RUL_CAVINBLAFI RUL_CAVINBLAFI = new RUL_CAVINBLAFI();
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private readonly RUL_CAUTLASTCY RUL_CAUTLASTCY = new RUL_CAUTLASTCY();
        /// <sumary>
        /// Ubicación temporal de esta última cirugía en relación al manejo oncológico, en este corte
        /// </sumary>
        private readonly RUL_CAUBLASU RUL_CAUBLASU = new RUL_CAUBLASU();
        /// <sumary>
        /// Ubicación temporal de este trasplante en relación al manejo oncológico
        /// </sumary>
        private readonly RUL_CAUBITRANS RUL_CAUBITRANS = new RUL_CAUBITRANS();
        /// <sumary>
        /// Ubicación temporal del primer o único esquema de radioterapia en este corte
        /// </sumary>
        private readonly RUL_CAUBIRADIO RUL_CAUBIRADIO = new RUL_CAUBIRADIO();
        /// <sumary>
        /// Ubicación temporal del primer ciclo en el periodo en relación al manejo oncológico
        /// </sumary>
        private readonly RUL_CAUBIFIRST RUL_CAUBIFIRST = new RUL_CAUBIFIRST();
        /// <sumary>
        /// Ubicación temporal del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAUBICRADI RUL_CAUBICRADI = new RUL_CAUBICRADI();
        /// <sumary>
        /// Ubicación temporal de esta primera cirugía en relación al manejo oncológico
        /// </sumary>
        private readonly RUL_CAUBFISU RUL_CAUBFISU = new RUL_CAUBFISU();
        /// <sumary>
        /// Tipo de trasplante recibido
        /// </sumary>
        private readonly RUL_CATYPETRAN RUL_CATYPETRAN = new RUL_CATYPETRAN();
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private readonly RUL_CATYPETEST RUL_CATYPETEST = new RUL_CATYPETEST();
        /// <sumary>
        /// Tipo de documento 
        /// </sumary>
        private readonly RUL_CATYIDENTI RUL_CATYIDENTI = new RUL_CATYIDENTI();
        /// <sumary>
        /// Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía
        /// </sumary>
        private readonly RUL_CATUDIFFER RUL_CATUDIFFER = new RUL_CATUDIFFER();
        /// <sumary>
        /// Tipo de tratamiento que está recibiendo el usuario a la fecha de corte
        /// </sumary>
        private readonly RUL_CATREATYPE RUL_CATREATYPE = new RUL_CATREATYPE();
        /// <sumary>
        /// En este último esquema el usuario recibió Trastuzumab
        /// </sumary>
        private readonly RUL_CATRASTUZU RUL_CATRASTUZU = new RUL_CATRASTUZU();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Trastuzumab: (Trastuzumab es un principio activo diferente al Trastuzumab Emtansine; este último lo debe reportar en las variables 54, 55 o 56)
        /// </sumary>
        private readonly RUL_CATRASTUFI RUL_CATRASTUFI = new RUL_CATRASTUFI();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Tioguanina
        /// </sumary>
        private readonly RUL_CATHIOIRST RUL_CATHIOIRST = new RUL_CATHIOIRST();
        /// <sumary>
        /// En este último esquema el usuario recibió Tioguanina
        /// </sumary>
        private readonly RUL_CATHIOGUAN RUL_CATHIOGUAN = new RUL_CATHIOGUAN();
        /// <sumary>
        /// Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento
        /// </sumary>
        private readonly RUL_CATESTBREA RUL_CATESTBREA = new RUL_CATESTBREA();
        /// <sumary>
        /// Para cáncer colorrectal, estadificación de Dukes
        /// </sumary>
        private readonly RUL_CATESCOLOR RUL_CATESCOLOR = new RUL_CATESCOLOR();
        /// <sumary>
        /// ¿El usuario ha recibido terapias complementarias para su rehabilitación?
        /// </sumary>
        private readonly RUL_CATERAREHA RUL_CATERAREHA = new RUL_CATERAREHA();
        /// <sumary>
        /// En este último ciclo el usuario recibió Tamoxifeno (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CATAMOXIFE RUL_CATAMOXIFE = new RUL_CATAMOXIFE();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Tamoxifeno
        /// </sumary>
        private readonly RUL_CATAMOXFIR RUL_CATAMOXFIR = new RUL_CATAMOXFIR();
        /// <sumary>
        /// ¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?
        /// </sumary>
        private readonly RUL_CASURGER RUL_CASURGER = new RUL_CASURGER();
        /// <sumary>
        /// Para cáncer de próstata, valor de clasificación de la escala Gleason en el momento del diagnóstico
        /// </sumary>
        private readonly RUL_CASTAPROST RUL_CASTAPROST = new RUL_CASTAPROST();
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista en cuidado paliativo
        /// </sumary>
        private readonly RUL_CASPECPALL RUL_CASPECPALL = new RUL_CASPECPALL();
        /// <sumary>
        /// Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.
        /// </sumary>
        private readonly RUL_CASOLTUMST RUL_CASOLTUMST = new RUL_CASOLTUMST();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Prednisolona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
        /// </sumary>
        private readonly RUL_CASOLONEFI RUL_CASOLONEFI = new RUL_CASOLONEFI();
        /// <sumary>
        /// Genero de la persona
        /// </sumary>
        private readonly RUL_CASEXO RUL_CASEXO = new RUL_CASEXO();
        /// <sumary>
        /// Validad Longitud Segundo Apellido
        /// </sumary>
        private readonly RUL_CASELASNAM RUL_CASELASNAM = new RUL_CASELASNAM();
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        private readonly RUL_CASECNAME RUL_CASECNAME = new RUL_CASECNAME();
        /// <sumary>
        /// En este último ciclo el usuario recibió Rituximab (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CARITUXIMA RUL_CARITUXIMA = new RUL_CARITUXIMA();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Rituximab 
        /// </sumary>
        private readonly RUL_CARITUXFIR RUL_CARITUXFIR = new RUL_CARITUXFIR();
        /// <sumary>
        /// Resultado final del manejo oncológico en este corte
        /// </sumary>
        private readonly RUL_CARESUONCO RUL_CARESUONCO = new RUL_CARESUONCO();
        /// <sumary>
        /// Para cáncer de mama, resultado de la primera o única prueba HER2
        /// </sumary>
        private readonly RUL_CARESTESBR RUL_CARESTESBR = new RUL_CARESTESBR();
        /// <sumary>
        /// Motivo de haber realizado la última intervención quirúrgica de este corte
        /// </sumary>
        private readonly RUL_CARELASU RUL_CARELASU = new RUL_CARELASU();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Reinducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAREINDUCT RUL_CAREINDUCT = new RUL_CAREINDUCT();
        /// <sumary>
        /// Tipo de Régimen de la información reportada en el archivo
        /// </sumary>
        private readonly RUL_CAREGITYPE RUL_CAREGITYPE = new RUL_CAREGITYPE();
        /// <sumary>
        /// El usuario, ¿recibió cirugía reconstructiva?
        /// </sumary>
        private readonly RUL_CARECOSURG RUL_CARECOSURG = new RUL_CARECOSURG();
        /// <sumary>
        /// Motivo de la finalización (prematura) de este último ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        private readonly RUL_CAREASONEN RUL_CAREASONEN = new RUL_CAREASONEN();
        /// <sumary>
        /// Motivo de la finalización de este primer o único esquema de radioterapia (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        private readonly RUL_CAREASENDI RUL_CAREASENDI = new RUL_CAREASENDI();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Carboplatino 
        /// </sumary>
        private readonly RUL_CARBOPLFIR RUL_CARBOPLFIR = new RUL_CARBOPLFIR();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Dacarbazina 
        /// </sumary>
        private readonly RUL_CARBAFIRST RUL_CARBAFIRST = new RUL_CARBAFIRST();
        /// <sumary>
        /// Tipo de radioterapia aplicada en este primer o único esquema
        /// </sumary>
        private readonly RUL_CARADITYPE RUL_CARADITYPE = new RUL_CARADITYPE();
        /// <sumary>
        /// Motivo de la finalización de este último esquema de radioterapia suministrado en el corte actual (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        private readonly RUL_CARADIOTLA RUL_CARADIOTLA = new RUL_CARADIOTLA();
        /// <sumary>
        /// ¿Recibió el usuario algún tipo de radioterapia en el corte actual?
        /// </sumary>
        private readonly RUL_CARADIOTHE RUL_CARADIOTHE = new RUL_CARADIOTHE();
        /// <sumary>
        /// ¿Ha sido valorado el usuario por el servicio de psiquiatría durante este corte?
        /// </sumary>
        private readonly RUL_CAPSYCHIAT RUL_CAPSYCHIAT = new RUL_CAPSYCHIAT();
        /// <sumary>
        /// En este último ciclo el usuario recibió Procarbazina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAPROCARBA RUL_CAPROCARBA = new RUL_CAPROCARBA();
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_CAPREPHASE RUL_CAPREPHASE = new RUL_CAPREPHASE();
        /// <sumary>
        /// En este último esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        private readonly RUL_CAPREDSONA RUL_CAPREDSONA = new RUL_CAPREDSONA();
        /// <sumary>
        /// En este último esquema el usuario recibió Prednisolona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        private readonly RUL_CAPREDSOLO RUL_CAPREDSOLO = new RUL_CAPREDSOLO();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
        /// </sumary>
        private readonly RUL_CAPREDFIRS RUL_CAPREDFIRS = new RUL_CAPREDFIRS();
        /// <sumary>
        /// Grupo poblacional
        /// </sumary>
        private readonly RUL_CAPOPGROUP RUL_CAPOPGROUP = new RUL_CAPOPGROUP();
        /// <sumary>
        /// Número telefónico del paciente (incluyendo a familiares y cuidadores)
        /// </sumary>
        private readonly RUL_CAPHONES RUL_CAPHONES = new RUL_CAPHONES();
        /// <sumary>
        /// En este último ciclo el usuario recibió Pegfilgrastim (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAPEGFILGR RUL_CAPEGFILGR = new RUL_CAPEGFILGR();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Pegfilgrastim
        /// </sumary>
        private readonly RUL_CAPEGFFIRS RUL_CAPEGFFIRS = new RUL_CAPEGFFIRS();
        /// <sumary>
        /// En este último ciclo el usuario recibió Capecitabina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAPECITABI RUL_CAPECITABI = new RUL_CAPECITABI();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Capecitabina
        /// </sumary>
        private readonly RUL_CAPECIFIRS RUL_CAPECIFIRS = new RUL_CAPECIFIRS();
        /// <sumary>
        /// ¿El usuario fue valorado en consulta o procedimiento de cuidado paliativo durante este corte? (pueden haber sido múltiples)
        /// </sumary>
        private readonly RUL_CAPALLICAR RUL_CAPALLICAR = new RUL_CAPALLICAR();
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por profesional de la salud (no médico, incluye psicólogo) especialista en cuidado paliativo
        /// </sumary>
        private readonly RUL_CAPALLCARE RUL_CAPALLCARE = new RUL_CAPALLCARE();
        /// <sumary>
        /// En este último ciclo el usuario recibió Paclitaxel (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAPACLITAX RUL_CAPACLITAX = new RUL_CAPACLITAX();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Paclitaxel
        /// </sumary>
        private readonly RUL_CAPACLIFIR RUL_CAPACLIFIR = new RUL_CAPACLIFIR();
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por otro profesional de salud (no médico, incluye psicólogo) no especializado
        /// </sumary>
        private readonly RUL_CAOTHERPRO RUL_CAOTHERPRO = new RUL_CAOTHERPRO();
        /// <sumary>
        /// El usuario recibió en este corte Otra fase de quimioterapia denominada diferente a las anteriores (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAOTHERCHE RUL_CAOTHERCHE = new RUL_CAOTHERCHE();
        /// <sumary>
        /// Código de la IPS1 que suministra el primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CAODIPFIRS RUL_CAODIPFIRS = new RUL_CAODIPFIRS();
        /// <sumary>
        /// Código de ocupación 
        /// </sumary>
        private readonly RUL_CAOCUPATIO RUL_CAOCUPATIO = new RUL_CAOCUPATIO();
        /// <sumary>
        /// ¿Fue valorado el usuario por profesional en nutrición durante este corte?
        /// </sumary>
        private readonly RUL_CANUTRITIO RUL_CANUTRITIO = new RUL_CANUTRITIO();
        /// <sumary>
        /// ¿El usuario recibió soporte nutricional?
        /// </sumary>
        private readonly RUL_CANUTRISUP RUL_CANUTRISUP = new RUL_CANUTRISUP();
        /// <sumary>
        /// Número de Identificación del usuario
        /// </sumary>
        private readonly RUL_CANUMIDENT RUL_CANUMIDENT = new RUL_CANUMIDENT();
        /// <sumary>
        /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en este último ciclo de este corte
        /// </sumary>
        private readonly RUL_CANTINEOPL RUL_CANTINEOPL = new RUL_CANTINEOPL();
        /// <sumary>
        /// Nombre de la neoplasia (cáncer o tumor) maligna reportada
        /// </sumary>
        private readonly RUL_CANAMENEOP RUL_CANAMENEOP = new RUL_CANAMENEOP();
        /// <sumary>
        /// Tipo (nombre) de ese cáncer antecedente
        /// </sumary>
        private readonly RUL_CANAHICA RUL_CANAHICA = new RUL_CANAHICA();
        /// <sumary>
        /// Municipio de residencia
        /// </sumary>
        private readonly RUL_CAMUNRESID RUL_CAMUNRESID = new RUL_CAMUNRESID();
        /// <sumary>
        /// En este último ciclo el usuario recibió Metilprednisolona (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAMETHYLPR RUL_CAMETHYLPR = new RUL_CAMETHYLPR();
        /// <sumary>
        ///  En este primer ciclo el usuario recibió Metilprednisolona (en uso intratecal o manejo exclusivo de hematolinfaticos contabilizar como antineoplasico en la variable 53) 
        /// </sumary>
        private readonly RUL_CAMETHYLFI RUL_CAMETHYLFI = new RUL_CAMETHYLFI();
        /// <sumary>
        /// En este último esquema el usuario recibió Metotrexato
        /// </sumary>
        private readonly RUL_CAMETHOTRE RUL_CAMETHOTRE = new RUL_CAMETHOTRE();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Metotrexato
        /// </sumary>
        private readonly RUL_CAMETHOFIR RUL_CAMETHOFIR = new RUL_CAMETHOFIR();
        /// <sumary>
        /// En este último ciclo el usuario recibió Mercaptopurina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAMERCAPTO RUL_CAMERCAPTO = new RUL_CAMERCAPTO();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Mercaptopurina
        /// </sumary>
        private readonly RUL_CAMERCAPFI RUL_CAMERCAPFI = new RUL_CAMERCAPFI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Melfalan (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAMELFALAN RUL_CAMELFALAN = new RUL_CAMELFALAN();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Melfalan
        /// </sumary>
        private readonly RUL_CAMELFAFIR RUL_CAMELFAFIR = new RUL_CAMELFAFIR();
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista, otra especialida
        /// </sumary>
        private readonly RUL_CAMEDSPECI RUL_CAMEDSPECI = new RUL_CAMEDSPECI();
        /// <sumary>
        /// Objetivo (o intención) del tratamiento médico inicial (al diagnóstico)
        /// </sumary>
        private readonly RUL_CAMEDITRET RUL_CAMEDITRET = new RUL_CAMEDITRET();
        /// <sumary>
        /// Objetivo de la intervención médica durante el periodo de reporte.
        /// </sumary>
        private readonly RUL_CAMEDINTER RUL_CAMEDINTER = new RUL_CAMEDINTER();
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico general
        /// </sumary>
        private readonly RUL_CAMEDGENER RUL_CAMEDGENER = new RUL_CAMEDGENER();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAMACH RUL_CAMACH = new RUL_CAMACH();
        /// <sumary>
        /// Clasificación de riesgo leucemias o linfomas, y sólidos pediátricos
        /// </sumary>
        private readonly RUL_CALINFPEDI RUL_CALINFPEDI = new RUL_CALINFPEDI();
        /// <sumary>
        /// Tipo de radioterapia aplicada en el último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CALASTRADI RUL_CALASTRADI = new RUL_CALASTRADI();
        /// <sumary>
        /// Código de la IPS2 que suministra la radioterapia
        /// </sumary>
        private readonly RUL_CAIPSTWORA RUL_CAIPSTWORA = new RUL_CAIPSTWORA();
        /// <sumary>
        /// Código de la IPS2 que suministra la radioterapia
        /// </sumary>
        private readonly RUL_CAIPSTWOLA RUL_CAIPSTWOLA = new RUL_CAIPSTWOLA();
        /// <sumary>
        /// Código de la IPS que realizó este trasplante
        /// </sumary>
        private readonly RUL_CAIPSTRANS RUL_CAIPSTRANS = new RUL_CAIPSTRANS();
        /// <sumary>
        /// Código de la IPS que realizó cirugía reconstructiva
        /// </sumary>
        private readonly RUL_CAIPSTEREC RUL_CAIPSTEREC = new RUL_CAIPSTEREC();
        /// <sumary>
        /// Número de IPS que suministran este primer o único esquema de radioterapia
        /// </sumary>
        private readonly RUL_CAIPSRADIO RUL_CAIPSRADIO = new RUL_CAIPSRADIO();
        /// <sumary>
        /// Código de la IPS donde recibió la primera valoración de psiquiatría en este corte
        /// </sumary>
        private readonly RUL_CAIPSPSYCH RUL_CAIPSPSYCH = new RUL_CAIPSPSYCH();
        /// <sumary>
        /// Código de la IPS donde recibió la primera valoración de cuidado Paliativo
        /// </sumary>
        private readonly RUL_CAIPSPALLI RUL_CAIPSPALLI = new RUL_CAIPSPALLI();
        /// <sumary>
        /// Código de la IPS1 que suministra la radioterapia. 
        /// </sumary>
        private readonly RUL_CAIPSONERA RUL_CAIPSONERA = new RUL_CAIPSONERA();
        /// <sumary>
        /// Código de la IPS1 que suministra la radioterapia
        /// </sumary>
        private readonly RUL_CAIPSONELA RUL_CAIPSONELA = new RUL_CAIPSONELA();
        /// <sumary>
        /// Código de la IPS donde recibió la valoración por nutrición, en este corte
        /// </sumary>
        private readonly RUL_CAIPSNUTRI RUL_CAIPSNUTRI = new RUL_CAIPSNUTRI();
        /// <sumary>
        /// Número de IPS que suministran este último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAIPSLASTR RUL_CAIPSLASTR = new RUL_CAIPSLASTR();
        /// <sumary>
        /// Número de IPS que suministran el último ciclo de este corte
        /// </sumary>
        private readonly RUL_CAIPSLASTC RUL_CAIPSLASTC = new RUL_CAIPSLASTC();
        /// <sumary>
        /// Número de IPS que suministran el primer ciclo o único esquema de quimioterapia o terapia sistemica de este reporte
        /// </sumary>
        private readonly RUL_CAIPSFIRST RUL_CAIPSFIRST = new RUL_CAIPSFIRST();
        /// <sumary>
        /// Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte
        /// </sumary>
        private readonly RUL_CAIPLASU RUL_CAIPLASU = new RUL_CAIPLASU();
        /// <sumary>
        /// Código de la IPS que realizó la primera cirugía de este corte
        /// </sumary>
        private readonly RUL_CAIPFISU RUL_CAIPFISU = new RUL_CAIPFISU();
        /// <sumary>
        /// ¿Recibió quimioterapia intratecal en el último ciclo de este corte?
        /// </sumary>
        private readonly RUL_CAINTRATHE RUL_CAINTRATHE = new RUL_CAINTRATHE();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Interferón Alfa Natural 
        /// </sumary>
        private readonly RUL_CAINTERFIR RUL_CAINTERFIR = new RUL_CAINTERFIR();
        /// <sumary>
        /// En este último ciclo el usuario recibió Interferón Alfa Natural (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAINTERFER RUL_CAINTERFER = new RUL_CAINTERFER();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Intensificación (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAINTENSIF RUL_CAINTENSIF = new RUL_CAINTENSIF();
        /// <sumary>
        /// Fecha de consulta inicial con nutrición en este corte
        /// </sumary>
        private readonly RUL_CAINITDATE RUL_CAINITDATE = new RUL_CAINITDATE();
        /// <sumary>
        /// Número de ciclos iniciados y administrados en el periodo de reporte, incluyendo el que aún recibe en la fecha de corte.
        /// </sumary>
        private readonly RUL_CAINITCYCL RUL_CAINITCYCL = new RUL_CAINITCYCL();
        /// <sumary>
        /// Fecha de inicio del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAINITALDA RUL_CAINITALDA = new RUL_CAINITALDA();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Inducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAINDUCTIO RUL_CAINDUCTIO = new RUL_CAINDUCTIO();
        /// <sumary>
        /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAIMATINIB RUL_CAIMATINIB = new RUL_CAIMATINIB();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Imatinib 
        /// </sumary>
        private readonly RUL_CAIMATIFIR RUL_CAIMATIFIR = new RUL_CAIMATIFIR();
        /// <sumary>
        /// codigo unico de identificacion (BDUA -BDEX - PVS)
        /// </sumary>
        private readonly RUL_CAIDECODE RUL_CAIDECODE = new RUL_CAIDECODE();
        /// <sumary>
        /// Histología del tumor en muestra de biopsia o quirúrgica
        /// </sumary>
        private readonly RUL_CAHISTUMOR RUL_CAHISTUMOR = new RUL_CAHISTUMOR();
        /// <sumary>
        /// Tiene antecedente de otro cáncer primario (es decir, tiene o tuvo otro tumor maligno diferente al que está notificando)
        /// </sumary>
        private readonly RUL_CAHICA RUL_CAHICA = new RUL_CAHICA();
        /// <sumary>
        /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
        /// </sumary>
        private readonly RUL_CAHEMOTHER RUL_CAHEMOTHER = new RUL_CAHEMOTHER();
        /// <sumary>
        /// Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica
        /// </sumary>
        private readonly RUL_CAHACODIAG RUL_CAHACODIAG = new RUL_CAHACODIAG();
        /// <sumary>
        /// En este último ciclo el usuario recibió Gemcitabina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAGEMCITAB RUL_CAGEMCITAB = new RUL_CAGEMCITAB();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Gemcitabina 
        /// </sumary>
        private readonly RUL_CAGEMCIFIR RUL_CAGEMCIFIR = new RUL_CAGEMCIFIR();
        /// <sumary>
        /// En este último ciclo el usuario recibió Fluorouracilo (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CAFLUOROUR RUL_CAFLUOROUR = new RUL_CAFLUOROUR();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Fluorouracilo 
        /// </sumary>
        private readonly RUL_CAFLUOFIRS RUL_CAFLUOFIRS = new RUL_CAFLUOFIRS();
        /// <sumary>
        /// Motivo de la finalización (prematura) de este primer ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        private readonly RUL_CAFIRSTCYC RUL_CAFIRSTCYC = new RUL_CAFIRSTCYC();
        /// <sumary>
        /// Primer Nombre
        /// </sumary>
        private readonly RUL_CAFIRSNAME RUL_CAFIRSNAME = new RUL_CAFIRSNAME();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento largo o final (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CAFINALMAI RUL_CAFINALMAI = new RUL_CAFINALMAI();
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private readonly RUL_CAFILASNAM RUL_CAFILASNAM = new RUL_CAFILASNAM();
        /// <sumary>
        /// Fecha de afiliación a la EAPB que reporta
        /// </sumary>
        private readonly RUL_CAFFILDATE RUL_CAFFILDATE = new RUL_CAFFILDATE();
        /// <sumary>
        /// Características actuales del primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CAFEATURES RUL_CAFEATURES = new RUL_CAFEATURES();
        /// <sumary>
        /// Características actuales de este último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAFEATRADI RUL_CAFEATRADI = new RUL_CAFEATRADI();
        /// <sumary>
        /// Fecha de nacimiento del usuario
        /// </sumary>
        private readonly RUL_CAFCHNACIM RUL_CAFCHNACIM = new RUL_CAFCHNACIM();
        /// <sumary>
        /// En este último ciclo el usuario recibió Etopósido 
        /// </sumary>
        private readonly RUL_CAETOPOSID RUL_CAETOPOSID = new RUL_CAETOPOSID();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Etopósido
        /// </sumary>
        private readonly RUL_CAETOPFIRS RUL_CAETOPFIRS = new RUL_CAETOPFIRS();
        /// <sumary>
        /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
        /// </sumary>
        private readonly RUL_CAENTRDATE RUL_CAENTRDATE = new RUL_CAENTRDATE();
        /// <sumary>
        /// Fecha de fiscalización de primer o único esquema de radioterapia
        /// </sumary>
        private readonly RUL_CAENDDATER RUL_CAENDDATER = new RUL_CAENDDATER();
        /// <sumary>
        /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAENDDATEL RUL_CAENDDATEL = new RUL_CAENDDATEL();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Procarbazina
        /// </sumary>
        private readonly RUL_CAEBAZFIRS RUL_CAEBAZFIRS = new RUL_CAEBAZFIRS();
        /// <sumary>
        /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CADRUNEOPF RUL_CADRUNEOPF = new RUL_CADRUNEOPF();
        /// <sumary>
        /// Medicamento no POS 2 administrado al usuario- último ciclo
        /// </sumary>
        private readonly RUL_CADRUGTWOL RUL_CADRUGTWOL = new RUL_CADRUGTWOL();
        /// <sumary>
        /// Medicamento no POS 2 administrado al usuario- primer ciclo
        /// </sumary>
        private readonly RUL_CADRUGTWOF RUL_CADRUGTWOF = new RUL_CADRUGTWOF();
        /// <sumary>
        /// Medicamento no POS 3 administrado al usuario- primer ciclo
        /// </sumary>
        private readonly RUL_CADRUGTHRE RUL_CADRUGTHRE = new RUL_CADRUGTHRE();
        /// <sumary>
        /// Medicamento no POS 3 administrado al usuario- último ciclo
        /// </sumary>
        private readonly RUL_CADRUGPOST RUL_CADRUGPOST = new RUL_CADRUGPOST();
        /// <sumary>
        /// Medicamento no POS 1 administrado al usuario- último ciclo
        /// </sumary>
        private readonly RUL_CADRUGONEL RUL_CADRUGONEL = new RUL_CADRUGONEL();
        /// <sumary>
        /// Medicamento no POS 1 administrado al usuario- primer ciclo
        /// </sumary>
        private readonly RUL_CADRUGONEF RUL_CADRUGONEF = new RUL_CADRUGONEF();
        /// <sumary>
        /// En este último ciclo el usuario recibió Doxorubicina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CADOXORUBI RUL_CADOXORUBI = new RUL_CADOXORUBI();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Doxorubicina
        /// </sumary>
        private readonly RUL_CADOXOFIRS RUL_CADOXOFIRS = new RUL_CADOXOFIRS();
        /// <sumary>
        /// Novedad ADMINISTRATIVA del usuario respecto al reporte anterior
        /// </sumary>
        private readonly RUL_CADMINOVEL RUL_CADMINOVEL = new RUL_CADMINOVEL();
        /// <sumary>
        /// Fecha de desafiliación de la EPS
        /// </sumary>
        private readonly RUL_CADISCLAIM RUL_CADISCLAIM = new RUL_CADISCLAIM();
        /// <sumary>
        /// Motivo por el cual el usuario no tuvo diagnóstico por histopatología a la fecha de corte (aplica para registros con respuesta igual a 7 en la variable anterior)
        /// </sumary>
        private readonly RUL_CADIAGHIST RUL_CADIAGHIST = new RUL_CADIAGHIST();
        /// <sumary>
        /// Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        private readonly RUL_CADIAGDATE RUL_CADIAGDATE = new RUL_CADIAGDATE();
        /// <sumary>
        /// En este último esquema el usuario recibió Dexametasona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        private readonly RUL_CADEXAMETH RUL_CADEXAMETH = new RUL_CADEXAMETH();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Dexametasona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        private readonly RUL_CADEXAFIRS RUL_CADEXAFIRS = new RUL_CADEXAFIRS();
        /// <sumary>
        /// Fecha de muerte
        /// </sumary>
        private readonly RUL_CADEATHDAT RUL_CADEATHDAT = new RUL_CADEATHDAT();
        /// <sumary>
        /// Causa de muerte
        /// </sumary>
        private readonly RUL_CADEATHCAU RUL_CADEATHCAU = new RUL_CADEATHCAU();
        /// <sumary>
        /// Fecha de inicio del primer ciclo de quimioterapia de este corte
        /// </sumary>
        private readonly RUL_CADATFIRST RUL_CADATFIRST = new RUL_CADATFIRST();
        /// <sumary>
        /// Fecha de trasplante
        /// </sumary>
        private readonly RUL_CADATETRAN RUL_CADATETRAN = new RUL_CADATETRAN();
        /// <sumary>
        /// Fecha en que se realizó esta estadificación
        /// </sumary>
        private readonly RUL_CADATESTAG RUL_CADATESTAG = new RUL_CADATESTAG();
        /// <sumary>
        /// Fecha en que se realizó la estadificación de Dukes
        /// </sumary>
        private readonly RUL_CADATESCOL RUL_CADATESCOL = new RUL_CADATESCOL();
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private readonly RUL_CADATESBRE RUL_CADATESBRE = new RUL_CADATESBRE();
        /// <sumary>
        /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
        /// </sumary>
        private readonly RUL_CADATEREMI RUL_CADATEREMI = new RUL_CADATEREMI();
        /// <sumary>
        /// Fecha de la cirugía
        /// </sumary>
        private readonly RUL_CADATERECO RUL_CADATERECO = new RUL_CADATERECO();
        /// <sumary>
        /// Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CADATERADI RUL_CADATERADI = new RUL_CADATERADI();
        /// <sumary>
        /// Fecha de primera consulta con el servicio de psiquiatría (para todos los usuarios) en este corte
        /// </sumary>
        private readonly RUL_CADATEPSYC RUL_CADATEPSYC = new RUL_CADATEPSYC();
        /// <sumary>
        /// Fecha de inicio del último ciclo de quimioterapia de este corte
        /// </sumary>
        private readonly RUL_CADATELAST RUL_CADATELAST = new RUL_CADATELAST();
        /// <sumary>
        /// Fecha de recolección de muestra para estudio histopatológico
        /// </sumary>
        private readonly RUL_CADATEHIST RUL_CADATEHIST = new RUL_CADATEHIST();
        /// <sumary>
        /// Fecha de finalización del primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CADATEFIRS RUL_CADATEFIRS = new RUL_CADATEFIRS();
        /// <sumary>
        /// Fecha de finalización del último ciclo de este corte
        /// </sumary>
        private readonly RUL_CADATEENDC RUL_CADATEENDC = new RUL_CADATEENDC();
        /// <sumary>
        /// Fecha de primera consulta o procedimiento de cuidado paliativo en este corte
        /// </sumary>
        private readonly RUL_CADATECOPA RUL_CADATECOPA = new RUL_CADATECOPA();
        /// <sumary>
        /// Fecha de primera consulta con médico tratante de la enfermedad maligna
        /// </sumary>
        private readonly RUL_CADATECONS RUL_CADATECONS = new RUL_CADATECONS();
        /// <sumary>
        /// Fecha de informe histopatológico válido
        /// </sumary>
        private readonly RUL_CADARESHIS RUL_CADARESHIS = new RUL_CADARESHIS();
        /// <sumary>
        /// Fecha de clasificación de riesgo
        /// </sumary>
        private readonly RUL_CADALINPED RUL_CADALINPED = new RUL_CADALINPED();
        /// <sumary>
        /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
        /// </sumary>
        private readonly RUL_CADALASU RUL_CADALASU = new RUL_CADALASU();
        /// <sumary>
        /// Fecha de diagnóstico del otro cáncer primario
        /// </sumary>
        private readonly RUL_CADAHICA RUL_CADAHICA = new RUL_CADAHICA();
        /// <sumary>
        /// Fecha de realización de la primera cirugía en este reporte
        /// </sumary>
        private readonly RUL_CADAFISU RUL_CADAFISU = new RUL_CADAFISU();
        /// <sumary>
        /// En este último ciclo el usuario recibió Dacarbazina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CADACARBAZ RUL_CADACARBAZ = new RUL_CADACARBAZ();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Citarabina 
        /// </sumary>
        private readonly RUL_CACYTARAFI RUL_CACYTARAFI = new RUL_CACYTARAFI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Citarabina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CACYTARABI RUL_CACYTARABI = new RUL_CACYTARABI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Ciclofosfamida (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CACYCLOPHO RUL_CACYCLOPHO = new RUL_CACYCLOPHO();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Ciclofosfamida
        /// </sumary>
        private readonly RUL_CACYCLOFIR RUL_CACYCLOFIR = new RUL_CACYCLOFIR();
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private readonly RUL_CACUTDATE RUL_CACUTDATE = new RUL_CACUTDATE();
        /// <sumary>
        /// Características actuales del último ciclo de este corte
        /// </sumary>
        private readonly RUL_CACURRLAST RUL_CACURRLAST = new RUL_CACURRLAST();
        /// <sumary>
        /// Características actuales de este primer o único esquema de radioterapia
        /// </sumary>
        private readonly RUL_CACURRENTF RUL_CACURRENTF = new RUL_CACURRENTF();
        /// <sumary>
        /// Número de esquemas de radioterapia suministrados en el corte actual
        /// </sumary>
        private readonly RUL_CACOUNTRAD RUL_CACOUNTRAD = new RUL_CACOUNTRAD();
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_CACOUNTPHA RUL_CACOUNTPHA = new RUL_CACOUNTPHA();
        /// <sumary>
        /// Número de cirugías a las que fue sometido el usuario durante el periodo de reporte actual
        /// </sumary>
        private readonly RUL_CACOSU RUL_CACOSU = new RUL_CACOSU();
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Consolidación (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        private readonly RUL_CACONSOLID RUL_CACONSOLID = new RUL_CACONSOLID();
        /// <sumary>
        /// Código de última cirugía
        /// </sumary>
        private readonly RUL_CACOLASU RUL_CACOLASU = new RUL_CACOLASU();
        /// <sumary>
        /// Código de la IPS2 que suministra el primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CACOIPTWFI RUL_CACOIPTWFI = new RUL_CACOIPTWFI();
        /// <sumary>
        /// Código de primera cirugía
        /// </sumary>
        private readonly RUL_CACOFISU RUL_CACOFISU = new RUL_CACOFISU();
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        private readonly RUL_CACODETNIC RUL_CACODETNIC = new RUL_CACODETNIC();
        /// <sumary>
        /// Código de la IPS2 que suministra el último ciclo en este reporte
        /// </sumary>
        private readonly RUL_CACODEIPST RUL_CACODEIPST = new RUL_CACODEIPST();
        /// <sumary>
        /// Código de la IPS1 que suministra el último ciclo en este reporte
        /// </sumary>
        private readonly RUL_CACODEIPSO RUL_CACODEIPSO = new RUL_CACODEIPSO();
        /// <sumary>
        /// Código de la EPS o de la Dirección Territorial de Salud
        /// </sumary>
        private readonly RUL_CACODEEPS RUL_CACODEEPS = new RUL_CACODEEPS();
        /// <sumary>
        /// Novedad clínica del usuario a la fecha de corte
        /// </sumary>
        private readonly RUL_CACLINOVEL RUL_CACLINOVEL = new RUL_CACLINOVEL();
        /// <sumary>
        /// Estadificación clínica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor)
        /// </sumary>
        private readonly RUL_CACLILINFO RUL_CACLILINFO = new RUL_CACLILINFO();
        /// <sumary>
        /// En este último ciclo el usuario recibió Cisplatino 
        /// </sumary>
        private readonly RUL_CACISPLATI RUL_CACISPLATI = new RUL_CACISPLATI();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Cisplatino
        /// </sumary>
        private readonly RUL_CACISPLAFI RUL_CACISPLAFI = new RUL_CACISPLAFI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Ciclosporina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CACICLOSPO RUL_CACICLOSPO = new RUL_CACICLOSPO();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Ciclosporina 
        /// </sumary>
        private readonly RUL_CACICLOSFI RUL_CACICLOSFI = new RUL_CACICLOSFI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Clorambucilo (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CACHLORAMB RUL_CACHLORAMB = new RUL_CACHLORAMB();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Clorambucilo
        /// </sumary>
        private readonly RUL_CACHLORAFI RUL_CACHLORAFI = new RUL_CACHLORAFI();
        /// <sumary>
        /// ¿Recibió quimioterapia intratecal en el primer ciclo de este corte?
        /// </sumary>
        private readonly RUL_CACHEMOTHE RUL_CACHEMOTHE = new RUL_CACHEMOTHE();
        /// <sumary>
        /// ¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?
        /// </sumary>
        private readonly RUL_CACELLPROG RUL_CACELLPROG = new RUL_CACELLPROG();
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Busulfano
        /// </sumary>
        private readonly RUL_CABUSULFIR RUL_CABUSULFIR = new RUL_CABUSULFIR();
        /// <sumary>
        /// En este último ciclo el usuario recibió Busulfano (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CABUSULFAN RUL_CABUSULFAN = new RUL_CABUSULFAN();
        /// <sumary>
        /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CABOPLATIN RUL_CABOPLATIN = new RUL_CABOPLATIN();
        /// <sumary>
        /// En este primer ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CABLEOMYFI RUL_CABLEOMYFI = new RUL_CABLEOMYFI();
        /// <sumary>
        /// En este último ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
        /// </sumary>
        private readonly RUL_CABLEOMYCI RUL_CABLEOMYCI = new RUL_CABLEOMYCI();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public ResultPrototype_Expression() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ResultPrototype_Expression
        /// </sumary>
        /// <param name="CompanyIdLn">CompanyIdLn</param>
        /// <param name="OperatorIdLn">OperatorIdLn</param>
        /// <param name="LibraryIdLn">LibraryIdLn</param>
        /// <param name="TemplateIdLn">TemplateIdLn</param>
        /// <param name="FrmCodiLn">FrmCodiLn</param>
        /// <param name="CaseNumberLn">CaseNumberLn</param>
        /// <param name="PeriodLn">PeriodLn</param>
        /// <param name="YearLn">YearLn</param>
        /// <param name="UserCodeLn">UserCodeLn</param>
        /// <param name="FileIdLn">FileIdLn</param>
        /// <param name="IdTypePopulationLn">IdTypePopulationLn</param>
        public RuntimeResult<bool> Execute(long CompanyIdLn, long OperatorIdLn, long LibraryIdLn, long TemplateIdLn, string FrmCodiLn, string CaseNumberLn, long PeriodLn, long YearLn, string UserCodeLn, string FileIdLn, long IdTypePopulationLn)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.CompanyIdLn = CompanyIdLn;
                this.OperatorIdLn = OperatorIdLn;
                this.LibraryIdLn = LibraryIdLn;
                this.TemplateIdLn = TemplateIdLn;
                this.FrmCodiLn = FrmCodiLn;
                this.CaseNumberLn = CaseNumberLn;
                this.PeriodLn = PeriodLn;
                this.YearLn = YearLn;
                this.UserCodeLn = UserCodeLn;
                this.FileIdLn = FileIdLn;
                this.IdTypePopulationLn = IdTypePopulationLn;
                this.ResultMessage = FUNC_ResultMessage();
                this.ResultPrototype = FUNC_ResultPrototype();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<bool>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_ResultPrototype()
        {
            try
            {
                ENT_parameters0247 parameters0247 = new ENT_parameters0247()
                {
                    CompanyId = CompanyIdLn,
                    OperatorId = OperatorIdLn,
                    LibraryId = LibraryIdLn,
                    TemplateId = TemplateIdLn,
                    FrmCodi = FrmCodiLn,
                    CaseNumber = CaseNumberLn,
                    Period = PeriodLn,
                    Year = YearLn,
                    UserCode = UserCodeLn,
                    FileId = FileIdLn,
                    IdTypePopulation = IdTypePopulationLn,
                };

                //Fecha de corte
                var date = new DateTime((Convert.ToInt32(parameters0247.Year) + 1), 1, 1);

                //Respuesta Regla main
                var result = Helper.USR_Main0247(parameters0247);
                if (result.IsError)
                {
                    this.FileName = result.FileName;
                    this.ResultMessage = result.ErrorMessage;
                    return false;
                }

                //Nombre de archivo Head
                string Filename = result.FileName;

                if (parameters0247.Year.ToString() != Filename.Substring(0, 4)) { throw new ArgumentException("El Año reportado en el archivo no corresponde con el año seleccionado en la plantilla"); }

                //Adaptador global
                int adapterId = 1;

                //Valida el tipo de poblacion                
                var sql = new StringBuilder();
                sql.Append(" SELECT Id ");
                sql.Append(" FROM TypeDetail WITH(NOLOCK)");
                sql.Append(" WHERE IdTypeHead = 72");
                sql.AppendFormat(" AND  Code = {0} ", parameters0247.IdTypePopulation);

                var resultTypepopulation = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (!resultTypepopulation.IsSuccessful)
                {
                    this.FileName = resultTypepopulation.FileName;
                    this.ResultMessage = resultTypepopulation.ErrorMessage;
                    return false;
                }
                dynamic idtypepopulation = JsonConvert.DeserializeObject<dynamic>(resultTypepopulation.Result.ToString());
                int info = 0;
                if (idtypepopulation != null && idtypepopulation.Count > 0)
                    info = (int)((JProperty)((JContainer)((JContainer)idtypepopulation).First).First).Value;
                else
                {
                    this.ResultMessage = "Id tipo de poblacion invalido";
                    return false;
                }

                //Valida el tipo de operadore
                sql = new StringBuilder();

                sql.Append(" SELECT Id ");
                sql.Append(" FROM Operator WITH(NOLOCK)");
                sql.AppendFormat(" WHERE  Id = {0} ", parameters0247.OperatorId);

                var resultIdOperator = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (!resultIdOperator.IsSuccessful)
                {
                    this.FileName = resultIdOperator.FileName;
                    this.ResultMessage = resultIdOperator.ErrorMessage;
                    return false;
                }
                var _idOperator = JsonConvert.DeserializeObject<List<dynamic>>(resultIdOperator.Result.ToString());

                if (_idOperator.Count() == 0)
                {
                    this.ResultMessage = "Id operador invalido";
                    return false;
                }

                // Valida si existe un cargue para el periodo reportado
                sql = new StringBuilder();
                sql.Append(" SELECT IdOperator,IdTypePopulation");
                sql.Append(" FROM FileHead0247 WITH(NOLOCK)");
                sql.AppendFormat(" WHERE CutOffDate = '{0}'", date.ToString("MM/dd/yyyy"));
                sql.AppendFormat(" AND  IdOperator = {0} ", parameters0247.OperatorId);
                sql.AppendFormat(" AND IdTypePopulation = {0}", info);

                var resultExecute = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

                if (resultExecute.IsError)
                {
                    this.ResultMessage = resultExecute.ErrorMessage;
                    return false;
                }

                var _head = JsonConvert.DeserializeObject<List<dynamic>>(resultExecute.Result.ToString());
                if (_head != null && _head.Count() > 0)
                {
                    this.ResultMessage = "Ya existe un Cargue para este periodo";
                    return false;
                }

                // consulta todo los operadores  para validar en memoria
                sql = new StringBuilder();
                sql.Append(" SELECT DISTINCT  QualificationCode");
                sql.Append(" FROM Operator WITH(NOLOCK)");
                sql.Append("where IdOperatorType = 70");

                var operatorResul = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

                if (operatorResul.IsError)
                {
                    this.FileName = operatorResul.FileName;
                    this.ResultMessage = operatorResul.ErrorMessage;
                    return false;
                }
                var listaQualification = JsonConvert.DeserializeObject<List<dynamic>>(operatorResul.Result.ToString());

                //Consulta la tabla typedetail para rendimiento optimo
                sql = new StringBuilder();
                sql.Append("SELECT DISTINCT Code  ");
                sql.Append("FROM TypeDetail WITH (NOLOCK)");
                sql.Append("WHERE IdTypeHead=17");

                var codeMunicipalyResul = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

                if (codeMunicipalyResul.IsError)
                {
                    this.FileName = codeMunicipalyResul.FileName;
                    this.ResultMessage = codeMunicipalyResul.ErrorMessage;
                    return false;
                }
                var listaCodeMunicipaly = JsonConvert.DeserializeObject<List<dynamic>>(codeMunicipalyResul.Result.ToString());

                //Consulta los codigos de ocupacion typedetail
                sql = new StringBuilder();
                sql.Append("SELECT DISTINCT Code ");
                sql.Append("FROM TypeDetail WITH (NOLOCK)");
                sql.Append("WHERE IdTypeHead = 56");

                var occupationCode = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (occupationCode.IsError)
                {
                    this.FileName = occupationCode.FileName;
                    this.ResultMessage = occupationCode.ErrorMessage;
                    return false;
                }
                var listOccupationCode = JsonConvert.DeserializeObject<List<dynamic>>(occupationCode.Result.ToString());

                //Consulta y valida el tipo de poblacion
                sql = new StringBuilder();
                sql.Append(" SELECT Id FROM TypeDetail WITH(NOLOCK)");
                sql.AppendFormat(" WHERE Code = {0} AND IdTypeHead = 72", parameters0247.IdTypePopulation);

                var population = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (population.IsError)
                {
                    this.FileName = population.FileName;
                    this.ResultMessage = population.ErrorMessage;
                    return false;
                }
                var typePopulation = JsonConvert.DeserializeObject<List<dynamic>>(population.Result.ToString());

                if (typePopulation == null || typePopulation.Count == 0)
                {
                    this.ResultMessage = "El tipo de IPS del afiliado no existe";
                    return false;
                }
                var entity = result.Result;
                List<ENT_StructureRes0247> _entity = entity;
                var listErrors = new List<string>();

                const string folder = "Resolucion0247Data";
                int index = 0;
                //Valida si el usuario existe en la BD 
                var documentTypes = Helper.USR_GetDocumentTypes(adapterId);
                var listDocumentTypesDB = JsonConvert.DeserializeObject<List<dynamic>>(documentTypes.Result.ToString());
                Helper.USR_ValidateDocumentNumber0247(adapterId, _entity, listErrors, index, listDocumentTypesDB, info);

                index = 0;
                foreach (var ent in _entity)
                {
                    //Valida Codigos de habilitacion existentes en la BD  -  Codigos de Ocupacion 
                    DateTime CUTDATE = DateTime.Now;
                    DateTime DIAGNOSISDATE = DateTime.Now;
                    //Ejecuta las reglas del BRM
                    var res = Helper.SYS_VerificationPrototype(new Func<object>[]
                    {
                   () => RUL_CAFIRSNAME.Execute(ent.FirstName),
                        () => RUL_CASECNAME.Execute(ent.SecondName),
                        () => RUL_CAFILASNAM.Execute(ent.FirstLastName),
                        () => RUL_CASELASNAM.Execute(ent.SecondLastName),
                        () => RUL_CATYIDENTI.Execute(ent.IdentificationType,ent.RegimeType),
                        () => RUL_CANUMIDENT.Execute(ent.DocumentNumber),
                        () => RUL_CAFCHNACIM.Execute(Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate)),
                        () => RUL_CASEXO.Execute(ent.IdSex),
                        () => RUL_CAOCUPATIO.Execute(ent.OccupationCode,ent.RegimeType),////=> problema pr
                        () => RUL_CAREGITYPE.Execute(ent.RegimeType),
                        () => RUL_CACODEEPS.Execute(ent.CodeEPS),
                        () => RUL_CACODETNIC.Execute(Convert.ToInt32(ent.CodeEthnic),ent.RegimeType),//=> promemita
                        () => RUL_CAPOPGROUP.Execute(Convert.ToInt32(ent.PopulationGroup),ent.RegimeType),
                        () => RUL_CAMUNRESID.Execute(ent.MunicipalityResidence),
                        () => RUL_CAPHONES.Execute(ent.Phones),
                        () => RUL_CAFFILDATE.Execute(Convert.ToDateTime(ent.AffiliationDate),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate)),
                        () => RUL_CANAMENEOP.Execute(ent.NameNeoplasia),//=> problema
                        () => RUL_CADIAGDATE.Execute(Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.AffiliationDate)),
                        () => RUL_CADATEREMI.Execute(Convert.ToDateTime(Convert.ToDateTime(ent.DateRemission)),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.EntryDate),ent.RegimeType),
                        () => RUL_CAENTRDATE.Execute(Convert.ToDateTime(ent.EntryDate),Convert.ToDateTime(Convert.ToDateTime(ent.DateRemission)),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CATYPETEST.Execute(Convert.ToInt32(ent.TypeTest),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CADIAGHIST.Execute(Convert.ToInt32(ent.DiagnosticHistopathology),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToInt32(ent.TypeTest)),
                        () => RUL_CADATEHIST.Execute(Convert.ToDateTime(ent.DateHistopathological),Convert.ToDateTime(ent.BirthDate),Convert.ToInt32(ent.TypeTest),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.DateRemission),Convert.ToDateTime(ent.CutDate)),
                        () => RUL_CADARESHIS.Execute(Convert.ToDateTime(ent.DateResulHistopathological),ent.RegimeType,Convert.ToInt32(ent.TypeTest),Convert.ToDateTime(ent.DateRemission),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DiagnosisDate)),////=>
                        () => RUL_CAHACODIAG.Execute(ent.HabilitationCodeDiagnostic,Convert.ToInt32(ent.TypeTest),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CADATECONS.Execute(Convert.ToDateTime(ent.DateFirstConsultation),Convert.ToDateTime(ent.DiagnosisDate),ent.RegimeType,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateRemission),Convert.ToDateTime(ent.CutDate)),
                        () => RUL_CAHISTUMOR.Execute(Convert.ToInt32(ent.HistologyTumor),Convert.ToInt32(ent.TypeTest),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CATUDIFFER.Execute(Convert.ToInt32(ent.DegreeTumorDifferentiation),Convert.ToDateTime(ent.DiagnosisDate),ent.RegimeType,Convert.ToInt32(ent.TypeTest)),
                        () => RUL_CASOLTUMST.Execute(Convert.ToInt32(ent.SolidTumorStaging),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),ent.NameNeoplasia),
                        () => RUL_CADATESTAG.Execute(Convert.ToDateTime(ent.DateStaging),Convert.ToDateTime(ent.DateRemission),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DiagnosisDate),ent.RegimeType,Convert.ToInt32(ent.SolidTumorStaging)),
                        () => RUL_CATESTBREA.Execute(Convert.ToInt32(ent.TestBreastCancer),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),ent.NameNeoplasia),
                        () => RUL_CADATESBRE.Execute(Convert.ToDateTime(ent.DateTestBreastCancer),Convert.ToDateTime(ent.DateRemission),Convert.ToDateTime(ent.CutDate),ent.NameNeoplasia,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToInt32(ent.TestBreastCancer),ent.RegimeType),
                        () => RUL_CARESTESBR.Execute(Convert.ToInt32(ent.ResultTestBreastCancer),ent.NameNeoplasia,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToInt32(ent.TestBreastCancer),ent.RegimeType),
                        () => RUL_CATESCOLOR.Execute(Convert.ToInt32(ent.TestColorectalCancer),ent.RegimeType,ent.NameNeoplasia),
                        () => RUL_CADATESCOL.Execute(Convert.ToDateTime(ent.DateTestColorectalCancer),ent.NameNeoplasia,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToInt32(ent.TestColorectalCancer)),
                        () => RUL_CACLILINFO.Execute(Convert.ToInt32(ent.ClinicalStagingLymphoma),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),ent.NameNeoplasia),
                        () => RUL_CASTAPROST.Execute(Convert.ToInt32(ent.StagingProstateCancer),ent.RegimeType,ent.NameNeoplasia),
                        () => RUL_CALINFPEDI.Execute(Convert.ToInt32(ent.RiskLymphomasPediatricSolids),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CADALINPED.Execute(Convert.ToDateTime(ent.DateRiskLymphomasPediatricSolids),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),Convert.ToInt32(ent.RiskLymphomasPediatricSolids),ent.RegimeType),
                        () => RUL_CAMEDITRET.Execute(Convert.ToInt32(ent.ObjectiveMedicalTreatment),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CAMEDINTER.Execute(Convert.ToInt32(ent.ObjectiveMedicalIntervention),ent.RegimeType),
                        () => RUL_CAHICA.Execute(Convert.ToInt32(ent.HistorialCancer),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate)),
                        () => RUL_CADAHICA.Execute(Convert.ToDateTime(ent.DateHistorialCancer),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                        () => RUL_CANAHICA.Execute(ent.NameHistorialCancer,ent.RegimeType),/////=>
                         () => RUL_CAHEMOTHER.Execute(Convert.ToInt32(ent.Chemotherapy),ent.RegimeType,ent.CountPhaseChemotherapy,Convert.ToInt32(ent.PrephaseChemotherapy),Convert.ToInt32(ent.InductionChemotherapy),Convert.ToInt32(ent.IntensificationChemotherapy)
                         ,Convert.ToInt32(ent.ConsolidationChemotherapy),Convert.ToInt32(ent.ReinductionChemotherapy),Convert.ToInt32(ent.MaintenanceChemotherapy),Convert.ToInt32(ent.FinalMaintenanceChemotherapy),Convert.ToInt32(ent.OtherChemotherapy),ent.InitiatedCycles
                         ,Convert.ToInt32(ent.UbicationFirstCycle),Convert.ToDateTime(ent.DateFirstCycle),ent.IPSFirstCycle,ent.CodeIPSOneFirstCycle,ent.CodeIPSTwoFirstCycle,ent.AntineoplasticDrugsFirstCycle,Convert.ToInt32(ent.BleomycinFirstCycle)
                         ,Convert.ToInt32(ent.BusulfanFirstCycle),Convert.ToInt32(ent.CapecitabineFirstCycle),Convert.ToInt32(ent.CarboplatinFirstCycle),Convert.ToInt32(ent.CyclophosphamideFirstCycle),Convert.ToInt32(ent.CiclosporinFirstCycle),Convert.ToInt32(ent.CisplatinFirstCycle)
                         ,Convert.ToInt32(ent.CytarabineFirstCycle),Convert.ToInt32(ent.ChlorambucilFirstCycle),Convert.ToInt32(ent.DacarbazineFirstCycle),Convert.ToInt32(ent.DoxorubicinFirstCycle),Convert.ToInt32(ent.EtoposideFirstCycle),Convert.ToInt32(ent.FluorouracilFirstCycle),Convert.ToInt32(ent.GemcitabineFirstCycle)
                         ,Convert.ToInt32(ent.ImatinibFirstCycle),Convert.ToInt32(ent.InterferonAlfaNaturalFirstCycle),Convert.ToInt32(ent.MelfalanFirstCycle),Convert.ToInt32(ent.MercaptopurineFirstCycle),Convert.ToInt32(ent.MethotrexateFirstCycle),Convert.ToInt32(ent.PaclitaxelFirstCycle),Convert.ToInt32(ent.PegfilgrastimFirstCycle)
                         ,Convert.ToInt32(ent.ProcarbazineFirstCycle),Convert.ToInt32(ent.RituximabFirstCycle),Convert.ToInt32(ent.TamoxifenFirstCycle),Convert.ToInt32(ent.ThioguanineFirstCycle),Convert.ToInt32(ent.TrastuzumabFirstCycle),Convert.ToInt32(ent.VinblastineFirstCycle),Convert.ToInt32(ent.PrednisoneFirstCycle)
                         ,Convert.ToInt32(ent.PrednisoloneFirstCycle),Convert.ToInt32(ent.MethylprednisoloneFirstCycle),Convert.ToInt32(ent.DexamethasoneFirstCycle),ent.DrugPOSOneFirstCycle,ent.DrugPOSTwoFirstCycle,ent.DrugPOSThreeFirstCycle,Convert.ToInt32(ent.IntrathecalChemotherapyFirstCycle)
                         ,Convert.ToDateTime(ent.EndDateFirstCycle),Convert.ToInt32(ent.CurrentFeaturesFirstCycle),Convert.ToInt32(ent.ReasonEndingFirstCycle),Convert.ToInt32(ent.UTLastCycle),Convert.ToDateTime(ent.InitalDateLastCycle),ent.IPSLastCycle,ent.CodeIPSOneLastCycle,ent.CodeIPSTwoLastCycle
                         ,ent.AntineoplasticDrugsLastCycle,Convert.ToInt32(ent.BleomycinLastCycle),Convert.ToInt32(ent.BusulfanLastCycle),Convert.ToInt32(ent.CapecitabineLastCycle),Convert.ToInt32(ent.CarboplatinLastCycle),Convert.ToInt32(ent.CyclophosphamideLastCycle),Convert.ToInt32(ent.CiclosporinLastCycle)
                         ,Convert.ToInt32(ent.CisplatinLastCycle),Convert.ToInt32(ent.CytarabineLastCycle),Convert.ToInt32(ent.ChlorambucilLastCycle),Convert.ToInt32(ent.DacarbazineLastCycle),Convert.ToInt32(ent.DoxorubicinLastCycle),Convert.ToInt32(ent.EtoposideLastCycle),Convert.ToInt32(ent.FluorouracilLastCycle),Convert.ToInt32(ent.GemcitabineLastCycle)
                         ,Convert.ToInt32(ent.ImatinibLastCycle),Convert.ToInt32(ent.InterferonAlfaNaturalLastCycle),Convert.ToInt32(ent.MelfalanLastCycle),Convert.ToInt32(ent.MercaptopurineLastCycle),Convert.ToInt32(ent.PaclitaxelLastCycle),Convert.ToInt32(ent.MethotrexateLastCycle),Convert.ToInt32(ent.PegfilgrastimLastCycle)
                         ,Convert.ToInt32(ent.ProcarbazineLastCycle),Convert.ToInt32(ent.RituximabLastCycle),Convert.ToInt32(ent.TamoxifenLastCycle),Convert.ToInt32(ent.ThioguanineLastCycle),Convert.ToInt32(ent.TrastuzumabLastCycle),Convert.ToInt32(ent.VinblastineLastCycle),Convert.ToInt32(ent.VincristineLastCycle),Convert.ToInt32(ent.PrednisoneLastCycle)
                         ,Convert.ToInt32(ent.PrednisoloneLastCycle),Convert.ToInt32(ent.MethylprednisoloneLastCycle),Convert.ToInt32(ent.DexamethasoneLastCycle),ent.DrugPOSOneLastCycle,ent.DrugPOSTwoLastCycle,ent.DrugPOSThreeLastCycle,Convert.ToInt32(ent.IntrathecalChemotherapyLastCycle),Convert.ToDateTime(ent.EndDateLastCycle)
                         ,Convert.ToInt32(ent.CurrentFeaturesLastCycle),Convert.ToInt32(ent.ReasonEndingLastCycle),Convert.ToInt32(ent.VincristineFirstCycle)),
                         () => RUL_CACOUNTPHA.Execute(ent.CountPhaseChemotherapy,Convert.ToInt32(Convert.ToInt32(ent.Chemotherapy)),ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAPREPHASE.Execute(Convert.ToInt32(ent.PrephaseChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAINDUCTIO.Execute(Convert.ToInt32(ent.InductionChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAINTENSIF.Execute(Convert.ToInt32(ent.IntensificationChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CACONSOLID.Execute(Convert.ToInt32(ent.ConsolidationChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAREINDUCT.Execute(Convert.ToInt32(ent.ReinductionChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAMACH.Execute(Convert.ToInt32(ent.MaintenanceChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAFINALMAI.Execute(Convert.ToInt32(ent.FinalMaintenanceChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAOTHERCHE.Execute(Convert.ToInt32(ent.OtherChemotherapy),ent.CountPhaseChemotherapy,ent.RegimeType,ent.NameNeoplasia),
                         () => RUL_CAINITCYCL.Execute(ent.InitiatedCycles,ent.RegimeType,Convert.ToInt32(ent.Chemotherapy)),
                         () => RUL_CAUBIFIRST.Execute(Convert.ToInt32(ent.UbicationFirstCycle),Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CADATFIRST.Execute(Convert.ToDateTime(ent.DateFirstCycle),Convert.ToInt32(ent.Chemotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CAIPSFIRST.Execute(ent.IPSFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CAODIPFIRS.Execute(ent.CodeIPSOneFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CACOIPTWFI.Execute(ent.CodeIPSTwoFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CADRUNEOPF.Execute(ent.AntineoplasticDrugsFirstCycle,ent.RegimeType),
                         () => RUL_CABLEOMYFI.Execute(Convert.ToInt32(ent.BleomycinFirstCycle),ent.RegimeType),
                         () => RUL_CABUSULFIR.Execute(Convert.ToInt32(ent.BusulfanFirstCycle),ent.RegimeType),
                         () => RUL_CAPECIFIRS.Execute(Convert.ToInt32(ent.CapecitabineFirstCycle),ent.RegimeType),
                         () => RUL_CARBOPLFIR.Execute(Convert.ToInt32(ent.CarboplatinFirstCycle),ent.RegimeType),
                         () => RUL_CACYCLOFIR.Execute(Convert.ToInt32(ent.CyclophosphamideFirstCycle),ent.RegimeType),
                         () => RUL_CACICLOSFI.Execute(Convert.ToInt32(ent.CiclosporinFirstCycle),ent.RegimeType),
                        () => RUL_CACISPLAFI.Execute(Convert.ToInt32(ent.CisplatinFirstCycle),ent.RegimeType),
                         () => RUL_CACYTARAFI.Execute(Convert.ToInt32(ent.CytarabineFirstCycle),ent.RegimeType),
                         () => RUL_CACHLORAFI.Execute(Convert.ToInt32(ent.ChlorambucilFirstCycle),ent.RegimeType),
                         () => RUL_CARBAFIRST.Execute(Convert.ToInt32(ent.DacarbazineFirstCycle),ent.RegimeType),
                         () => RUL_CADOXOFIRS.Execute(Convert.ToInt32(ent.DoxorubicinFirstCycle),ent.RegimeType),
                         () => RUL_CAETOPFIRS.Execute(Convert.ToInt32(ent.EtoposideFirstCycle),ent.RegimeType),
                         () => RUL_CAFLUOFIRS.Execute(Convert.ToInt32(ent.FluorouracilFirstCycle),ent.RegimeType),
                         () => RUL_CAGEMCIFIR.Execute(Convert.ToInt32(ent.GemcitabineFirstCycle),ent.RegimeType),
                         () => RUL_CAIMATIFIR.Execute(Convert.ToInt32(ent.ImatinibFirstCycle),ent.RegimeType),
                        () => RUL_CAINTERFIR.Execute(Convert.ToInt32(ent.InterferonAlfaNaturalFirstCycle),ent.RegimeType),
                         () => RUL_CAMELFAFIR.Execute(Convert.ToInt32(ent.MelfalanFirstCycle),ent.RegimeType),
                         () => RUL_CAMERCAPFI.Execute(Convert.ToInt32(ent.MercaptopurineFirstCycle),ent.RegimeType),
                         () => RUL_CAMETHOFIR.Execute(Convert.ToInt32(ent.MethotrexateFirstCycle),ent.RegimeType),
                         () => RUL_CAPACLIFIR.Execute(Convert.ToInt32(ent.PaclitaxelFirstCycle),ent.RegimeType),
                         () => RUL_CAPEGFFIRS.Execute(Convert.ToInt32(ent.PegfilgrastimFirstCycle),ent.RegimeType),
                         () => RUL_CAEBAZFIRS.Execute(Convert.ToInt32(ent.ProcarbazineFirstCycle),ent.RegimeType),
                         () => RUL_CARITUXFIR.Execute(Convert.ToInt32(ent.RituximabFirstCycle),ent.RegimeType),
                         () => RUL_CATAMOXFIR.Execute(Convert.ToInt32(ent.TamoxifenFirstCycle),ent.RegimeType),
                         () => RUL_CATHIOIRST.Execute(Convert.ToInt32(ent.ThioguanineFirstCycle),ent.RegimeType),
                         () => RUL_CATRASTUFI.Execute(Convert.ToInt32(ent.TrastuzumabFirstCycle),ent.RegimeType),////=>
                         () => RUL_CAVINBLAFI.Execute(Convert.ToInt32(ent.VinblastineFirstCycle),ent.RegimeType),
                         () => RUL_CAVINCFIRS.Execute(Convert.ToInt32(ent.VincristineFirstCycle),ent.RegimeType),
                         () => RUL_CAPREDFIRS.Execute(Convert.ToInt32(ent.PrednisoneFirstCycle),ent.RegimeType),
                         () => RUL_CASOLONEFI.Execute(Convert.ToInt32(ent.PrednisoloneFirstCycle),ent.RegimeType),
                         () => RUL_CAMETHYLFI.Execute(Convert.ToInt32(ent.MethylprednisoloneFirstCycle),ent.RegimeType),
                         () => RUL_CADEXAFIRS.Execute(Convert.ToInt32(ent.DexamethasoneFirstCycle),ent.RegimeType),
                         () => RUL_CADRUGONEF.Execute(ent.DrugPOSOneFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CADRUGTWOF.Execute(ent.DrugPOSTwoFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType,ent. DrugPOSOneFirstCycle),
                         () => RUL_CADRUGTHRE.Execute(ent.DrugPOSThreeFirstCycle,Convert.ToInt32(ent.Chemotherapy),ent.RegimeType,ent. DrugPOSOneFirstCycle,ent. DrugPOSTwoFirstCycle),
                         () => RUL_CACHEMOTHE.Execute(Convert.ToInt32(ent.IntrathecalChemotherapyFirstCycle)),
                         () => RUL_CADATEFIRS.Execute(Convert.ToDateTime(ent.EndDateFirstCycle),Convert.ToInt32(ent.Chemotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DateFirstCycle),ent.RegimeType),
                         () => RUL_CAFEATURES.Execute(Convert.ToInt32(ent.CurrentFeaturesFirstCycle),Convert.ToInt32(ent.Chemotherapy),ent.RegimeType),
                         () => RUL_CAFIRSTCYC.Execute(Convert.ToInt32(ent.ReasonEndingFirstCycle),Convert.ToInt32(ent.CurrentFeaturesFirstCycle),ent.RegimeType),
                         () => RUL_CAUTLASTCY.Execute(Convert.ToInt32(ent.UTLastCycle),Convert.ToInt32(ent.Chemotherapy),ent.RegimeType,Convert.ToDateTime(ent.InitalDateLastCycle),ent.IPSLastCycle,ent.CodeIPSOneLastCycle,ent.CodeIPSTwoLastCycle,ent.AntineoplasticDrugsLastCycle,Convert.ToInt32(ent.BleomycinLastCycle)
                         ,Convert.ToInt32(ent.BusulfanLastCycle),Convert.ToInt32(ent.CapecitabineLastCycle),Convert.ToInt32(ent.CarboplatinLastCycle),Convert.ToInt32(ent.CyclophosphamideLastCycle),Convert.ToInt32(ent.CiclosporinLastCycle),Convert.ToInt32(ent.CisplatinLastCycle),Convert.ToInt32(ent.CytarabineLastCycle),Convert.ToInt32(ent.ChlorambucilLastCycle)
                         ,Convert.ToInt32(ent.DacarbazineLastCycle),Convert.ToInt32(ent.DoxorubicinLastCycle),Convert.ToInt32(ent.EtoposideLastCycle),Convert.ToInt32(ent.FluorouracilLastCycle),Convert.ToInt32(ent.GemcitabineLastCycle),Convert.ToInt32(ent.ImatinibLastCycle),Convert.ToInt32(ent.InterferonAlfaNaturalLastCycle),Convert.ToInt32(ent.MelfalanLastCycle)
                         ,Convert.ToInt32(ent.MercaptopurineLastCycle),Convert.ToInt32(ent.MethotrexateLastCycle),Convert.ToInt32(ent.PaclitaxelLastCycle),Convert.ToInt32(ent.PegfilgrastimLastCycle),Convert.ToInt32(ent.ProcarbazineLastCycle),Convert.ToInt32(ent.RituximabLastCycle),Convert.ToInt32(ent.TamoxifenLastCycle),Convert.ToInt32(ent.ThioguanineLastCycle)
                         ,Convert.ToInt32(ent.TrastuzumabLastCycle),Convert.ToInt32(ent.VinblastineLastCycle),Convert.ToInt32(ent.VincristineLastCycle),Convert.ToInt32(ent.PrednisoneLastCycle),Convert.ToInt32(ent.PrednisoloneLastCycle),Convert.ToInt32(ent.MethylprednisoloneLastCycle),Convert.ToInt32(ent.DexamethasoneLastCycle),ent.DrugPOSOneLastCycle
                         ,ent.DrugPOSTwoLastCycle,ent.DrugPOSThreeLastCycle,Convert.ToInt32(ent.IntrathecalChemotherapyLastCycle),Convert.ToDateTime(ent.EndDateLastCycle),Convert.ToInt32(ent.CurrentFeaturesLastCycle),Convert.ToInt32(ent.ReasonEndingLastCycle)),
                         () => RUL_CADATELAST.Execute(Convert.ToDateTime(ent.InitalDateLastCycle),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.EndDateFirstCycle),ent.RegimeType),
                         () => RUL_CAIPSLASTC.Execute(ent.IPSLastCycle,ent.RegimeType),
                         () => RUL_CACODEIPSO.Execute(ent.CodeIPSOneLastCycle,ent.RegimeType),
                         () => RUL_CACODEIPST.Execute(ent.CodeIPSTwoLastCycle,ent.RegimeType),
                         () => RUL_CANTINEOPL.Execute(ent.AntineoplasticDrugsLastCycle,ent.RegimeType),
                         () => RUL_CABLEOMYCI.Execute(Convert.ToInt32(ent.BleomycinLastCycle),ent.RegimeType),
                         () => RUL_CABUSULFAN.Execute(Convert.ToInt32(ent.BusulfanLastCycle),ent.RegimeType),
                         () => RUL_CAPECITABI.Execute(Convert.ToInt32(ent.CapecitabineLastCycle),ent.RegimeType),
                         () => RUL_CABOPLATIN.Execute(Convert.ToInt32(ent.CarboplatinLastCycle),ent.RegimeType),
                         () => RUL_CACYCLOPHO.Execute(Convert.ToInt32(ent.CyclophosphamideLastCycle),ent.RegimeType),
                         () => RUL_CACICLOSPO.Execute(Convert.ToInt32(ent.CiclosporinLastCycle),ent.RegimeType),
                         () => RUL_CACISPLATI.Execute(Convert.ToInt32(ent.CisplatinLastCycle),ent.RegimeType),
                         () => RUL_CACYTARABI.Execute(Convert.ToInt32(ent.CytarabineLastCycle),ent.RegimeType),
                         () => RUL_CACHLORAMB.Execute(Convert.ToInt32(ent.ChlorambucilLastCycle),ent.RegimeType),
                         () => RUL_CADACARBAZ.Execute(Convert.ToInt32(ent.DacarbazineLastCycle),ent.RegimeType),
                         () => RUL_CADOXORUBI.Execute(Convert.ToInt32(ent.DoxorubicinLastCycle),ent.RegimeType),
                         () => RUL_CAETOPOSID.Execute(Convert.ToInt32(ent.EtoposideLastCycle),ent.RegimeType),
                         () => RUL_CAFLUOROUR.Execute(Convert.ToInt32(ent.FluorouracilLastCycle),ent.RegimeType),
                         () => RUL_CAGEMCITAB.Execute(Convert.ToInt32(ent.GemcitabineLastCycle),ent.RegimeType),///=>
                         () => RUL_CAIMATINIB.Execute(Convert.ToInt32(ent.ImatinibLastCycle),ent.RegimeType),
                         () => RUL_CAINTERFER.Execute(Convert.ToInt32(ent.InterferonAlfaNaturalLastCycle),ent.RegimeType),
                         () => RUL_CAMELFALAN.Execute(Convert.ToInt32(ent.MelfalanLastCycle),ent.RegimeType),
                         () => RUL_CAMERCAPTO.Execute(Convert.ToInt32(ent.MercaptopurineLastCycle),ent.RegimeType),
                         () => RUL_CAMETHOTRE.Execute(Convert.ToInt32(ent.MethotrexateLastCycle),ent.RegimeType),
                         () => RUL_CAPACLITAX.Execute(Convert.ToInt32(ent.PaclitaxelLastCycle),ent.RegimeType),
                         () => RUL_CAPEGFILGR.Execute(Convert.ToInt32(ent.PegfilgrastimLastCycle),ent.RegimeType),
                         () => RUL_CAPROCARBA.Execute(Convert.ToInt32(ent.ProcarbazineLastCycle),ent.RegimeType),
                         () => RUL_CARITUXIMA.Execute(Convert.ToInt32(ent.RituximabLastCycle),ent.RegimeType),
                         () => RUL_CATAMOXIFE.Execute(Convert.ToInt32(ent.TamoxifenLastCycle),ent.RegimeType),
                         () => RUL_CATHIOGUAN.Execute(Convert.ToInt32(ent.ThioguanineLastCycle),ent.RegimeType),
                         () => RUL_CATRASTUZU.Execute(Convert.ToInt32(ent.TrastuzumabLastCycle),ent.RegimeType),
                         () => RUL_CAVINBLAST.Execute(Convert.ToInt32(ent.VinblastineLastCycle),ent.RegimeType),
                         () => RUL_CAVINCRIST.Execute(Convert.ToInt32(ent.VincristineLastCycle),ent.RegimeType),
                         () => RUL_CAPREDSONA.Execute(Convert.ToInt32(ent.PrednisoneLastCycle),ent.RegimeType),
                         () => RUL_CAPREDSOLO.Execute(Convert.ToInt32(ent.PrednisoloneLastCycle),ent.RegimeType),
                         () => RUL_CAMETHYLPR.Execute(Convert.ToInt32(ent.MethylprednisoloneLastCycle),ent.RegimeType),
                         () => RUL_CADEXAMETH.Execute(Convert.ToInt32(ent.DexamethasoneLastCycle),ent.RegimeType),
                         () => RUL_CADRUGONEL.Execute(ent.DrugPOSOneLastCycle,Convert.ToInt32(ent.UTLastCycle),ent.RegimeType),
                         () => RUL_CADRUGTWOL.Execute(ent.DrugPOSTwoLastCycle,Convert.ToInt32(ent.UTLastCycle),ent.RegimeType,ent. DrugPOSOneLastCycle),
                         () => RUL_CADRUGPOST.Execute(ent.DrugPOSThreeLastCycle,Convert.ToInt32(ent.UTLastCycle),ent.RegimeType,ent. DrugPOSOneLastCycle,ent. DrugPOSTwoLastCycle),
                         () => RUL_CAINTRATHE.Execute(Convert.ToInt32(ent.IntrathecalChemotherapyLastCycle),Convert.ToInt32(ent.UTLastCycle)),
                         () => RUL_CADATEENDC.Execute(Convert.ToDateTime(ent.EndDateLastCycle),Convert.ToDateTime(ent.InitalDateLastCycle),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CACURRLAST.Execute(Convert.ToInt32(ent.CurrentFeaturesLastCycle),ent.RegimeType),
                         () => RUL_CAREASONEN.Execute(Convert.ToInt32(ent.ReasonEndingLastCycle),ent.RegimeType,Convert.ToInt32(ent.CurrentFeaturesLastCycle)),
                         () => RUL_CASURGER.Execute(Convert.ToInt32(Convert.ToInt32(ent.Surgeries)),ent.RegimeType),
                         () => RUL_CACOSU.Execute(ent.CountSurgeries,ent.RegimeType,Convert.ToInt32(Convert.ToInt32(ent.Surgeries))),
                         () => RUL_CADAFISU.Execute(Convert.ToDateTime(ent.DateFirstSurgery),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DiagnosisDate)),
                         () => RUL_CAIPFISU.Execute(ent.IPSFirstSurgery,ent.RegimeType),
                         () => RUL_CACOFISU.Execute(ent.CodeFirstSurgery,ent.RegimeType),
                         () => RUL_CAUBFISU.Execute(Convert.ToInt32(ent.UbicationFirstSurgery),ent.RegimeType),
                         () => RUL_CADALASU.Execute(Convert.ToDateTime(ent.DateLastSurgery),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToDateTime(ent.CutDate),Convert.ToInt32(Convert.ToInt32(ent.Surgeries)),Convert.ToDateTime(ent.DateFirstSurgery)),
                         () => RUL_CARELASU.Execute(Convert.ToInt32(ent.ReasonLastSurgery),ent.RegimeType,Convert.ToInt32(Convert.ToInt32(ent.Surgeries))),
                         () => RUL_CAIPLASU.Execute(ent.IPSLastSurgery,ent.RegimeType,Convert.ToInt32(ent.Surgeries)),
                         () => RUL_CACOLASU.Execute(ent.CodeLastSurgery,ent.RegimeType,Convert.ToInt32(ent.Surgeries)),
                         () => RUL_CAUBLASU.Execute(Convert.ToInt32(ent.UbicationLastSurgery),ent.RegimeType,Convert.ToInt32(ent.Surgeries)),
                         () => RUL_CAVISTLASU.Execute(Convert.ToInt32(ent.VitalStatusLastSurgery),ent.RegimeType,Convert.ToInt32(ent.Surgeries)),
                         () => RUL_CARADIOTHE.Execute(Convert.ToInt32(ent.Radiotherapy),ent.RegimeType),
                         () => RUL_CACOUNTRAD.Execute(ent.CountRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CADATERADI.Execute(Convert.ToDateTime(ent.DateRadiotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.DiagnosisDate),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAUBIRADIO.Execute(Convert.ToInt32(ent.UbicationRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CARADITYPE.Execute(Convert.ToInt32(ent.RadiotherapyType),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSRADIO.Execute(ent.IPSRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSONERA.Execute(ent.IPSOneRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSTWORA.Execute(ent.IPSTwoRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAENDDATER.Execute(Convert.ToDateTime(ent.EndDateRadiotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateRadiotherapy),Convert.ToDateTime(ent.CutDate),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CACURRENTF.Execute(Convert.ToInt32(ent.CurrentFeaturesRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAREASENDI.Execute(Convert.ToInt32(ent.ReasonEndingRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.CurrentFeaturesRadiotherapy),Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAINITALDA.Execute(Convert.ToDateTime(ent.InitalDateLastRadiotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.EndDateRadiotherapy),Convert.ToDateTime(ent.CutDate),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAUBICRADI.Execute(Convert.ToInt32(ent.UbicationLastRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CALASTRADI.Execute(Convert.ToInt32(ent.LastRadiotherapyType),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSLASTR.Execute(ent.IPSLastRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSONELA.Execute(ent.IPSOneLastRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAIPSTWOLA.Execute(ent.IPSTwoLastRadiotherapy,ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAENDDATEL.Execute(Convert.ToDateTime(ent.EndDateLastRadiotherapy),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.InitalDateLastRadiotherapy),Convert.ToDateTime(ent.CutDate),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CAFEATRADI.Execute(Convert.ToInt32(ent.CurrentFeaturesLastRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy)),
                         () => RUL_CARADIOTLA.Execute(Convert.ToInt32(ent.ReasonEndingLastRadiotherapy),ent.RegimeType,Convert.ToInt32(ent.Radiotherapy),Convert.ToInt32(ent.CurrentFeaturesLastRadiotherapy)),
                         () => RUL_CACELLPROG.Execute(Convert.ToInt32(ent.TransplantProgenitorCells),ent.RegimeType),
                         () => RUL_CATYPETRAN.Execute(Convert.ToInt32(ent.TransplantType),Convert.ToInt32(ent.TransplantProgenitorCells),ent.RegimeType),
                         () => RUL_CAUBITRANS.Execute(Convert.ToInt32(ent.UbicationTransplant),Convert.ToInt32(ent.TransplantProgenitorCells),ent.RegimeType),
                         () => RUL_CADATETRAN.Execute(Convert.ToDateTime(ent.DateTransplant),Convert.ToInt32(ent.TransplantProgenitorCells),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CAIPSTRANS.Execute(ent.IPSTransplant,Convert.ToInt32(ent.TransplantProgenitorCells),ent.RegimeType),
                         () => RUL_CARECOSURG.Execute(Convert.ToInt32(ent.ReconstructiveSurgery),Convert.ToDateTime(ent.DateReconstructiveSurgery),ent.IPSReconstructiveSurgery,ent.RegimeType),
                         () => RUL_CADATERECO.Execute(Convert.ToDateTime(ent.DateReconstructiveSurgery),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CAIPSTEREC.Execute(ent.IPSReconstructiveSurgery,ent.RegimeType),
                         () => RUL_CAPALLICAR.Execute(Convert.ToInt32(ent.PalliativeCare),ent.RegimeType),
                         () => RUL_CASPECPALL.Execute(Convert.ToInt32(ent.ConsultationSpecialistPalliativeCare),ent.RegimeType),
                         () => RUL_CAPALLCARE.Execute(Convert.ToInt32(ent.ConsultationProfessionalPalliativeCare),ent.RegimeType),
                         () => RUL_CAMEDSPECI.Execute(Convert.ToInt32(ent.ConsultationSpecialistOtherSpecialty),ent.RegimeType),
                         () => RUL_CAMEDGENER.Execute(Convert.ToInt32(ent.ConsultationGeneralPractitioner),ent.RegimeType),
                         () => RUL_CAWORKSOCI.Execute(Convert.ToInt32(ent.ConsultationSocialWork),ent.RegimeType),
                         () => RUL_CAOTHERPRO.Execute(Convert.ToInt32(ent.ConsultationOtherProfessional),ent.RegimeType),
                         () => RUL_CADATECOPA.Execute(Convert.ToDateTime(ent.DateConsultationPalliativeCare),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CAIPSPALLI.Execute(ent.IPSPalliativeCare,ent.RegimeType),
                         () => RUL_CAPSYCHIAT.Execute(Convert.ToInt32(ent.Psychiatry),ent.RegimeType),
                         () => RUL_CADATEPSYC.Execute(Convert.ToDateTime(ent.DatePsychiatry),Convert.ToDateTime(ent.BirthDate),ent.RegimeType,Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate)),
                         () => RUL_CAIPSPSYCH.Execute(ent.IPSPsychiatry,ent.RegimeType),
                         () => RUL_CANUTRITIO.Execute(Convert.ToInt32(ent.Nutrition),ent.RegimeType),
                         () => RUL_CAINITDATE.Execute(Convert.ToDateTime(ent.InitialDateNutrition),Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DiagnosisDate),Convert.ToDateTime(ent.CutDate),ent.RegimeType),
                         () => RUL_CAIPSNUTRI.Execute(ent.IPSNutrition,ent.RegimeType),
                         () => RUL_CANUTRISUP.Execute(Convert.ToInt32(ent.NutritionalSupport),ent.RegimeType),
                         () => RUL_CATERAREHA.Execute(Convert.ToInt32(ent.TherapiesRehabilitation),ent.RegimeType),
                         () => RUL_CATREATYPE.Execute(Convert.ToInt32(ent.TreatmentType),ent.RegimeType),
                         () => RUL_CARESUONCO.Execute(Convert.ToInt32(ent.ResultOncological),ent.RegimeType),
                         () => RUL_CAVITALSTA.Execute(Convert.ToInt32(ent.VitalStatus),ent.RegimeType),
                         () => RUL_CADMINOVEL.Execute(Convert.ToInt32(ent.AdministrativeNovelty),ent.RegimeType),
                         () => RUL_CACLINOVEL.Execute(Convert.ToInt32(ent.ClinicalNovelty),ent.RegimeType),
                         () => RUL_CADISCLAIM.Execute(Convert.ToDateTime(ent.DisclaimerDate),ent.RegimeType,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.CutDate)),
                         () => RUL_CADEATHDAT.Execute(Convert.ToDateTime(ent.DeathDate),Convert.ToDateTime(ent.CutDate),Convert.ToDateTime(ent.BirthDate),ent.RegimeType),
                         () => RUL_CADEATHCAU.Execute(Convert.ToInt32(ent.DeathCause),ent.RegimeType),
                         () => RUL_CAIDECODE.Execute(ent.IdentificationCode),
                         () => RUL_CACUTDATE.Execute(Convert.ToDateTime(ent.CutDate))
                     });

                    //Recorre los registros para insertar en la lista de errores 
                    string replaceCharacters = res.GetPropertyValue<string>("Messages").Replace("\r\n", "*").Replace("\n", "*").Replace("\r", "*");
                    string[] dataRules = replaceCharacters.Split('*');

                    foreach (var fields in dataRules)
                    {
                        if (fields != "" && fields != " ")
                        {
                            string[] msj = fields.Split('|');
                            string mensajeItem = $"Fila {index + 1}";
                            listErrors.Add(string.Concat(mensajeItem, "|", $"Columna{msj[0]}", "|", msj[1].Trim()));
                        }
                    }
                    index++;
                }
                //Lo nuevo
                //Inserta a la lista de errores
                if (listErrors.Count > 0)
                {
                    string pathFile = Helper.USR_GenericSaveLog(new Dictionary<string, List<string>>() { ["0247"] = listErrors }, folder);
                    var attach = Helper.USR_WSAttachFileToProcess(pathFile, parameters0247.UserCode, parameters0247.CompanyId.ToString(), parameters0247.CaseNumber, "0247");
                    if (attach.IsError)
                    {
                        this.ResultMessage = "No se pudo asociar el archivo al proceso. " + attach.ErrorMessage;
                        return false;
                    }
                    this.FileName = attach.FileName;
                    this.ResultMessage = "Hubo errores en la validación ";
                    return false;
                }

                //string cutOffDate = DateInit;
                string code = Filename.Substring(9, 6);
                var IniDates = DateTime.Parse(string.Concat(Filename.Substring(0, 4), "/", Filename.Substring(4, 2), "/", Filename.Substring(6, 2)));
                var InitialDates = IniDates.ToString("MM/dd/yyyy");
                var DateInit = InitialDates;
                var DateEnd = "";

                //Guarda la informacion en la Base de datos  // CUTDATE
                var resultSave = Helper.USR_Save0247File(date.ToString("MM/dd/yyyy"), code, parameters0247.OperatorId, parameters0247.CaseNumber, InitialDates, DateEnd, info, _entity);
                if (resultSave.IsError)
                {
                    this.ResultMessage = "Ocurrio un error al guardar el archivo " + resultSave.ErrorMessage;
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<bool> EvaluateCombinations()
        {
            return RuntimeResult<bool>.SetError("No cumple ninguna condición");
        }
        #endregion
    }
    /// <sumary>
    /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
    /// </sumary> 
    public sealed class RUL_PHASESCHEMOTHERAPY
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fases de quimioterapia
        /// </sumary>
        private long PE_PHASESCHEMOTHERAPY;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// Recibe la codificación de la regla
        /// </sumary>
        private string RuleCodification;
        /// <sumary>
        /// Numero de la columna
        /// </sumary>
        private string Column;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool VC_CountPhaseChemotherapy;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia;
        /// <sumary>
        /// m1
        /// </sumary>
        private string VC_Mensaje0001;
        /// <sumary>
        /// m2
        /// </sumary>
        private string VC_Mensaje0002;
        /// <sumary>
        /// m3
        /// </sumary>
        private string VC_Mensaje0003;
        /// <sumary>
        /// m6
        /// </sumary>
        private string VC_Mensaje0006;
        /// <sumary>
        /// m7
        /// </sumary>
        private string VC_Mensaje0007;
        /// <sumary>
        /// m5
        /// </sumary>
        private string VC_Mensaje0005;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_PHASESCHEMOTHERAPY() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        /// <param name="PE_PHASESCHEMOTHERAPY">Fases de quimioterapia</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        /// <param name="RuleCodification">Recibe la codificación de la regla</param>
        /// <param name="Column">Numero de la columna</param>
        public RuntimeResult<string> Execute(long PE_PHASESCHEMOTHERAPY, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia, string RuleCodification, string Column)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PHASESCHEMOTHERAPY = PE_PHASESCHEMOTHERAPY;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.RuleCodification = RuleCodification;
                this.Column = Column;
                this.VC_CountPhaseChemotherapy = FUNC_VC_CountPhaseChemotherapy();
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                this.VC_Mensaje0001 = FUNC_VC_Mensaje0001();
                this.VC_Mensaje0002 = FUNC_VC_Mensaje0002();
                this.VC_Mensaje0003 = FUNC_VC_Mensaje0003();
                this.VC_Mensaje0006 = FUNC_VC_Mensaje0006();
                this.VC_Mensaje0007 = FUNC_VC_Mensaje0007();
                this.VC_Mensaje0005 = FUNC_VC_Mensaje0005();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CountPhaseChemotherapy()
        {
            return PE_CountPhaseChemotherapy.ToString().Length <= 2;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia()
        {
            List<string> listNaneoPlasia = new List<string>
{
 "C835",
 "C910",
 "C920",
 "C924",
 "C925"
 };
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0001()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0001", RuleCodification, Column);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0002()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0002", RuleCodification, Column);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0003()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0003", RuleCodification, Column);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0006()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0006", RuleCodification, Column);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0007()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0007", RuleCodification, Column);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Mensaje0005()
        {
            return Helper.USR_PHASESCHEMOTERAPYMESSAGES("CH0005", RuleCodification, Column);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_PHASESCHEMOTHERAPY == 1 || PE_PHASESCHEMOTHERAPY == 55 || PE_PHASESCHEMOTHERAPY == 2 || PE_PHASESCHEMOTHERAPY == 97 || PE_PHASESCHEMOTHERAPY == 99)) NonValidMessages.Add($"{Column}| Error en variable {RuleCodification}. Valor no valido en “El usuario recibió en este corte la fase de quimioterapia denominada Prefase o Citorreducción inicial” ");
            if (!(VC_CountPhaseChemotherapy == true)) NonValidMessages.Add($"{Column}| Error en variable {RuleCodification}. Valor no valido. En “¿Cuántas fases de quimioterapia recibió el usuario en este corte?” máximo 2 caracteres. Variable 46");
            if (!(PE_CountPhaseChemotherapy == "0" || PE_CountPhaseChemotherapy != "0")) NonValidMessages.Add($"{Column}| Error en variable {RuleCodification}. Valor no valido. En “¿Cuántas fases de quimioterapia recibió el usuario en este corte?” máximo 2 caracteres. Variable 46");
            if (!(VC_NameNeoplasia == true || VC_NameNeoplasia != true)) NonValidMessages.Add($"{Column}| Error en variable {RuleCodification}. Valor no valido. Código CIE10. Variable 17");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"{Column}| Error en variable {RuleCodification}. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 1) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0002}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0002}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0002}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 55) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0002}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0001}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0005}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0005}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0005}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 2) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0005}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0006}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0006}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0006}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0006}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 97) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0007}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy == "0") && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0007}", this.FileName);
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PHASESCHEMOTHERAPY == 99) && (VC_CountPhaseChemotherapy == true) && (PE_CountPhaseChemotherapy != "0") && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0007}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{VC_Mensaje0007}", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de corte
    /// </sumary> 
    public sealed class RUL_CUTDATE1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// parámetro de entrada de plantilla
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V131
        /// </sumary>
        private DateTime PE_DeathDate;
        /// <sumary>
        /// FECHA DE CORTE
        /// </sumary>
        private bool VC_CUTDATE131;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CUTDATE1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        /// <param name="PE_CUTDATE">parámetro de entrada de plantilla</param>
        /// <param name="PE_DeathDate">V131</param>
        public RuntimeResult<string> Execute(DateTime PE_CUTDATE, DateTime PE_DeathDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DeathDate = PE_DeathDate;
                this.VC_CUTDATE131 = FUNC_VC_CUTDATE131();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE131()
        {
            if (PE_CUTDATE >= PE_DeathDate)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CUTDATE > new DateTime(1900, 01, 01))) NonValidMessages.Add($"209| Error en variable 131. Valor no valido en “Fecha de muerte”");
            if (!(VC_CUTDATE131 == true)) NonValidMessages.Add($"209| Error en variable 131. la “Fecha de muerte” es mayor a la fecha de corte.variable 134");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por trabajo social
    /// </sumary> 
    public sealed class RUL_CAWORKSOCI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.5
        /// </sumary>
        private long PE_ConsultationSocialWork;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAWORKSOCI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por trabajo social
        /// </sumary>
        /// <param name="PE_ConsultationSocialWork">variable 114.5</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ConsultationSocialWork, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationSocialWork = PE_ConsultationSocialWork;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSocialWork) || PE_ConsultationSocialWork == 55)) NonValidMessages.Add($"191| Error en variable 114.5. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por trabajo social”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"191| Error en variable 114.5. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSocialWork)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSocialWork)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationSocialWork == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"191| Error en variable 114.5. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Estado vital al finalizar este corte
    /// </sumary> 
    public sealed class RUL_CAVITALSTA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 127
        /// </sumary>
        private long PE_VitalStatus;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVITALSTA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Estado vital al finalizar este corte
        /// </sumary>
        /// <param name="PE_VitalStatus">variable 127</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_VitalStatus, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VitalStatus = PE_VitalStatus;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 99 }).Contains(PE_VitalStatus) || PE_VitalStatus == 55)) NonValidMessages.Add($"205| Error en variable 127. Valor no valido en “Estado vital al finalizar este corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"205| Error en variable 127. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 99 }).Contains(PE_VitalStatus)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 99 }).Contains(PE_VitalStatus)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_VitalStatus == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"205| Error en variable 127. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Estado vital al finalizar la única o última cirugía de este corte
    /// </sumary> 
    public sealed class RUL_CAVISTLASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 85
        /// </sumary>
        private long PE_VitalStatusLastSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// 74. ¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este periodo de reporte?:
        /// </sumary>
        private long PE_Surgeries;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVISTLASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Estado vital al finalizar la única o última cirugía de este corte
        /// </sumary>
        /// <param name="PE_VitalStatusLastSurgery">variable 85</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Surgeries">74. ¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este periodo de reporte?:</param>
        public RuntimeResult<string> Execute(long PE_VitalStatusLastSurgery, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VitalStatusLastSurgery = PE_VitalStatusLastSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_VitalStatusLastSurgery) || PE_VitalStatusLastSurgery == 55 || PE_VitalStatusLastSurgery == 98)) NonValidMessages.Add($"157| Error en variable 85. Valor no valido en “Estado vital al finalizar la única o última cirugía de este corte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"157| Error en variable 85. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"157| Error en variable 85. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este periodo de reporte?:”-variable (74).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_VitalStatusLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_VitalStatusLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_VitalStatusLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_VitalStatusLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VitalStatusLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VitalStatusLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VitalStatusLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"157|Error en variable 85. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_VitalStatusLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"157|Error en variable 85. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_VitalStatusLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VitalStatusLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"157|Error en variable 85. Si registro 98 debe registrar opcion 2 o 3 en variable 74", this.FileName);
            }
            else if ((PE_VitalStatusLastSurgery == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"157|Error en variable 85. Si registro 98 debe registrar opcion 2 o 3 en variable 74", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Vincristina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAVINCRIST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.28
        /// </sumary>
        private long PE_VincristineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVINCRIST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Vincristina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_VincristineLastCycle">variable 66.28</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_VincristineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VincristineLastCycle = PE_VincristineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_VincristineLastCycle) || PE_VincristineLastCycle == 55 || PE_VincristineLastCycle == 98)) NonValidMessages.Add($"134| Error en variable 66.28. Valor no valido en “En este último esquema el usuario recibió Vincristina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"134| Error en variable 66.28. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_VincristineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_VincristineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_VincristineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_VincristineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"134| Error en variable 66.28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_VincristineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Vincristina
    /// </sumary> 
    public sealed class RUL_CAVINCFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_VincristineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVINCFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Vincristina
        /// </sumary>
        /// <param name="PE_VincristineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_VincristineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VincristineFirstCycle = PE_VincristineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_VincristineFirstCycle) || PE_VincristineFirstCycle == 98 || PE_VincristineFirstCycle == 55)) NonValidMessages.Add($"89| Error en variable 53.28. Valor no valido en “En este primer o único esquema el usuario recibió Vincristina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"89| Error en variable 53.28. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_VincristineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_VincristineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VincristineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VincristineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VincristineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"89| Error en variable 53.28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Vinblastina
    /// </sumary> 
    public sealed class RUL_CAVINBLAST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.27
        /// </sumary>
        private long PE_VinblastineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVINBLAST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Vinblastina
        /// </sumary>
        /// <param name="PE_VinblastineLastCycle">variable 66.27</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_VinblastineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VinblastineLastCycle = PE_VinblastineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_VinblastineLastCycle) || PE_VinblastineLastCycle == 55 || PE_VinblastineLastCycle == 98)) NonValidMessages.Add($"133| Error en variable 66.27. Valor no valido en “En este último esquema el usuario recibió Vinblastina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"133| Error en variable 66.27. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_VinblastineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_VinblastineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_VinblastineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_VinblastineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"133| Error en variable 66.27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_VinblastineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Vinblastina 
    /// </sumary> 
    public sealed class RUL_CAVINBLAFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_VinblastineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAVINBLAFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Vinblastina 
        /// </sumary>
        /// <param name="PE_VinblastineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_VinblastineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VinblastineFirstCycle = PE_VinblastineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_VinblastineFirstCycle) || PE_VinblastineFirstCycle == 98 || PE_VinblastineFirstCycle == 55)) NonValidMessages.Add($"88| Error en variable 53.27. Valor no valido en “En este primer o único esquema el usuario recibió Vinblastina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"88| Error en variable 53.27. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_VinblastineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_VinblastineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VinblastineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VinblastineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_VinblastineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"88| Error en variable 53.27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
    /// </sumary> 
    public sealed class RUL_CAUTLASTCY1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// V62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// V63
        /// </sumary>
        private string PE_IPSLastCycle;
        /// <sumary>
        /// V64
        /// </sumary>
        private string PE_CodeIPSOneLastCycle;
        /// <sumary>
        /// V65
        /// </sumary>
        private string PE_CodeIPSTwoLastCycle;
        /// <sumary>
        /// V66
        /// </sumary>
        private string PE_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private long PE_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private long PE_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private long PE_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private long PE_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private long PE_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private long PE_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private long PE_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private long PE_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private long PE_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private long PE_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private long PE_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private long PE_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private long PE_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private long PE_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private long PE_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private long PE_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private long PE_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.19
        /// </sumary>
        private long PE_MethotrexateLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private long PE_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private long PE_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private long PE_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private long PE_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private long PE_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private long PE_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private long PE_VinblastineLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private long PE_VincristineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private long PE_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private long PE_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private long PE_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private long PE_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private string PE_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private long PE_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private long PE_ReasonEndingLastCycle;
        /// <sumary>
        /// 62
        /// </sumary>
        private bool VC_InitalDateLastCycle;
        /// <sumary>
        /// 63
        /// </sumary>
        private bool VC_IPSLastCycle;
        /// <sumary>
        /// 64
        /// </sumary>
        private bool VC_CodeIPSOneLastCycle;
        /// <sumary>
        /// 65
        /// </sumary>
        private bool VC_CodeIPSTwoLastCycle;
        /// <sumary>
        /// 66
        /// </sumary>
        private bool VC_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private bool VC_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private bool VC_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private bool VC_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private bool VC_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private bool VC_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private bool VC_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private bool VC_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private bool VC_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private bool VC_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private bool VC_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private bool VC_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private bool VC_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private bool VC_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private bool VC_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private bool VC_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private bool VC_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private bool VC_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private bool VC_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.19
        /// </sumary>
        private bool VC_MethotrexateLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private bool VC_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private bool VC_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private bool VC_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private bool VC_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private bool VC_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private bool VC_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private bool VC_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private bool VC_VinblastineLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private bool VC_VincristineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private bool VC_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private bool VC_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private bool VC_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private bool VC_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private bool VC_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private bool VC_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private bool VC_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private bool VC_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private bool VC_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private bool VC_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private bool VC_ReasonEndingLastCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUTLASTCY1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        /// <param name="PE_UTLastCycle">Codigo de habilitacion</param>
        /// <param name="PE_InitalDateLastCycle">V62</param>
        /// <param name="PE_IPSLastCycle">V63</param>
        /// <param name="PE_CodeIPSOneLastCycle">V64</param>
        /// <param name="PE_CodeIPSTwoLastCycle">V65</param>
        /// <param name="PE_AntineoplasticDrugsLastCycle">V66</param>
        /// <param name="PE_BleomycinLastCycle">66.1</param>
        /// <param name="PE_BusulfanLastCycle">66.2</param>
        /// <param name="PE_CapecitabineLastCycle">66.3</param>
        /// <param name="PE_CarboplatinLastCycle">66.4</param>
        /// <param name="PE_CyclophosphamideLastCycle">66.5</param>
        /// <param name="PE_CiclosporinLastCycle">66.6</param>
        /// <param name="PE_CisplatinLastCycle">66.7</param>
        /// <param name="PE_CytarabineLastCycle">66.8</param>
        /// <param name="PE_ChlorambucilLastCycle">66.9</param>
        /// <param name="PE_DacarbazineLastCycle">66.10</param>
        /// <param name="PE_DoxorubicinLastCycle">66.11</param>
        /// <param name="PE_EtoposideLastCycle">66.12</param>
        /// <param name="PE_FluorouracilLastCycle">66.13</param>
        /// <param name="PE_GemcitabineLastCycle">66.14</param>
        /// <param name="PE_ImatinibLastCycle">66.15</param>
        /// <param name="PE_InterferonAlfaNaturalLastCycle">66.16</param>
        /// <param name="PE_MelfalanLastCycle">66.17</param>
        /// <param name="PE_MercaptopurineLastCycle">66.18</param>
        /// <param name="PE_MethotrexateLastCycle">66.19</param>
        /// <param name="PE_PaclitaxelLastCycle">66.20</param>
        /// <param name="PE_PegfilgrastimLastCycle">66.21</param>
        /// <param name="PE_ProcarbazineLastCycle">66.22</param>
        /// <param name="PE_RituximabLastCycle">66.23</param>
        /// <param name="PE_TamoxifenLastCycle">66.24</param>
        /// <param name="PE_ThioguanineLastCycle">66.25</param>
        /// <param name="PE_TrastuzumabLastCycle">66.26</param>
        /// <param name="PE_VinblastineLastCycle">66.27</param>
        /// <param name="PE_VincristineLastCycle">66.28</param>
        /// <param name="PE_PrednisoneLastCycle">66.29</param>
        /// <param name="PE_PrednisoloneLastCycle">66.30</param>
        /// <param name="PE_MethylprednisoloneLastCycle">66.31</param>
        /// <param name="PE_DexamethasoneLastCycle">66.32</param>
        /// <param name="PE_DrugPOSOneLastCycle">67</param>
        /// <param name="PE_DrugPOSTwoLastCycle">68</param>
        /// <param name="PE_DrugPOSThreeLastCycle">69</param>
        /// <param name="PE_IntrathecalChemotherapyLastCycle">70</param>
        /// <param name="PE_EndDateLastCycle">71</param>
        /// <param name="PE_CurrentFeaturesLastCycle">72</param>
        /// <param name="PE_ReasonEndingLastCycle">73</param>
        public RuntimeResult<string> Execute(long PE_UTLastCycle, DateTime PE_InitalDateLastCycle, string PE_IPSLastCycle, string PE_CodeIPSOneLastCycle, string PE_CodeIPSTwoLastCycle, string PE_AntineoplasticDrugsLastCycle, long PE_BleomycinLastCycle, long PE_BusulfanLastCycle, long PE_CapecitabineLastCycle, long PE_CarboplatinLastCycle, long PE_CyclophosphamideLastCycle, long PE_CiclosporinLastCycle, long PE_CisplatinLastCycle, long PE_CytarabineLastCycle, long PE_ChlorambucilLastCycle, long PE_DacarbazineLastCycle, long PE_DoxorubicinLastCycle, long PE_EtoposideLastCycle, long PE_FluorouracilLastCycle, long PE_GemcitabineLastCycle, long PE_ImatinibLastCycle, long PE_InterferonAlfaNaturalLastCycle, long PE_MelfalanLastCycle, long PE_MercaptopurineLastCycle, long PE_MethotrexateLastCycle, long PE_PaclitaxelLastCycle, long PE_PegfilgrastimLastCycle, long PE_ProcarbazineLastCycle, long PE_RituximabLastCycle, long PE_TamoxifenLastCycle, long PE_ThioguanineLastCycle, long PE_TrastuzumabLastCycle, long PE_VinblastineLastCycle, long PE_VincristineLastCycle, long PE_PrednisoneLastCycle, long PE_PrednisoloneLastCycle, long PE_MethylprednisoloneLastCycle, long PE_DexamethasoneLastCycle, string PE_DrugPOSOneLastCycle, string PE_DrugPOSTwoLastCycle, string PE_DrugPOSThreeLastCycle, long PE_IntrathecalChemotherapyLastCycle, DateTime PE_EndDateLastCycle, long PE_CurrentFeaturesLastCycle, long PE_ReasonEndingLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_IPSLastCycle = PE_IPSLastCycle;
                this.PE_CodeIPSOneLastCycle = PE_CodeIPSOneLastCycle;
                this.PE_CodeIPSTwoLastCycle = PE_CodeIPSTwoLastCycle;
                this.PE_AntineoplasticDrugsLastCycle = PE_AntineoplasticDrugsLastCycle;
                this.PE_BleomycinLastCycle = PE_BleomycinLastCycle;
                this.PE_BusulfanLastCycle = PE_BusulfanLastCycle;
                this.PE_CapecitabineLastCycle = PE_CapecitabineLastCycle;
                this.PE_CarboplatinLastCycle = PE_CarboplatinLastCycle;
                this.PE_CyclophosphamideLastCycle = PE_CyclophosphamideLastCycle;
                this.PE_CiclosporinLastCycle = PE_CiclosporinLastCycle;
                this.PE_CisplatinLastCycle = PE_CisplatinLastCycle;
                this.PE_CytarabineLastCycle = PE_CytarabineLastCycle;
                this.PE_ChlorambucilLastCycle = PE_ChlorambucilLastCycle;
                this.PE_DacarbazineLastCycle = PE_DacarbazineLastCycle;
                this.PE_DoxorubicinLastCycle = PE_DoxorubicinLastCycle;
                this.PE_EtoposideLastCycle = PE_EtoposideLastCycle;
                this.PE_FluorouracilLastCycle = PE_FluorouracilLastCycle;
                this.PE_GemcitabineLastCycle = PE_GemcitabineLastCycle;
                this.PE_ImatinibLastCycle = PE_ImatinibLastCycle;
                this.PE_InterferonAlfaNaturalLastCycle = PE_InterferonAlfaNaturalLastCycle;
                this.PE_MelfalanLastCycle = PE_MelfalanLastCycle;
                this.PE_MercaptopurineLastCycle = PE_MercaptopurineLastCycle;
                this.PE_MethotrexateLastCycle = PE_MethotrexateLastCycle;
                this.PE_PaclitaxelLastCycle = PE_PaclitaxelLastCycle;
                this.PE_PegfilgrastimLastCycle = PE_PegfilgrastimLastCycle;
                this.PE_ProcarbazineLastCycle = PE_ProcarbazineLastCycle;
                this.PE_RituximabLastCycle = PE_RituximabLastCycle;
                this.PE_TamoxifenLastCycle = PE_TamoxifenLastCycle;
                this.PE_ThioguanineLastCycle = PE_ThioguanineLastCycle;
                this.PE_TrastuzumabLastCycle = PE_TrastuzumabLastCycle;
                this.PE_VinblastineLastCycle = PE_VinblastineLastCycle;
                this.PE_VincristineLastCycle = PE_VincristineLastCycle;
                this.PE_PrednisoneLastCycle = PE_PrednisoneLastCycle;
                this.PE_PrednisoloneLastCycle = PE_PrednisoloneLastCycle;
                this.PE_MethylprednisoloneLastCycle = PE_MethylprednisoloneLastCycle;
                this.PE_DexamethasoneLastCycle = PE_DexamethasoneLastCycle;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.PE_DrugPOSThreeLastCycle = PE_DrugPOSThreeLastCycle;
                this.PE_IntrathecalChemotherapyLastCycle = PE_IntrathecalChemotherapyLastCycle;
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                this.PE_ReasonEndingLastCycle = PE_ReasonEndingLastCycle;
                this.VC_InitalDateLastCycle = FUNC_VC_InitalDateLastCycle();
                this.VC_IPSLastCycle = FUNC_VC_IPSLastCycle();
                this.VC_CodeIPSOneLastCycle = FUNC_VC_CodeIPSOneLastCycle();
                this.VC_CodeIPSTwoLastCycle = FUNC_VC_CodeIPSTwoLastCycle();
                this.VC_AntineoplasticDrugsLastCycle = FUNC_VC_AntineoplasticDrugsLastCycle();
                this.VC_BleomycinLastCycle = FUNC_VC_BleomycinLastCycle();
                this.VC_BusulfanLastCycle = FUNC_VC_BusulfanLastCycle();
                this.VC_CapecitabineLastCycle = FUNC_VC_CapecitabineLastCycle();
                this.VC_CarboplatinLastCycle = FUNC_VC_CarboplatinLastCycle();
                this.VC_CyclophosphamideLastCycle = FUNC_VC_CyclophosphamideLastCycle();
                this.VC_CiclosporinLastCycle = FUNC_VC_CiclosporinLastCycle();
                this.VC_CisplatinLastCycle = FUNC_VC_CisplatinLastCycle();
                this.VC_CytarabineLastCycle = FUNC_VC_CytarabineLastCycle();
                this.VC_ChlorambucilLastCycle = FUNC_VC_ChlorambucilLastCycle();
                this.VC_DacarbazineLastCycle = FUNC_VC_DacarbazineLastCycle();
                this.VC_DoxorubicinLastCycle = FUNC_VC_DoxorubicinLastCycle();
                this.VC_EtoposideLastCycle = FUNC_VC_EtoposideLastCycle();
                this.VC_FluorouracilLastCycle = FUNC_VC_FluorouracilLastCycle();
                this.VC_GemcitabineLastCycle = FUNC_VC_GemcitabineLastCycle();
                this.VC_ImatinibLastCycle = FUNC_VC_ImatinibLastCycle();
                this.VC_InterferonAlfaNaturalLastCycle = FUNC_VC_InterferonAlfaNaturalLastCycle();
                this.VC_MelfalanLastCycle = FUNC_VC_MelfalanLastCycle();
                this.VC_MercaptopurineLastCycle = FUNC_VC_MercaptopurineLastCycle();
                this.VC_MethotrexateLastCycle = FUNC_VC_MethotrexateLastCycle();
                this.VC_PaclitaxelLastCycle = FUNC_VC_PaclitaxelLastCycle();
                this.VC_PegfilgrastimLastCycle = FUNC_VC_PegfilgrastimLastCycle();
                this.VC_ProcarbazineLastCycle = FUNC_VC_ProcarbazineLastCycle();
                this.VC_RituximabLastCycle = FUNC_VC_RituximabLastCycle();
                this.VC_TamoxifenLastCycle = FUNC_VC_TamoxifenLastCycle();
                this.VC_ThioguanineLastCycle = FUNC_VC_ThioguanineLastCycle();
                this.VC_TrastuzumabLastCycle = FUNC_VC_TrastuzumabLastCycle();
                this.VC_VinblastineLastCycle = FUNC_VC_VinblastineLastCycle();
                this.VC_VincristineLastCycle = FUNC_VC_VincristineLastCycle();
                this.VC_PrednisoneLastCycle = FUNC_VC_PrednisoneLastCycle();
                this.VC_PrednisoloneLastCycle = FUNC_VC_PrednisoloneLastCycle();
                this.VC_MethylprednisoloneLastCycle = FUNC_VC_MethylprednisoloneLastCycle();
                this.VC_DexamethasoneLastCycle = FUNC_VC_DexamethasoneLastCycle();
                this.VC_DrugPOSOneLastCycle = FUNC_VC_DrugPOSOneLastCycle();
                this.VC_DrugPOSTwoLastCycle = FUNC_VC_DrugPOSTwoLastCycle();
                this.VC_DrugPOSThreeLastCycle = FUNC_VC_DrugPOSThreeLastCycle();
                this.VC_IntrathecalChemotherapyLastCycle = FUNC_VC_IntrathecalChemotherapyLastCycle();
                this.VC_EndDateLastCycle = FUNC_VC_EndDateLastCycle();
                this.VC_CurrentFeaturesLastCycle = FUNC_VC_CurrentFeaturesLastCycle();
                this.VC_ReasonEndingLastCycle = FUNC_VC_ReasonEndingLastCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InitalDateLastCycle()
        {
            if (PE_InitalDateLastCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IPSLastCycle()
        {
            return (PE_IPSLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSOneLastCycle()
        {
            return (PE_CodeIPSOneLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSTwoLastCycle()
        {
            return (PE_CodeIPSTwoLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AntineoplasticDrugsLastCycle()
        {
            return (PE_AntineoplasticDrugsLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BleomycinLastCycle()
        {
            return (PE_BleomycinLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BusulfanLastCycle()
        {
            return (PE_BusulfanLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CapecitabineLastCycle()
        {
            return (PE_CapecitabineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CarboplatinLastCycle()
        {
            return (PE_CarboplatinLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CyclophosphamideLastCycle()
        {
            return (PE_CyclophosphamideLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CiclosporinLastCycle()
        {
            return (PE_CiclosporinLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CisplatinLastCycle()
        {
            return (PE_CisplatinLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CytarabineLastCycle()
        {
            return (PE_CytarabineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ChlorambucilLastCycle()
        {
            return (PE_ChlorambucilLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DacarbazineLastCycle()
        {
            return (PE_DacarbazineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DoxorubicinLastCycle()
        {
            return (PE_DoxorubicinLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EtoposideLastCycle()
        {
            return (PE_EtoposideLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_FluorouracilLastCycle()
        {
            return (PE_FluorouracilLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_GemcitabineLastCycle()
        {
            return (PE_GemcitabineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ImatinibLastCycle()
        {
            return (PE_ImatinibLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InterferonAlfaNaturalLastCycle()
        {
            return (PE_InterferonAlfaNaturalLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MelfalanLastCycle()
        {
            return (PE_MelfalanLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MercaptopurineLastCycle()
        {
            return (PE_MercaptopurineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethotrexateLastCycle()
        {
            return (PE_MethotrexateLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PaclitaxelLastCycle()
        {
            return (PE_PaclitaxelLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PegfilgrastimLastCycle()
        {
            return (PE_PegfilgrastimLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ProcarbazineLastCycle()
        {
            return (PE_ProcarbazineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_RituximabLastCycle()
        {
            return (PE_RituximabLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TamoxifenLastCycle()
        {
            return (PE_TamoxifenLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ThioguanineLastCycle()
        {
            return (PE_ThioguanineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TrastuzumabLastCycle()
        {
            return (PE_TrastuzumabLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VinblastineLastCycle()
        {
            return (PE_VinblastineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VincristineLastCycle()
        {
            return (PE_VincristineLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoneLastCycle()
        {
            return (PE_PrednisoneLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoloneLastCycle()
        {
            return (PE_PrednisoloneLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethylprednisoloneLastCycle()
        {
            return (PE_MethylprednisoloneLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DexamethasoneLastCycle()
        {
            return (PE_DexamethasoneLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSOneLastCycle()
        {
            return (PE_DrugPOSOneLastCycle == "97") || (PE_DrugPOSOneLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSTwoLastCycle()
        {
            return (PE_DrugPOSTwoLastCycle == "97") || (PE_DrugPOSTwoLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSThreeLastCycle()
        {
            return (PE_DrugPOSThreeLastCycle == "97") || (PE_DrugPOSThreeLastCycle == "98");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IntrathecalChemotherapyLastCycle()
        {
            return (PE_IntrathecalChemotherapyLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateLastCycle()
        {
            if (PE_EndDateLastCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CurrentFeaturesLastCycle()
        {
            return (PE_CurrentFeaturesLastCycle == 98);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ReasonEndingLastCycle()
        {
            return (PE_ReasonEndingLastCycle == 98);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UTLastCycle == 97)) NonValidMessages.Add($"101| Error en variable 61. Valor no valido en “Ubicación temporal del último ciclo de este corte en relación al manejo oncológico”.");
            if (!(VC_InitalDateLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 62 debe ser “1845-01-0198-no aplica”");
            if (!(VC_IPSLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 63 debe ser “98-no aplica”");
            if (!(VC_CodeIPSOneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 64 debe ser “98-no aplica”");
            if (!(VC_CodeIPSTwoLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 65 debe ser “98-no aplica”");
            if (!(VC_AntineoplasticDrugsLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66 debe ser “98-no aplica”");
            if (!(VC_BleomycinLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.1 debe ser “98-no aplica”");
            if (!(VC_BusulfanLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.2 debe ser “98-no aplica”");
            if (!(VC_CapecitabineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.3 debe ser “98-no aplica”");
            if (!(VC_CarboplatinLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.4 debe ser “98-no aplica”");
            if (!(VC_CyclophosphamideLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.5 debe ser “98-no aplica”");
            if (!(VC_CiclosporinLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.6 debe ser “98-no aplica”");
            if (!(VC_CisplatinLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.7 debe ser “98-no aplica”");
            if (!(VC_CytarabineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.8 debe ser “98-no aplica”");
            if (!(VC_ChlorambucilLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.9 debe ser “98-no aplica”");
            if (!(VC_DacarbazineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.10 debe ser “98-no aplica”");
            if (!(VC_DoxorubicinLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.11 debe ser “98-no aplica”");
            if (!(VC_EtoposideLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.12 debe ser “98-no aplica”");
            if (!(VC_FluorouracilLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.13 debe ser “98-no aplica”");
            if (!(VC_GemcitabineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.14 debe ser “98-no aplica”");
            if (!(VC_ImatinibLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.15 debe ser “98-no aplica”");
            if (!(VC_InterferonAlfaNaturalLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.16 debe ser “98-no aplica”");
            if (!(VC_MelfalanLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.17 debe ser “98-no aplica”");
            if (!(VC_MercaptopurineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.18 debe ser “98-no aplica”");
            if (!(VC_MethotrexateLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.19 debe ser “98-no aplica”");
            if (!(VC_PaclitaxelLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.20 debe ser “98-no aplica”");
            if (!(VC_PegfilgrastimLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.21 debe ser “98-no aplica”");
            if (!(VC_ProcarbazineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.22 debe ser “98-no aplica”");
            if (!(VC_RituximabLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.23 debe ser “98-no aplica”");
            if (!(VC_TamoxifenLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.24 debe ser “98-no aplica”");
            if (!(VC_ThioguanineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.25 debe ser “98-no aplica”");
            if (!(VC_TrastuzumabLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.26 debe ser “98-no aplica”");
            if (!(VC_VinblastineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.27 debe ser “98-no aplica”");
            if (!(VC_VincristineLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.28 debe ser “98-no aplica”");
            if (!(VC_PrednisoneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.29 debe ser “98-no aplica”");
            if (!(VC_PrednisoloneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.30 debe ser “98-no aplica”");
            if (!(VC_MethylprednisoloneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.31 debe ser “98-no aplica”");
            if (!(VC_DexamethasoneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 66.32 debe ser “98-no aplica”");
            if (!(VC_DrugPOSOneLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 67 debe ser “98-no aplica”");
            if (!(VC_DrugPOSTwoLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 68 debe ser “98-no aplica”");
            if (!(VC_DrugPOSThreeLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 69 debe ser “98-no aplica”");
            if (!(VC_IntrathecalChemotherapyLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 70 debe ser “98-no aplica”");
            if (!(VC_EndDateLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 71 debe ser “1845-01-01-no aplica”");
            if (!(VC_CurrentFeaturesLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 72 debe ser “98-no aplica”");
            if (!(VC_ReasonEndingLastCycle == true)) NonValidMessages.Add($"101| Error en variable 61. Si registra 97, en la variable 73 debe ser “98-no aplica”");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
    /// </sumary> 
    public sealed class RUL_CAUTLASTCY
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// V63
        /// </sumary>
        private string PE_IPSLastCycle;
        /// <sumary>
        /// V64
        /// </sumary>
        private string PE_CodeIPSOneLastCycle;
        /// <sumary>
        /// V65
        /// </sumary>
        private string PE_CodeIPSTwoLastCycle;
        /// <sumary>
        /// V66
        /// </sumary>
        private string PE_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private long PE_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private long PE_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private long PE_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private long PE_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private long PE_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private long PE_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private long PE_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private long PE_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private long PE_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private long PE_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private long PE_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private long PE_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private long PE_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private long PE_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private long PE_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private long PE_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private long PE_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.19
        /// </sumary>
        private long PE_MethotrexateLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private long PE_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private long PE_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private long PE_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private long PE_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private long PE_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private long PE_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private long PE_VinblastineLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private long PE_VincristineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private long PE_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private long PE_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private long PE_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private long PE_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private string PE_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private long PE_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private long PE_ReasonEndingLastCycle;
        #endregion

        #region Members
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private readonly RUL_CAUTLASTCY1 RUL_CAUTLASTCY1 = new RUL_CAUTLASTCY1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUTLASTCY() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        /// <param name="PE_UTLastCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_InitalDateLastCycle">V62</param>
        /// <param name="PE_IPSLastCycle">V63</param>
        /// <param name="PE_CodeIPSOneLastCycle">V64</param>
        /// <param name="PE_CodeIPSTwoLastCycle">V65</param>
        /// <param name="PE_AntineoplasticDrugsLastCycle">V66</param>
        /// <param name="PE_BleomycinLastCycle">66.1</param>
        /// <param name="PE_BusulfanLastCycle">66.2</param>
        /// <param name="PE_CapecitabineLastCycle">66.3</param>
        /// <param name="PE_CarboplatinLastCycle">66.4</param>
        /// <param name="PE_CyclophosphamideLastCycle">66.5</param>
        /// <param name="PE_CiclosporinLastCycle">66.6</param>
        /// <param name="PE_CisplatinLastCycle">66.7</param>
        /// <param name="PE_CytarabineLastCycle">66.8</param>
        /// <param name="PE_ChlorambucilLastCycle">66.9</param>
        /// <param name="PE_DacarbazineLastCycle">66.10</param>
        /// <param name="PE_DoxorubicinLastCycle">66.11</param>
        /// <param name="PE_EtoposideLastCycle">66.12</param>
        /// <param name="PE_FluorouracilLastCycle">66.13</param>
        /// <param name="PE_GemcitabineLastCycle">66.14</param>
        /// <param name="PE_ImatinibLastCycle">66.15</param>
        /// <param name="PE_InterferonAlfaNaturalLastCycle">66.16</param>
        /// <param name="PE_MelfalanLastCycle">66.17</param>
        /// <param name="PE_MercaptopurineLastCycle">66.18</param>
        /// <param name="PE_MethotrexateLastCycle">66.19</param>
        /// <param name="PE_PaclitaxelLastCycle">66.20</param>
        /// <param name="PE_PegfilgrastimLastCycle">66.21</param>
        /// <param name="PE_ProcarbazineLastCycle">66.22</param>
        /// <param name="PE_RituximabLastCycle">66.23</param>
        /// <param name="PE_TamoxifenLastCycle">66.24</param>
        /// <param name="PE_ThioguanineLastCycle">66.25</param>
        /// <param name="PE_TrastuzumabLastCycle">66.26</param>
        /// <param name="PE_VinblastineLastCycle">66.27</param>
        /// <param name="PE_VincristineLastCycle">66.28</param>
        /// <param name="PE_PrednisoneLastCycle">66.29</param>
        /// <param name="PE_PrednisoloneLastCycle">66.30</param>
        /// <param name="PE_MethylprednisoloneLastCycle">66.31</param>
        /// <param name="PE_DexamethasoneLastCycle">66.32</param>
        /// <param name="PE_DrugPOSOneLastCycle">67</param>
        /// <param name="PE_DrugPOSTwoLastCycle">68</param>
        /// <param name="PE_DrugPOSThreeLastCycle">69</param>
        /// <param name="PE_IntrathecalChemotherapyLastCycle">70</param>
        /// <param name="PE_EndDateLastCycle">71</param>
        /// <param name="PE_CurrentFeaturesLastCycle">72</param>
        /// <param name="PE_ReasonEndingLastCycle">73</param>
        public RuntimeResult<string> Execute(long PE_UTLastCycle, long PE_Chemotherapy, string PE_RegimeType, DateTime PE_InitalDateLastCycle, string PE_IPSLastCycle, string PE_CodeIPSOneLastCycle, string PE_CodeIPSTwoLastCycle, string PE_AntineoplasticDrugsLastCycle, long PE_BleomycinLastCycle, long PE_BusulfanLastCycle, long PE_CapecitabineLastCycle, long PE_CarboplatinLastCycle, long PE_CyclophosphamideLastCycle, long PE_CiclosporinLastCycle, long PE_CisplatinLastCycle, long PE_CytarabineLastCycle, long PE_ChlorambucilLastCycle, long PE_DacarbazineLastCycle, long PE_DoxorubicinLastCycle, long PE_EtoposideLastCycle, long PE_FluorouracilLastCycle, long PE_GemcitabineLastCycle, long PE_ImatinibLastCycle, long PE_InterferonAlfaNaturalLastCycle, long PE_MelfalanLastCycle, long PE_MercaptopurineLastCycle, long PE_MethotrexateLastCycle, long PE_PaclitaxelLastCycle, long PE_PegfilgrastimLastCycle, long PE_ProcarbazineLastCycle, long PE_RituximabLastCycle, long PE_TamoxifenLastCycle, long PE_ThioguanineLastCycle, long PE_TrastuzumabLastCycle, long PE_VinblastineLastCycle, long PE_VincristineLastCycle, long PE_PrednisoneLastCycle, long PE_PrednisoloneLastCycle, long PE_MethylprednisoloneLastCycle, long PE_DexamethasoneLastCycle, string PE_DrugPOSOneLastCycle, string PE_DrugPOSTwoLastCycle, string PE_DrugPOSThreeLastCycle, long PE_IntrathecalChemotherapyLastCycle, DateTime PE_EndDateLastCycle, long PE_CurrentFeaturesLastCycle, long PE_ReasonEndingLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_IPSLastCycle = PE_IPSLastCycle;
                this.PE_CodeIPSOneLastCycle = PE_CodeIPSOneLastCycle;
                this.PE_CodeIPSTwoLastCycle = PE_CodeIPSTwoLastCycle;
                this.PE_AntineoplasticDrugsLastCycle = PE_AntineoplasticDrugsLastCycle;
                this.PE_BleomycinLastCycle = PE_BleomycinLastCycle;
                this.PE_BusulfanLastCycle = PE_BusulfanLastCycle;
                this.PE_CapecitabineLastCycle = PE_CapecitabineLastCycle;
                this.PE_CarboplatinLastCycle = PE_CarboplatinLastCycle;
                this.PE_CyclophosphamideLastCycle = PE_CyclophosphamideLastCycle;
                this.PE_CiclosporinLastCycle = PE_CiclosporinLastCycle;
                this.PE_CisplatinLastCycle = PE_CisplatinLastCycle;
                this.PE_CytarabineLastCycle = PE_CytarabineLastCycle;
                this.PE_ChlorambucilLastCycle = PE_ChlorambucilLastCycle;
                this.PE_DacarbazineLastCycle = PE_DacarbazineLastCycle;
                this.PE_DoxorubicinLastCycle = PE_DoxorubicinLastCycle;
                this.PE_EtoposideLastCycle = PE_EtoposideLastCycle;
                this.PE_FluorouracilLastCycle = PE_FluorouracilLastCycle;
                this.PE_GemcitabineLastCycle = PE_GemcitabineLastCycle;
                this.PE_ImatinibLastCycle = PE_ImatinibLastCycle;
                this.PE_InterferonAlfaNaturalLastCycle = PE_InterferonAlfaNaturalLastCycle;
                this.PE_MelfalanLastCycle = PE_MelfalanLastCycle;
                this.PE_MercaptopurineLastCycle = PE_MercaptopurineLastCycle;
                this.PE_MethotrexateLastCycle = PE_MethotrexateLastCycle;
                this.PE_PaclitaxelLastCycle = PE_PaclitaxelLastCycle;
                this.PE_PegfilgrastimLastCycle = PE_PegfilgrastimLastCycle;
                this.PE_ProcarbazineLastCycle = PE_ProcarbazineLastCycle;
                this.PE_RituximabLastCycle = PE_RituximabLastCycle;
                this.PE_TamoxifenLastCycle = PE_TamoxifenLastCycle;
                this.PE_ThioguanineLastCycle = PE_ThioguanineLastCycle;
                this.PE_TrastuzumabLastCycle = PE_TrastuzumabLastCycle;
                this.PE_VinblastineLastCycle = PE_VinblastineLastCycle;
                this.PE_VincristineLastCycle = PE_VincristineLastCycle;
                this.PE_PrednisoneLastCycle = PE_PrednisoneLastCycle;
                this.PE_PrednisoloneLastCycle = PE_PrednisoloneLastCycle;
                this.PE_MethylprednisoloneLastCycle = PE_MethylprednisoloneLastCycle;
                this.PE_DexamethasoneLastCycle = PE_DexamethasoneLastCycle;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.PE_DrugPOSThreeLastCycle = PE_DrugPOSThreeLastCycle;
                this.PE_IntrathecalChemotherapyLastCycle = PE_IntrathecalChemotherapyLastCycle;
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                this.PE_ReasonEndingLastCycle = PE_ReasonEndingLastCycle;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10 || PE_UTLastCycle == 97 || PE_UTLastCycle == 55 || PE_UTLastCycle == 98)) NonValidMessages.Add($"101| Error en variable 61. Valor no valido en “Ubicación temporal del último ciclo de este corte en relación al manejo oncológico”.");
            if (!(PE_Chemotherapy == 1 || (new long[] { 2, 98 }).Contains(PE_Chemotherapy) || PE_Chemotherapy == 55)) NonValidMessages.Add($"101| Error en variable 61. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"101| Error en variable 61. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 97) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAUTLASTCY1.Execute(
PE_UTLastCycle,
PE_InitalDateLastCycle,
PE_IPSLastCycle,
PE_CodeIPSOneLastCycle,
PE_CodeIPSTwoLastCycle,
PE_AntineoplasticDrugsLastCycle,
PE_BleomycinLastCycle,
PE_BusulfanLastCycle,
PE_CapecitabineLastCycle,
PE_CarboplatinLastCycle,
PE_CyclophosphamideLastCycle,
PE_CiclosporinLastCycle,
PE_CisplatinLastCycle,
PE_CytarabineLastCycle,
PE_ChlorambucilLastCycle,
PE_DacarbazineLastCycle,
PE_DoxorubicinLastCycle,
PE_EtoposideLastCycle,
PE_FluorouracilLastCycle,
PE_GemcitabineLastCycle,
PE_ImatinibLastCycle,
PE_InterferonAlfaNaturalLastCycle,
PE_MelfalanLastCycle,
PE_MercaptopurineLastCycle,
PE_MethotrexateLastCycle,
PE_PaclitaxelLastCycle,
PE_PegfilgrastimLastCycle,
PE_ProcarbazineLastCycle,
PE_RituximabLastCycle,
PE_TamoxifenLastCycle,
PE_ThioguanineLastCycle,
PE_TrastuzumabLastCycle,
PE_VinblastineLastCycle,
PE_VincristineLastCycle,
PE_PrednisoneLastCycle,
PE_PrednisoloneLastCycle,
PE_MethylprednisoloneLastCycle,
PE_DexamethasoneLastCycle,
PE_DrugPOSOneLastCycle,
PE_DrugPOSTwoLastCycle,
PE_DrugPOSThreeLastCycle,
PE_IntrathecalChemotherapyLastCycle,
PE_EndDateLastCycle,
PE_CurrentFeaturesLastCycle,
PE_ReasonEndingLastCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"Ok");
            }
            else if ((PE_UTLastCycle == 97) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAUTLASTCY1.Execute(
PE_UTLastCycle,
PE_InitalDateLastCycle,
PE_IPSLastCycle,
PE_CodeIPSOneLastCycle,
PE_CodeIPSTwoLastCycle,
PE_AntineoplasticDrugsLastCycle,
PE_BleomycinLastCycle,
PE_BusulfanLastCycle,
PE_CapecitabineLastCycle,
PE_CarboplatinLastCycle,
PE_CyclophosphamideLastCycle,
PE_CiclosporinLastCycle,
PE_CisplatinLastCycle,
PE_CytarabineLastCycle,
PE_ChlorambucilLastCycle,
PE_DacarbazineLastCycle,
PE_DoxorubicinLastCycle,
PE_EtoposideLastCycle,
PE_FluorouracilLastCycle,
PE_GemcitabineLastCycle,
PE_ImatinibLastCycle,
PE_InterferonAlfaNaturalLastCycle,
PE_MelfalanLastCycle,
PE_MercaptopurineLastCycle,
PE_MethotrexateLastCycle,
PE_PaclitaxelLastCycle,
PE_PegfilgrastimLastCycle,
PE_ProcarbazineLastCycle,
PE_RituximabLastCycle,
PE_TamoxifenLastCycle,
PE_ThioguanineLastCycle,
PE_TrastuzumabLastCycle,
PE_VinblastineLastCycle,
PE_VincristineLastCycle,
PE_PrednisoneLastCycle,
PE_PrednisoloneLastCycle,
PE_MethylprednisoloneLastCycle,
PE_DexamethasoneLastCycle,
PE_DrugPOSOneLastCycle,
PE_DrugPOSTwoLastCycle,
PE_DrugPOSThreeLastCycle,
PE_IntrathecalChemotherapyLastCycle,
PE_EndDateLastCycle,
PE_CurrentFeaturesLastCycle,
PE_ReasonEndingLastCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"Ok");
            }
            else if ((PE_UTLastCycle == 97) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Si registro 97, debió registrar 1 en la variable 45  y  “no aplica” en las variables 62 a la 73.", this.FileName);
            }
            else if ((PE_UTLastCycle == 97) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Si registro 97, debió registrar 1 en la variable 45  y  “no aplica” en las variables 62 a la 73.", this.FileName);
            }
            else if ((PE_UTLastCycle == 97) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Si registro 97, debió registrar 1 en la variable 45  y  “no aplica” en las variables 62 a la 73.", this.FileName);
            }
            else if ((PE_UTLastCycle == 97) && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Si registro 97, debió registrar 1 en la variable 45  y  “no aplica” en las variables 62 a la 73.", this.FileName);
            }
            else if ((PE_UTLastCycle == 55) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 55) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_UTLastCycle == 55) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 55) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_UTLastCycle == 55) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 55) && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"101| Error en variable 61. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_UTLastCycle == 98) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registro 98 en la variable 61 para ubicacion temporal del ultimo ciclo, debe registrar 2 o 98 en la variable 45", this.FileName);
            }
            else if ((PE_UTLastCycle == 98) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registro 98 en la variable 61 para ubicacion temporal del ultimo ciclo, debe registrar 2 o 98 en la variable 45", this.FileName);
            }
            else if ((PE_UTLastCycle == 98) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 98) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UTLastCycle == 98) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registro 98 en la variable 61 para ubicacion temporal del ultimo ciclo, debe registrar 2 o 98 en la variable 45", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registro 98 en la variable 61 para ubicacion temporal del ultimo ciclo, debe registrar 2 o 98 en la variable 45", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal de esta última cirugía en relación al manejo oncológico, en este corte
    /// </sumary> 
    public sealed class RUL_CAUBLASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 84
        /// </sumary>
        private long PE_UbicationLastSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V74
        /// </sumary>
        private long PE_Surgeries;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBLASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal de esta última cirugía en relación al manejo oncológico, en este corte
        /// </sumary>
        /// <param name="PE_UbicationLastSurgery">variable 84</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Surgeries">V74</param>
        public RuntimeResult<string> Execute(long PE_UbicationLastSurgery, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationLastSurgery = PE_UbicationLastSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4 }).Contains(PE_UbicationLastSurgery) || PE_UbicationLastSurgery == 55 || PE_UbicationLastSurgery == 98)) NonValidMessages.Add($"156| Error en variable 84. Valor no valido en “Ubicación temporal de esta última cirugía en relación al manejo oncológico, en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"156| Error en variable 84. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"156| Error en variable 84. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4 }).Contains(PE_UbicationLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_UbicationLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_UbicationLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_UbicationLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"156| Error en variable 84. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_UbicationLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"156| Error en variable 84. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_UbicationLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"156| Error en variable 84. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((PE_UbicationLastSurgery == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"156| Error en variable 84. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal de este trasplante en relación al manejo oncológico
    /// </sumary> 
    public sealed class RUL_CAUBITRANS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 108
        /// </sumary>
        private long PE_UbicationTransplant;
        /// <sumary>
        /// variable 106
        /// </sumary>
        private long PE_TransplantProgenitorCells;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBITRANS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal de este trasplante en relación al manejo oncológico
        /// </sumary>
        /// <param name="PE_UbicationTransplant">variable 108</param>
        /// <param name="PE_TransplantProgenitorCells">variable 106</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_UbicationTransplant, long PE_TransplantProgenitorCells, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationTransplant = PE_UbicationTransplant;
                this.PE_TransplantProgenitorCells = PE_TransplantProgenitorCells;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UbicationTransplant >= 1 && PE_UbicationTransplant <= 3 || PE_UbicationTransplant == 98 || PE_UbicationTransplant == 55)) NonValidMessages.Add($"180| Error en variable 108. Valor no valido en “Ubicación temporal de este trasplante en relación al manejo oncológico”.");
            if (!(PE_TransplantProgenitorCells == 98 || (new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells))) NonValidMessages.Add($"180| Error en variable 108. Valor no valido en “¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?”-variable (106).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"180| Error en variable 108. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_UbicationTransplant >= 1 && PE_UbicationTransplant <= 3) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant >= 1 && PE_UbicationTransplant <= 3) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant >= 1 && PE_UbicationTransplant <= 3) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant >= 1 && PE_UbicationTransplant <= 3) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant == 98) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant == 98) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant == 98) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"180|Error en variable 108. Si registro 98 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_UbicationTransplant == 98) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"180|Error en variable 108. Si registro 98 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_UbicationTransplant == 55) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationTransplant == 55) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"180| Error en variable 108. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_UbicationTransplant == 55) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"180| Error en variable 108. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal del primer o único esquema de radioterapia en este corte
    /// </sumary> 
    public sealed class RUL_CAUBIRADIO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 89
        /// </sumary>
        private long PE_UbicationRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBIRADIO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal del primer o único esquema de radioterapia en este corte
        /// </sumary>
        /// <param name="PE_UbicationRadiotherapy">variable 89</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_UbicationRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationRadiotherapy = PE_UbicationRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UbicationRadiotherapy >= 1 && PE_UbicationRadiotherapy <= 10 || PE_UbicationRadiotherapy == 55 || PE_UbicationRadiotherapy == 98)) NonValidMessages.Add($"161| Error en variable 89. Valor no valido en “Ubicación temporal del primer o único esquema de radioterapia en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"161| Error en variable 89. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"161| Error en variable 89. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_UbicationRadiotherapy >= 1 && PE_UbicationRadiotherapy <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy >= 1 && PE_UbicationRadiotherapy <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy >= 1 && PE_UbicationRadiotherapy <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy >= 1 && PE_UbicationRadiotherapy <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"161| Error en variable 89. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_UbicationRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"161| Error en variable 89. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_UbicationRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"161|Error en variable 89. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((PE_UbicationRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"161|Error en variable 89. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal del primer ciclo en el periodo en relación al manejo oncológico
    /// </sumary> 
    public sealed class RUL_CAUBIFIRST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 48
        /// </sumary>
        private long PE_UbicationFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBIFIRST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal del primer ciclo en el periodo en relación al manejo oncológico
        /// </sumary>
        /// <param name="PE_UbicationFirstCycle">Variable 48</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_UbicationFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationFirstCycle = PE_UbicationFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UbicationFirstCycle >= 1 && PE_UbicationFirstCycle <= 10 || PE_UbicationFirstCycle == 98 || PE_UbicationFirstCycle == 55)) NonValidMessages.Add($"56| Error en variable 48. Valor no valido en “Ubicación temporal del primer o único esquema de quimioterapia o terapia sistémica en el periodo en relación al manejo oncológico”. ");
            if (!(PE_Chemotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"56| Error en variable 48. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"56| Error en variable 48. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_UbicationFirstCycle >= 1 && PE_UbicationFirstCycle <= 10) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 en la variable 45 debe registrar 98 en la variable 48.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle >= 1 && PE_UbicationFirstCycle <= 10) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 en la variable 45 debe registrar 98 en la variable 48.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle >= 1 && PE_UbicationFirstCycle <= 10) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UbicationFirstCycle >= 1 && PE_UbicationFirstCycle <= 10) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UbicationFirstCycle == 98) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UbicationFirstCycle == 98) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UbicationFirstCycle == 98) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 debe registrar también 98 en la variable 45.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle == 98) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 debe registrar también 98 en la variable 45.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle == 55) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 en la variable 45 debe registrar 98 en la variable 48.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle == 55) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56|Error en variable 48. Si registro 98 en la variable 45 debe registrar 98 en la variable 48.", this.FileName);
            }
            else if ((PE_UbicationFirstCycle == 55) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"56| Error en variable 48. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal del último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAUBICRADI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 98
        /// </sumary>
        private long PE_UbicationLastRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBICRADI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_UbicationLastRadiotherapy">variable 98</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_UbicationLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationLastRadiotherapy = PE_UbicationLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_UbicationLastRadiotherapy >= 1 && PE_UbicationLastRadiotherapy <= 10 || PE_UbicationLastRadiotherapy == 55 || PE_UbicationLastRadiotherapy == 98)) NonValidMessages.Add($"170| Error en variable 98. Valor no valido en “Ubicación temporal del último esquema de cualquier tipo de radioterapia suministrado en el periodo actual en relación al tratamiento oncológico”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "E", "P" }).Contains(PE_RegimeType))) NonValidMessages.Add($"170| Error en variable 98. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"170| Error en variable 98. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_UbicationLastRadiotherapy >= 1 && PE_UbicationLastRadiotherapy <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy >= 1 && PE_UbicationLastRadiotherapy <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy >= 1 && PE_UbicationLastRadiotherapy <= 10) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy >= 1 && PE_UbicationLastRadiotherapy <= 10) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy == 55) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"170| Error en variable 98. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_UbicationLastRadiotherapy == 55) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"170| Error en variable 98. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_UbicationLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_UbicationLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"170|Error en variable 98. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((PE_UbicationLastRadiotherapy == 98) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"170|Error en variable 98. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Ubicación temporal de esta primera cirugía en relación al manejo oncológico
    /// </sumary> 
    public sealed class RUL_CAUBFISU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_UbicationFirstSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAUBFISU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Ubicación temporal de esta primera cirugía en relación al manejo oncológico
        /// </sumary>
        /// <param name="PE_UbicationFirstSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_UbicationFirstSurgery, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_UbicationFirstSurgery = PE_UbicationFirstSurgery;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_UbicationFirstSurgery) || PE_UbicationFirstSurgery == 55)) NonValidMessages.Add($"151| Error en variable 79. Valor no valido en “Ubicación temporal de esta primera cirugía en relación al manejo oncológico”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"151| Error en variable 79. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_UbicationFirstSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_UbicationFirstSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_UbicationFirstSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"151| Error en variable 79. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de trasplante recibido
    /// </sumary> 
    public sealed class RUL_CATYPETRAN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 106
        /// </sumary>
        private long PE_TransplantType;
        /// <sumary>
        /// variable 106
        /// </sumary>
        private long PE_TransplantProgenitorCells;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATYPETRAN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de trasplante recibido
        /// </sumary>
        /// <param name="PE_TransplantType">variable 106</param>
        /// <param name="PE_TransplantProgenitorCells">variable 106</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_TransplantType, long PE_TransplantProgenitorCells, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TransplantType = PE_TransplantType;
                this.PE_TransplantProgenitorCells = PE_TransplantProgenitorCells;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TransplantType >= 1 && PE_TransplantType <= 9 || PE_TransplantType == 98 || PE_TransplantType == 55)) NonValidMessages.Add($"179| Error en variable 107. Valor no valido en “Tipo de trasplante recibido”.");
            if (!((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells) || (new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells))) NonValidMessages.Add($"179| Error en variable 107. Valor no valido en “¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?”-variable (106).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"179| Error en variable 107. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_TransplantType >= 1 && PE_TransplantType <= 9) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType >= 1 && PE_TransplantType <= 9) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType >= 1 && PE_TransplantType <= 9) && ((new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType >= 1 && PE_TransplantType <= 9) && ((new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType == 98) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"179|Error en variable 107. Si registro 98 debe registrar la opción 2 o 98 en variable 106.", this.FileName);
            }
            else if ((PE_TransplantType == 98) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"179|Error en variable 107. Si registro 98 debe registrar la opción 2 o 98 en variable 106.", this.FileName);
            }
            else if ((PE_TransplantType == 98) && ((new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType == 98) && ((new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType == 55) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantType == 55) && ((new long[] { 1, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"179| Error en variable 107. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TransplantType == 55) && ((new long[] { 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"179| Error en variable 107. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
    /// </sumary> 
    public sealed class RUL_CATYPETEST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        private long PE_TypeTest;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATYPETEST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        /// <param name="PE_TypeTest">Código pertenencia étnica</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(long PE_TypeTest, string PE_RegimeType, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TypeTest = PE_TypeTest;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_TypeTest) || PE_TypeTest == 55 || PE_TypeTest == 99)) NonValidMessages.Add($"21| Error en variable 21. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"21| Error en variable 21. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"21|Error en variable 21. La opcion 99 es valida en caso de diagnostico antes de 2015-01-01. Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TypeTest == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TypeTest == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TypeTest == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"21| Error en variable 21. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_TypeTest == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"21| Error en variable 21. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_TypeTest == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TypeTest == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"21|Error en variable 21. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_TypeTest == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"21|Error en variable 21. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de documento 
    /// </sumary> 
    public sealed class RUL_CATYIDENTI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tipo de identificacion 
        /// </sumary>
        private string PE_IdentificationType;
        /// <sumary>
        /// regimen
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Convierte el Tipo de Identificación Mayuscula
        /// </sumary>
        private string VC_identificationType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATYIDENTI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de documento 
        /// </sumary>
        /// <param name="PE_IdentificationType">Tipo de identificacion </param>
        /// <param name="PE_RegimeType">regimen</param>
        public RuntimeResult<string> Execute(string PE_IdentificationType, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IdentificationType = PE_IdentificationType;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_identificationType = FUNC_VC_identificationType();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_identificationType()
        {
            return PE_IdentificationType.ToString().ToUpper();
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "RC", "TI", "CC", "CE", "PA", "CD", "SC", "PE" }).Contains(VC_identificationType) || (new string[] { "MS", "AS" }).Contains(VC_identificationType))) NonValidMessages.Add($"5| Error en variable 5. Valor no valido en Tipo de Identificacion del usuario.");
            if (!((new string[] { "C", "P", "E", "N" }).Contains(PE_RegimeType) || PE_RegimeType == "S")) NonValidMessages.Add($"5| Error en variable 10. Valor no valido en Regimen de afiliacion AL SGSSS.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new string[] { "RC", "TI", "CC", "CE", "PA", "CD", "SC", "PE" }).Contains(VC_identificationType)) && ((new string[] { "C", "P", "E", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new string[] { "RC", "TI", "CC", "CE", "PA", "CD", "SC", "PE" }).Contains(VC_identificationType)) && (PE_RegimeType == "S"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new string[] { "MS", "AS" }).Contains(VC_identificationType)) && ((new string[] { "C", "P", "E", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"5| Error en variable 5. Si selecciona en tipo de identificacion MS o AS debe seleccionar en la Variable 10 S - Regimen Subsidiado", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía
    /// </sumary> 
    public sealed class RUL_CATUDIFFER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía
        /// </sumary>
        private long PE_DegreeTumorDifferentiation;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private long PE_TypeTest;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATUDIFFER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía
        /// </sumary>
        /// <param name="PE_DegreeTumorDifferentiation">Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_RegimeType">V18</param>
        /// <param name="PE_TypeTest">Tipo de estudio con el que se realizó el diagnóstico de cáncer</param>
        public RuntimeResult<string> Execute(long PE_DegreeTumorDifferentiation, DateTime PE_DIAGNOSISDATE, string PE_RegimeType, long PE_TypeTest)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DegreeTumorDifferentiation = PE_DegreeTumorDifferentiation;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_TypeTest = PE_TypeTest;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation) || PE_DegreeTumorDifferentiation == 98 || PE_DegreeTumorDifferentiation == 99 || PE_DegreeTumorDifferentiation == 55)) NonValidMessages.Add($"28| Error en variable 28. Valor no valido en Grado de diferenciacion del tumor solido maligno segun la biopsia o informe de primera cirugia. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"28|Error en variable 28. Valor no valido en Fecha de Diagnostico del Cancer reportado. Variable 18.");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"28|Error en variable 28. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer. Variable 21.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "E", "P" }).Contains(PE_RegimeType))) NonValidMessages.Add($"28| Error en variable 28. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 94, 95 }).Contains(PE_DegreeTumorDifferentiation)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. Si registra 98, debe registrar la opción 7 en “Tipo de estudio con el que se realizó el diagnóstico de cáncer” Variable 21.", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. Si registra 98, debe registrar la opción 7 en “Tipo de estudio con el que se realizó el diagnóstico de cáncer” Variable 21.", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. Si registra 98, debe registrar la opción 7 en “Tipo de estudio con el que se realizó el diagnóstico de cáncer” Variable 21.", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 98) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. Si registra 98, debe registrar la opción 7 en “Tipo de estudio con el que se realizó el diagnóstico de cáncer” Variable 21.", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable (18)", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable (18)", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable (18)", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 99) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28|Error en variable 28. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable (18)", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28| Error en variable 28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28| Error en variable 28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28| Error en variable 28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DegreeTumorDifferentiation == 55) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"28| Error en variable 28. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de tratamiento que está recibiendo el usuario a la fecha de corte
    /// </sumary> 
    public sealed class RUL_CATREATYPE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 125
        /// </sumary>
        private long PE_TreatmentType;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATREATYPE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de tratamiento que está recibiendo el usuario a la fecha de corte
        /// </sumary>
        /// <param name="PE_TreatmentType">variable 125</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_TreatmentType, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TreatmentType = PE_TreatmentType;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98 }).Contains(PE_TreatmentType) || PE_TreatmentType == 55)) NonValidMessages.Add($"203| Error en variable 125. Valor no valido en “Tipo de tratamiento que está recibiendo el usuario a la fecha de corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"203| Error en variable 125. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98 }).Contains(PE_TreatmentType)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 98 }).Contains(PE_TreatmentType)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TreatmentType == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"203| Error en variable 125. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Trastuzumab
    /// </sumary> 
    public sealed class RUL_CATRASTUZU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.26
        /// </sumary>
        private long PE_TrastuzumabLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATRASTUZU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Trastuzumab
        /// </sumary>
        /// <param name="PE_TrastuzumabLastCycle">variable 66.26</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_TrastuzumabLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TrastuzumabLastCycle = PE_TrastuzumabLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabLastCycle) || PE_TrastuzumabLastCycle == 55 || PE_TrastuzumabLastCycle == 98)) NonValidMessages.Add($"132| Error en variable 66.26. Valor no valido en “En este último esquema el usuario recibió Trastuzumab”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"132| Error en variable 66.26. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TrastuzumabLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TrastuzumabLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"132| Error en variable 66.26. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_TrastuzumabLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Trastuzumab: (Trastuzumab es un principio activo diferente al Trastuzumab Emtansine; este último lo debe reportar en las variables 54, 55 o 56)
    /// </sumary> 
    public sealed class RUL_CATRASTUFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_TrastuzumabFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATRASTUFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Trastuzumab: (Trastuzumab es un principio activo diferente al Trastuzumab Emtansine; este último lo debe reportar en las variables 54, 55 o 56)
        /// </sumary>
        /// <param name="PE_TrastuzumabFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_TrastuzumabFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TrastuzumabFirstCycle = PE_TrastuzumabFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabFirstCycle) || PE_TrastuzumabFirstCycle == 98 || PE_TrastuzumabFirstCycle == 55)) NonValidMessages.Add($"87| Error en variable 53.26. Valor no valido en “En este primer o único esquema el usuario recibió Trastuzumab: (Trastuzumab es un principio activo diferente al Trastuzumab Emtansine; este último lo debe reportar en las variables 54, 55 o 56)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"87| Error en variable 53.26. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_TrastuzumabFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TrastuzumabFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TrastuzumabFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TrastuzumabFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"87| Error en variable 53.26. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Tioguanina
    /// </sumary> 
    public sealed class RUL_CATHIOIRST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_ThioguanineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATHIOIRST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Tioguanina
        /// </sumary>
        /// <param name="PE_ThioguanineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ThioguanineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ThioguanineFirstCycle = PE_ThioguanineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineFirstCycle) || PE_ThioguanineFirstCycle == 98 || PE_ThioguanineFirstCycle == 55)) NonValidMessages.Add($"86| Error en variable 53.25. Valor no valido en “En este primer o único esquema el usuario recibió Tioguanina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"86| Error en variable 53.25. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ThioguanineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ThioguanineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ThioguanineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"86| Error en variable 53.25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Tioguanina
    /// </sumary> 
    public sealed class RUL_CATHIOGUAN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.25
        /// </sumary>
        private long PE_ThioguanineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATHIOGUAN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Tioguanina
        /// </sumary>
        /// <param name="PE_ThioguanineLastCycle">variable 66.25</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ThioguanineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ThioguanineLastCycle = PE_ThioguanineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineLastCycle) || PE_ThioguanineLastCycle == 55 || PE_ThioguanineLastCycle == 98)) NonValidMessages.Add($"131| Error en variable 66.25. Valor no valido en “En este último esquema el usuario recibió Tioguanina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"131| Error en variable 66.25. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ThioguanineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ThioguanineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ThioguanineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"131| Error en variable 66.25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ThioguanineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento
    /// </sumary> 
    public sealed class RUL_CATESTBREA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?
        /// </sumary>
        private long PE_TestBreastCancer;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// v18
        /// </sumary>
        private DateTime DIAGNOSISDATE;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATESTBREA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento
        /// </sumary>
        /// <param name="PE_TestBreastCancer">Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="DIAGNOSISDATE">v18</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_TestBreastCancer, string PE_RegimeType, DateTime DIAGNOSISDATE, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TestBreastCancer = PE_TestBreastCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.DIAGNOSISDATE = DIAGNOSISDATE;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_TestBreastCancer) || PE_TestBreastCancer == 55 || PE_TestBreastCancer == 97 || PE_TestBreastCancer == 98 || PE_TestBreastCancer == 99)) NonValidMessages.Add($"31| Error en variable 31. Valor no valido en Para cancer de mama, se le realizo a este usuario la prueba HER2 (llamado tambien receptor 2 del factor de crecimiento epidermico humano, tambien llamado erb-B2) antes del inicio del tratamiento?. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"31| Error en variable 31. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(DIAGNOSISDATE <= new DateTime(2015, 01, 01) || DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"31|Error en variable 31. La fecha de Diagnostic-Variable 18.");
            if (!((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia) || !(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia)) || (new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia) || !(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia)))) NonValidMessages.Add($"31| Error en variable 31. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 97) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 31| Error en variable 31. Valor no valido en “No es cancer de mama sin itu”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31| Error en variable 31. Valor no valido en “es cancer de mama”. -variable (17).", this.FileName);
            }
            else if ((PE_TestBreastCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (!(new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "D050", "D051", "D057", "D059" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (!(new string[] { "D050", "D051", "D057", "D059" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_TestBreastCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"31|Error en variable 31. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer colorrectal, estadificación de Dukes
    /// </sumary> 
    public sealed class RUL_CATESCOLOR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer colorrectal, estadificación de Dukes
        /// </sumary>
        private long PE_TestColorectalCancer;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATESCOLOR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer colorrectal, estadificación de Dukes
        /// </sumary>
        /// <param name="PE_TestColorectalCancer">Para cáncer colorrectal, estadificación de Dukes</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_TestColorectalCancer, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TestColorectalCancer = PE_TestColorectalCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4 }).Contains(PE_TestColorectalCancer) || PE_TestColorectalCancer == 55 || PE_TestColorectalCancer == 98 || PE_TestColorectalCancer == 99)) NonValidMessages.Add($"34| Error en variable 34. Valor no valido en Para cancer colorrectal, estadificacion de Dukes. ");
            if (!((new string[] { "E", "P", "N" }).Contains(PE_RegimeType) || (new string[] { "C", "S" }).Contains(PE_RegimeType))) NonValidMessages.Add($"34| Error en variable 34. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia) || !(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia)))) NonValidMessages.Add($"34|Error en variable 34.  Error en Nombre de la neoplasia (cancer o tumor) maligna reportada-variable 17.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4 }).Contains(PE_TestColorectalCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_TestColorectalCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado no es cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_TestColorectalCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_TestColorectalCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado no es cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34| Error en variable 34. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34| Error en variable 34. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TestColorectalCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado es diferente a cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado es cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TestColorectalCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado es cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TestColorectalCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TestColorectalCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (!(new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }.Contains(PE_NameNeoplasia))))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado es diferente a cáncer colorrectal. -variable 17.", this.FileName);
            }
            else if ((PE_TestColorectalCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218", "C19X", "D010", "D011", "D012", "D013" }).Contains(PE_NameNeoplasia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"34|Error en variable 34.  El cáncer reportado es diferente a cáncer colorrectal. -variable 17.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿El usuario ha recibido terapias complementarias para su rehabilitación?
    /// </sumary> 
    public sealed class RUL_CATERAREHA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 124
        /// </sumary>
        private long PE_TherapiesRehabilitation;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATERAREHA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿El usuario ha recibido terapias complementarias para su rehabilitación?
        /// </sumary>
        /// <param name="PE_TherapiesRehabilitation">variable 124</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_TherapiesRehabilitation, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TherapiesRehabilitation = PE_TherapiesRehabilitation;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 98 }).Contains(PE_TherapiesRehabilitation) || PE_TherapiesRehabilitation == 55)) NonValidMessages.Add($"202| Error en variable 124. Valor no valido en “¿El usuario ha recibido terapias complementarias para su rehabilitación?”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"202| Error en variable 124. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 98 }).Contains(PE_TherapiesRehabilitation)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 98 }).Contains(PE_TherapiesRehabilitation)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TherapiesRehabilitation == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"202| Error en variable 124. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Tamoxifeno (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CATAMOXIFE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.24
        /// </sumary>
        private long PE_TamoxifenLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATAMOXIFE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Tamoxifeno (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_TamoxifenLastCycle">variable 66.24</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_TamoxifenLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TamoxifenLastCycle = PE_TamoxifenLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenLastCycle) || PE_TamoxifenLastCycle == 55 || PE_TamoxifenLastCycle == 98)) NonValidMessages.Add($"130| Error en variable 66.24. Valor no valido en “En este último esquema el usuario recibió Tamoxifeno”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"130| Error en variable 66.24. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TamoxifenLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TamoxifenLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"130| Error en variable 66.24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_TamoxifenLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Tamoxifeno
    /// </sumary> 
    public sealed class RUL_CATAMOXFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_TamoxifenFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CATAMOXFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Tamoxifeno
        /// </sumary>
        /// <param name="PE_TamoxifenFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_TamoxifenFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TamoxifenFirstCycle = PE_TamoxifenFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenFirstCycle) || PE_TamoxifenFirstCycle == 98 || PE_TamoxifenFirstCycle == 55)) NonValidMessages.Add($"85| Error en variable 53.24. Valor no valido en “En este primer o único esquema el usuario recibió Tamoxifeno”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"85| Error en variable 53.24. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_TamoxifenFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TamoxifenFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TamoxifenFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TamoxifenFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"85| Error en variable 53.24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?
    /// </sumary> 
    public sealed class RUL_CASURGER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 74
        /// </sumary>
        private long PE_Surgeries;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASURGER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?
        /// </sumary>
        /// <param name="PE_Surgeries">variable 74</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_Surgeries, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Surgeries = PE_Surgeries;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_Surgeries) || PE_Surgeries == 55)) NonValidMessages.Add($"146| Error en variable 74. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este periodo de reporte?:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"146| Error en variable 74. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_Surgeries)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_Surgeries)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Surgeries == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"146| Error en variable 74. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de próstata, valor de clasificación de la escala Gleason en el momento del diagnóstico
    /// </sumary> 
    public sealed class RUL_CASTAPROST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 37
        /// </sumary>
        private long PE_StagingProstateCancer;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASTAPROST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de próstata, valor de clasificación de la escala Gleason en el momento del diagnóstico
        /// </sumary>
        /// <param name="PE_StagingProstateCancer">Variable 37</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_StagingProstateCancer, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_StagingProstateCancer = PE_StagingProstateCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia()
        {
            List<string> listNaneoPlasia = new List<string>
{
    "C61X"};
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_StagingProstateCancer) || PE_StagingProstateCancer == 55 || PE_StagingProstateCancer == 98 || PE_StagingProstateCancer == 99)) NonValidMessages.Add($"37| Error en variable 37. Valor no valido en Para cancer de prostata, valor de clasificacion de la escala Gleason en el momento del diagnostico. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"37| Error en variable 37. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_NameNeoplasia == true || VC_NameNeoplasia != true)) NonValidMessages.Add($"37| Error en variable 37. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_StagingProstateCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if (((new long[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_StagingProstateCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Debe ser cancer de prostata. Revisar Variable 17. ", this.FileName);
            }
            else if (((new long[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_StagingProstateCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if (((new long[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_StagingProstateCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Debe ser cáncer de próstata. Revisar Variable 17. ", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_StagingProstateCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Debe ser cancer de prostata. Revisar Variable 17. ", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37 Si selecciona 98 no debe ser cáncer de próstata. Revisar Variable 17. ", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_StagingProstateCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37 Si selecciona 98 no debe ser cáncer de próstata. Revisar Variable 17. ", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_StagingProstateCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_StagingProstateCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Si selecciona 99 debe ser cancer de prostata. Revisar Variable 17. ", this.FileName);
            }
            else if ((PE_StagingProstateCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"37| Error en variable 37. Si selecciona 99 debe ser cáncer de próstata. Revisar Variable 17.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista en cuidado paliativo
    /// </sumary> 
    public sealed class RUL_CASPECPALL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.1
        /// </sumary>
        private long PE_ConsultationSpecialistPalliativeCare;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASPECPALL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista en cuidado paliativo
        /// </sumary>
        /// <param name="PE_ConsultationSpecialistPalliativeCare">variable 114.1</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ConsultationSpecialistPalliativeCare, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationSpecialistPalliativeCare = PE_ConsultationSpecialistPalliativeCare;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistPalliativeCare) || PE_ConsultationSpecialistPalliativeCare == 55)) NonValidMessages.Add($"187| Error en variable 114.1. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista en cuidado paliativo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"187| Error en variable 114.1. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistPalliativeCare)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistPalliativeCare)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationSpecialistPalliativeCare == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"187| Error en variable 114.1. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.
    /// </sumary> 
    public sealed class RUL_CASOLTUMST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.
        /// </sumary>
        private long PE_SolidTumorStaging;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// VARIABLE 17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// cie10
        /// </sumary>
        private bool VC_cie10;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASOLTUMST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.
        /// </sumary>
        /// <param name="PE_SolidTumorStaging">Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_NameNeoplasia">VARIABLE 17</param>
        public RuntimeResult<string> Execute(long PE_SolidTumorStaging, string PE_RegimeType, DateTime PE_DIAGNOSISDATE, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SolidTumorStaging = PE_SolidTumorStaging;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.VC_cie10 = FUNC_VC_cie10();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_cie10()
        {
            if ((new long[] { 0, 2, 5, 11, 14, 17, 18, 19, 20 }).Contains(PE_SolidTumorStaging)
&& (new string[] { "C500", "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509", "C160", "C161", "C162", "C163", "C164", "C165", "C166", "C168", "C169" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }
            if ((new long[] { 0, 1, 11, 14, 16, 20, 15, 17, 18, 19, 21, 22 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C61X" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 0, 2, 5, 11, 14, 17, 18, 20, 3, 4, 19, 21, 22 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C300", "C301", "C33X", "C340", "C341", "C342", "C343", "C348", "C349" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 0, 2, 5, 11, 14, 15, 16, 17, 18, 19, 20 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C430", "C431", "C432", "C433", "C434", "C435", "C436", "C437", "C438", "C439", "C440", "C441", "C442", "C443", "C444", "C445", "C446", "C447", "C448", "C449" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 0, 1, 11, 14, 15, 17, 18, 19, 21, 22 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C180", "C181", "C182", "C183", "C184", "C185", "C186", "C187", "C188", "C189", "C20X", "C210", "C211", "C212", "C218" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 0, 1, 10, 17, 18, 20 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C210", "C211", "C212", "C218" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22 }).Contains(PE_SolidTumorStaging)
            && (new string[] { "C530", "C531", "C538", "C539" }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            if ((new long[] { 8, 9, 23, 24, 25 }).Contains(PE_SolidTumorStaging)
            && !(new string[] { "C160","C161","C162","C163","C164","C165","C166","C168","C169","C180","C181","C182","C183","C184","C185","C186","C187","C188","C189","C20X"
,"C210","C211","C212","C218","C300","C301","C33X","C340","C341","C342","C343","C348","C349","C430","C431","C432","C433","C434","C435","C436","C437","C438"
,"C439","C440","C441","C442","C443","C444","C445","C446","C447","C448","C449","C500","C501","C502","C503","C504","C505","C506","C508","C509","C530","C531","C538","C539","C61X"  }).Contains(PE_NameNeoplasia))
            {
                return true;
            }

            return false;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25 || PE_SolidTumorStaging == 55 || PE_SolidTumorStaging == 93 || PE_SolidTumorStaging == 98 || PE_SolidTumorStaging == 99)) NonValidMessages.Add($"29| Error en variable 29. Valor no valido en Si es tumor solido, cual fue la primera estadificacion basada en TNM, FIGO, u otras compatibles con esta numeracion segun tumor.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"29| Error en variable 29. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01) || PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"29| Error en variable 29. Valor no valido en Fecha de Diagnostico del Cancer reportado. Variable 18.");
            if (!(VC_cie10 == true || VC_cie10 != true)) NonValidMessages.Add($"29| Error en variable 17. Valor no valido en Nombre de la neoplasia. Variable 17.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging >= 0 && PE_SolidTumorStaging <= 25) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. la estadificacion por los agrupadores de canceres priorizados no concuerda con la Resolucion, verificar variable 29 “Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.” y variable 17 ' Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario) '", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29| Error en variable 29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 93 es válida cuando “no tiene información de estadificación en historia clínica debido a que el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_cie10 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_SolidTumorStaging == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_cie10 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"29|Error en variable 29. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Prednisolona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
    /// </sumary> 
    public sealed class RUL_CASOLONEFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_PrednisoloneFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASOLONEFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Prednisolona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
        /// </sumary>
        /// <param name="PE_PrednisoloneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_PrednisoloneFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrednisoloneFirstCycle = PE_PrednisoloneFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneFirstCycle) || PE_PrednisoloneFirstCycle == 98 || PE_PrednisoloneFirstCycle == 55)) NonValidMessages.Add($"91| Error en variable 53.30. Valor no valido en “En este primer o único esquema el usuario recibió Prednisolona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"91| Error en variable 53.30. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoloneFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoloneFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoloneFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"91| Error en variable 53.30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Genero de la persona
    /// </sumary> 
    public sealed class RUL_CASEXO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Genero de la persona
        /// </sumary>
        private string PE_IdSex;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASEXO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Genero de la persona
        /// </sumary>
        /// <param name="PE_IdSex">Genero de la persona</param>
        public RuntimeResult<string> Execute(string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IdSex = PE_IdSex;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "M", "F" }).Contains(PE_IdSex) || !(new string[] { "M", "F" }.Contains(PE_IdSex)))) NonValidMessages.Add($"8| Error en variable 8. Valor no valido en Genero. Debe ser M (Masculino) o F (Femenino)");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new string[] { "M", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"8| Error en variable 8. Valor no valido en “Género”.Debe ser M o F.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Validad Longitud Segundo Apellido
    /// </sumary> 
    public sealed class RUL_CASELASNAM
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        private string PE_SecondLastName;
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        private bool VC_SecondLastName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASELASNAM() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Validad Longitud Segundo Apellido
        /// </sumary>
        /// <param name="PE_SecondLastName">Segundo Nombre</param>
        public RuntimeResult<string> Execute(string PE_SecondLastName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SecondLastName = PE_SecondLastName;
                this.VC_SecondLastName = FUNC_VC_SecondLastName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_SecondLastName()
        {
            int Length = PE_SecondLastName.ToString().Length;
            return (Length >= 1) && (Length <= 30);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_SecondLastName == PE_SecondLastName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_SecondLastName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_SecondLastName == true)) NonValidMessages.Add($"4|Error en variable 4. Valor no valido en Segundo apellido del usuario. maximo 20 caracteres o No debe venir vacio.");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"4|Error en variable 4. Valor no valido en Segundo apellido del usuario. Debe ser en mayuscula.");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"4|Error en variable 4. Valor no valido en Segundo apellido del usuario. No debe tener caracteres especiales.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// Validad Longitud Segundo Nombre
    /// </sumary> 
    public sealed class RUL_CASECNAME
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        private string CASECNAME;
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        private bool VC_SecondLastName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// CASECNAME Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CASECNAME() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        /// <param name="CASECNAME">Segundo Nombre</param>
        public RuntimeResult<string> Execute(string CASECNAME)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.CASECNAME = CASECNAME;
                this.VC_SecondLastName = FUNC_VC_SecondLastName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_SecondLastName()
        {
            int Length = CASECNAME.ToString().Length;
            return (Length >= 1) && (Length <= 30);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (CASECNAME == CASECNAME.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(CASECNAME);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_SecondLastName == true)) NonValidMessages.Add($"2| Error en variable 2. Valor no valido en Segundo nombre del usuario Debe ser menor a 30 caracteres o No debe venir vacio.");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"2| Error en variable 2. Valor no valido en Segundo nombre del usuario Debe ser en mayusculas");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"2| Error en variable 2. Valor no valido en Segundo nombre del usuario No debe contener caracteres especiales. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Rituximab (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CARITUXIMA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.23
        /// </sumary>
        private long PE_RituximabLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARITUXIMA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Rituximab (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_RituximabLastCycle">variable 66.23</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_RituximabLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_RituximabLastCycle = PE_RituximabLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_RituximabLastCycle) || PE_RituximabLastCycle == 55 || PE_RituximabLastCycle == 98)) NonValidMessages.Add($"129| Error en variable 66.23. Valor no valido en “En este último esquema el usuario recibió Rituximab”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"129| Error en variable 66.23. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_RituximabLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_RituximabLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RituximabLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RituximabLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"129| Error en variable 66.23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_RituximabLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Rituximab 
    /// </sumary> 
    public sealed class RUL_CARITUXFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_RituximabFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARITUXFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Rituximab 
        /// </sumary>
        /// <param name="PE_RituximabFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_RituximabFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_RituximabFirstCycle = PE_RituximabFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_RituximabFirstCycle) || PE_RituximabFirstCycle == 98 || PE_RituximabFirstCycle == 55)) NonValidMessages.Add($"84| Error en variable 53.23. Valor no valido en “En este primer o único esquema el usuario recibió Rituximab”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"84| Error en variable 53.23. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_RituximabFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_RituximabFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_RituximabFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_RituximabFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_RituximabFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"84| Error en variable 53.23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado final del manejo oncológico en este corte
    /// </sumary> 
    public sealed class RUL_CARESUONCO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 126
        /// </sumary>
        private long PE_ResultOncological;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARESUONCO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado final del manejo oncológico en este corte
        /// </sumary>
        /// <param name="PE_ResultOncological">variable 126</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ResultOncological, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultOncological = PE_ResultOncological;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 97, 98, 99 }).Contains(PE_ResultOncological) || PE_ResultOncological == 55)) NonValidMessages.Add($"204| Error en variable 126. Valor no valido en “Resultado final del manejo oncológico en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"204| Error en variable 126. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 97, 98, 99 }).Contains(PE_ResultOncological)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 97, 98, 99 }).Contains(PE_ResultOncological)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultOncological == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"204| Error en variable 126. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de mama, resultado de la primera o única prueba HER2
    /// </sumary> 
    public sealed class RUL_CARESTESBR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer de mama, resultado de la primera o única prueba HER2
        /// </sumary>
        private long PE_ResultTestBreastCancer;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// variable 31
        /// </sumary>
        private long PE_TestBreastCancer;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia1;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia2;
        /// <sumary>
        /// COMPARACIÓN CON 2015
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARESTESBR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de mama, resultado de la primera o única prueba HER2
        /// </sumary>
        /// <param name="PE_ResultTestBreastCancer">Para cáncer de mama, resultado de la primera o única prueba HER2</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_TestBreastCancer">variable 31</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_ResultTestBreastCancer, string PE_NameNeoplasia, DateTime PE_DIAGNOSISDATE, long PE_TestBreastCancer, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultTestBreastCancer = PE_ResultTestBreastCancer;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_TestBreastCancer = PE_TestBreastCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_NameNeoplasia1 = FUNC_VC_NameNeoplasia1();
                this.VC_NameNeoplasia2 = FUNC_VC_NameNeoplasia2();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia1()
        {
            List<string> listNaneoPlasia = new List<string>
{
    "D050", "D051", "D057", "D059"};

            return listNaneoPlasia.Contains(PE_NameNeoplasia);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia2()
        {
            List<string> listNaneoPlasia = new List<string>
{
"C500" , "C501", "C502", "C503", "C504", "C505", "C506", "C508", "C509" };
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4 || PE_ResultTestBreastCancer == 55 || PE_ResultTestBreastCancer == 97 || PE_ResultTestBreastCancer == 98 || PE_ResultTestBreastCancer == 99)) NonValidMessages.Add($"33| Error en variable 33. Valor no valido en Para cancer de mama, resultado de la primera o unica prueba HER2. ");
            if (!(VC_NameNeoplasia1 == true || VC_NameNeoplasia1 != true)) NonValidMessages.Add($"33| Error en variable 33. Valor no valido en Para cancer de mama, resultado de la primera o unica prueba HER2. ");
            if (!(VC_NameNeoplasia2 == true || VC_NameNeoplasia2 != true)) NonValidMessages.Add($"33| Error en variable 33. Valor no valido en Para cancer de mama, resultado de la primera o unica prueba HER2. ");
            if (!(PE_TestBreastCancer == 2 || (new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer))) NonValidMessages.Add($"33|Error en variable 33. Valor no valido en Para cancer de mama, se le realizo a este usuario la prueba HER2 antes del inicio del tratamiento?. Variable 31.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"33| Error en variable 33. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_DIAGNOSISDATE != true || VC_DIAGNOSISDATE == true)) NonValidMessages.Add($"33|Error en variable 33. Valor no valido en variable 18  Fecha de Diagnostico del Cancer reportado  ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer >= 1 && PE_ResultTestBreastCancer <= 4) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Para cáncer de mama, resultado de la primera o única prueba HER2” no es cancer de mama, validar variable 17 'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)' '.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| 33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 55) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 97) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. Si registro la opción 97 debe ser cáncer de mama in situ. revisar Variable 17  'Código CIE - 10 de la neoplasia (cáncer o tumor) maligna reportada (Primario)'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33| Error en variable 33. registro la opción 98 y marco una opción diferente de 2 en Variable 31 'Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erb-B2) antes del inicio del tratamiento?'.", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 98) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_TestBreastCancer == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultTestBreastCancer == 99) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"33|Error en variable 33. La opción 99 es válida cuando registra fecha menor a 2015-01-01 en Variable 18 'Fecha de Diagnóstico del Cancer reportado'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo de haber realizado la última intervención quirúrgica de este corte
    /// </sumary> 
    public sealed class RUL_CARELASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 81
        /// </sumary>
        private long PE_ReasonLastSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V74
        /// </sumary>
        private long PE_Surgeries;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARELASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo de haber realizado la última intervención quirúrgica de este corte
        /// </sumary>
        /// <param name="PE_ReasonLastSurgery">variable 81</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Surgeries">V74</param>
        public RuntimeResult<string> Execute(long PE_ReasonLastSurgery, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReasonLastSurgery = PE_ReasonLastSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 5, 6 }).Contains(PE_ReasonLastSurgery) || PE_ReasonLastSurgery == 55 || PE_ReasonLastSurgery == 98)) NonValidMessages.Add($"153| Error en variable 81. Valor no valido en “Motivo de haber realizado la última intervención quirúrgica de este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"153| Error en variable 81. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"153| Error en variable 81. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 5, 6 }).Contains(PE_ReasonLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 5, 6 }).Contains(PE_ReasonLastSurgery)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 5, 6 }).Contains(PE_ReasonLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 5, 6 }).Contains(PE_ReasonLastSurgery)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonLastSurgery == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"153| Error en variable 81. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonLastSurgery == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"153| Error en variable 81. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonLastSurgery == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"153| Error en variable 81. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((PE_ReasonLastSurgery == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"153| Error en variable 81. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Reinducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAREINDUCT
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.5
        /// </sumary>
        private long PE_ReinductionChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAREINDUCT() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Reinducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_ReinductionChemotherapy">variable 46.5</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_ReinductionChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReinductionChemotherapy = PE_ReinductionChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_ReinductionChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.5",
    "51"
    );
            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"51|Valor no valido en 46.5 'El usuario recibió en este periodo la fase de quimioterapia denominada Reinducción (aplica solo para leucemia linfoide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de Régimen de la información reportada en el archivo
    /// </sumary> 
    public sealed class RUL_CAREGITYPE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tipo de Régimen de la información reportada en el archivo
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAREGITYPE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de Régimen de la información reportada en el archivo
        /// </sumary>
        /// <param name="PE_RegimeType">Tipo de Régimen de la información reportada en el archivo</param>
        public RuntimeResult<string> Execute(string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_RegimeType = PE_RegimeType;
                this.VC_Mayus = FUNC_VC_Mayus();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_RegimeType == PE_RegimeType.ToUpper());
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "C", "S", "P", "E", "N" }).Contains(PE_RegimeType) || !(new string[] { "C", "S", "P", "E", "N" }.Contains(PE_RegimeType)))) NonValidMessages.Add($"10| Error en variable 10. Valor no valido en Regimen de afiliacion AL SGSSS. ");
            if (!(VC_Mayus == true || VC_Mayus != true)) NonValidMessages.Add($"10| Error en variable 10. Valor no valido en Regimen de afiliacion AL SGSSS debe ser en mayusculas. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new string[] { "C", "S", "P", "E", "N" }).Contains(PE_RegimeType)) && (VC_Mayus == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new string[] { "C", "S", "P", "E", "N" }).Contains(PE_RegimeType)) && (VC_Mayus != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"10| Error en variable 10. Valor no valido en “Régimen de afiliación AL SGSSS” debe ser en mayúsculas. ", this.FileName);
            }
            else if ((!(new string[] { "C", "S", "P", "E", "N" }.Contains(PE_RegimeType))) && (VC_Mayus == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"10| Error en variable 10. Valor no valido en “Régimen de afiliación AL SGSSS”. ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"10| Error en variable 10. Valor no valido en “Régimen de afiliación AL SGSSS”. ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario, ¿recibió cirugía reconstructiva?
    /// </sumary> 
    public sealed class RUL_CARECOSURG
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 111
        /// </sumary>
        private long PE_ReconstructiveSurgery;
        /// <sumary>
        /// variable 112
        /// </sumary>
        private DateTime PE_DateReconstructiveSurgery;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSReconstructiveSurgery;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V112
        /// </sumary>
        private bool VC_DateReconstructiveSurgery;
        /// <sumary>
        /// V113
        /// </sumary>
        private bool VC_IPSReconstructiveSurgery;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARECOSURG() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario, ¿recibió cirugía reconstructiva?
        /// </sumary>
        /// <param name="PE_ReconstructiveSurgery">variable 111</param>
        /// <param name="PE_DateReconstructiveSurgery">variable 112</param>
        /// <param name="PE_IPSReconstructiveSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_ReconstructiveSurgery, DateTime PE_DateReconstructiveSurgery, string PE_IPSReconstructiveSurgery, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReconstructiveSurgery = PE_ReconstructiveSurgery;
                this.PE_DateReconstructiveSurgery = PE_DateReconstructiveSurgery;
                this.PE_IPSReconstructiveSurgery = PE_IPSReconstructiveSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_DateReconstructiveSurgery = FUNC_VC_DateReconstructiveSurgery();
                this.VC_IPSReconstructiveSurgery = FUNC_VC_IPSReconstructiveSurgery();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateReconstructiveSurgery()
        {
            if (PE_DateReconstructiveSurgery == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            };

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IPSReconstructiveSurgery()
        {
            return (PE_IPSReconstructiveSurgery == "98");


        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery) || PE_ReconstructiveSurgery == 55 || PE_ReconstructiveSurgery == 98)) NonValidMessages.Add($"183| Error en variable 111. Valor no valido en “El usuario, ¿recibió cirugía reconstructiva?”.");
            if (!(VC_DateReconstructiveSurgery == true || VC_DateReconstructiveSurgery != true)) NonValidMessages.Add($"183|Error en variable 111. Valor no valido en “Fecha de la cirugía”. Variable 112.");
            if (!(VC_IPSReconstructiveSurgery == true || VC_IPSReconstructiveSurgery != true)) NonValidMessages.Add($"183|Error en variable 111. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”. Variable 113.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"183| Error en variable 111. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ReconstructiveSurgery)) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183| Error en variable 111. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183| Error en variable 111. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183| Error en variable 111. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 55) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183| Error en variable 111. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111. Si registra 98 debe registrar 98 en la Variable 113.", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery == true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111. Si registra 98 debe registrar 98 en la Variable 113.", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111.  Si registra 98 debe registrar 1845-01-01 en la variable 112.", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111.  Si registra 98 debe registrar 1845-01-01 en la variable 112.", this.FileName);
            }
            else if ((PE_ReconstructiveSurgery == 98) && (VC_DateReconstructiveSurgery != true) && (VC_IPSReconstructiveSurgery != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111. Si registra 98 debe registrar 98 en la Variable 113.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"183|Error en variable 111. Si registra 98 debe registrar 98 en la Variable 113.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo de la finalización (prematura) de este último ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
    /// </sumary> 
    public sealed class RUL_CAREASONEN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 73
        /// </sumary>
        private long PE_ReasonEndingLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Variable 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAREASONEN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo de la finalización (prematura) de este último ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        /// <param name="PE_ReasonEndingLastCycle">variable 73</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_CurrentFeaturesLastCycle">Variable 72</param>
        public RuntimeResult<string> Execute(long PE_ReasonEndingLastCycle, string PE_RegimeType, long PE_CurrentFeaturesLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReasonEndingLastCycle = PE_ReasonEndingLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ReasonEndingLastCycle >= 1 && PE_ReasonEndingLastCycle <= 8 || PE_ReasonEndingLastCycle == 98 || PE_ReasonEndingLastCycle == 55)) NonValidMessages.Add($"'145| Error en variable 73. Valor no valido en “Motivo de la finalización (prematura) de este último esquema (Aplica si registró la opción 2 de la pregunta anterior) Seleccione un sólo número (lo que primero ocurrió):”.'");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"145| Error en variable 73. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!(PE_CurrentFeaturesLastCycle == 2 || (new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle))) NonValidMessages.Add($"145| Error en variable 73. Valor no valido en “Características actuales del último esquema de este periodo:”-variable (72).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ReasonEndingLastCycle >= 1 && PE_ReasonEndingLastCycle <= 8) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastCycle >= 1 && PE_ReasonEndingLastCycle <= 8) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra un dato entre 1 a 8 debe registrar  2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
            else if ((PE_ReasonEndingLastCycle >= 1 && PE_ReasonEndingLastCycle <= 8) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastCycle >= 1 && PE_ReasonEndingLastCycle <= 8) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra un dato entre 1 a 8 debe registrar  2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
            else if ((PE_ReasonEndingLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra 98 debe registrar  un dato diferente a 2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
            else if ((PE_ReasonEndingLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra 98 debe registrar  un dato diferente a 2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
            else if ((PE_ReasonEndingLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastCycle)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra 55 debe registrar  2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
            else if ((PE_ReasonEndingLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesLastCycle == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra 55 debe registrar  C o S en variable 10", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"145|Error en variable 73. Si registra 55 debe registrar  2 en 'Características actuales del último esquema de este periodo:' variable 72", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo de la finalización de este primer o único esquema de radioterapia (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
    /// </sumary> 
    public sealed class RUL_CAREASENDI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 96
        /// </sumary>
        private long PE_ReasonEndingRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V95
        /// </sumary>
        private long PE_CurrentFeaturesRadiotherapy;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAREASENDI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo de la finalización de este primer o único esquema de radioterapia (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        /// <param name="PE_ReasonEndingRadiotherapy">variable 96</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_CurrentFeaturesRadiotherapy">V95</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_ReasonEndingRadiotherapy, string PE_RegimeType, long PE_CurrentFeaturesRadiotherapy, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReasonEndingRadiotherapy = PE_ReasonEndingRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CurrentFeaturesRadiotherapy = PE_CurrentFeaturesRadiotherapy;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7 || PE_ReasonEndingRadiotherapy == 55 || PE_ReasonEndingRadiotherapy == 98)) NonValidMessages.Add($"168| Error en variable 96. Valor no valido en “Motivo de la finalización de este primer o único esquema de radioterapia”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"168| Error en variable 96. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_CurrentFeaturesRadiotherapy == 2 || (new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy))) NonValidMessages.Add($"168| Error en variable 96. Valor no valido en “Características actuales de este primer o único esquema de radioterapia”. Variable 95.");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"168| Error en variable 96. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 1-2-3-4-5-6 o 7  debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 1-2-3-4-5-6 o 7  debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 1-2-3-4-5-6 o 7  debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy >= 1 && PE_ReasonEndingRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 1-2-3-4-5-6 o 7  debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 55 debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registra de 55 debe registrar 2 en 'Características actuales de este primer o único esquema de radioterapia' .Variable 95.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Registro 2 en la variable 95, debe registrar un valor diferente de 98 en la variable 96.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Registro 2 en la variable 95, debe registrar un valor diferente de 98 en la variable 96.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168|Error en variable 96. Si registra 98 debe registrar la opción 98 en '¿Recibió el usuario algún tipo de radioterapia en el corte actual?' variable 86.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registro 2 en la variable 95 'Características actuales de este primer o único esquema de radioterapia' , debe registrar un valor diferente de 98 en la variable 96.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_CurrentFeaturesRadiotherapy == 2) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168| Error en variable 96. Si registro 2 en la variable 95 'Características actuales de este primer o único esquema de radioterapia' , debe registrar un valor diferente de 98 en la variable 96.", this.FileName);
            }
            else if ((PE_ReasonEndingRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesRadiotherapy)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"168|Error en variable 96. Si registra 98 debe registrar la opción 98 en '¿Recibió el usuario algún tipo de radioterapia en el corte actual?' variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Carboplatino 
    /// </sumary> 
    public sealed class RUL_CARBOPLFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CarboplatinFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARBOPLFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Carboplatino 
        /// </sumary>
        /// <param name="PE_CarboplatinFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CarboplatinFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CarboplatinFirstCycle = PE_CarboplatinFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinFirstCycle) || PE_CarboplatinFirstCycle == 98 || PE_CarboplatinFirstCycle == 55)) NonValidMessages.Add($"65| Error en variable 53.4. Valor no valido en “En este primer o único esquema el usuario recibió Carboplatino ”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"65| Error en variable 53.4. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CarboplatinFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CarboplatinFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CarboplatinFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"65| Error en variable 53.4. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Dacarbazina 
    /// </sumary> 
    public sealed class RUL_CARBAFIRST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_DacarbazineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARBAFIRST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Dacarbazina 
        /// </sumary>
        /// <param name="PE_DacarbazineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_DacarbazineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DacarbazineFirstCycle = PE_DacarbazineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineFirstCycle) || PE_DacarbazineFirstCycle == 98 || PE_DacarbazineFirstCycle == 55)) NonValidMessages.Add($"71| Error en variable 53.10. Valor no valido en “En este primer o único esquema el usuario recibió Dacarbazina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"71| Error en variable 53.10. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DacarbazineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DacarbazineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DacarbazineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"71| Error en variable 53.10. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de radioterapia aplicada en este primer o único esquema
    /// </sumary> 
    public sealed class RUL_CARADITYPE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 90
        /// </sumary>
        private long PE_RadiotherapyType;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARADITYPE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de radioterapia aplicada en este primer o único esquema
        /// </sumary>
        /// <param name="PE_RadiotherapyType">variable 90</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_RadiotherapyType, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_RadiotherapyType = PE_RadiotherapyType;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_RadiotherapyType >= 1 && PE_RadiotherapyType <= 7 || PE_RadiotherapyType == 55 || PE_RadiotherapyType == 98)) NonValidMessages.Add($"162| Error en variable 90. Valor no valido en “Tipo de radioterapia aplicada en este primer o único esquema”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"162| Error en variable 90. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"162| Error en variable 90. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_RadiotherapyType >= 1 && PE_RadiotherapyType <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType >= 1 && PE_RadiotherapyType <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType >= 1 && PE_RadiotherapyType <= 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType >= 1 && PE_RadiotherapyType <= 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"162| Error en variable 90. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_RadiotherapyType == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"162| Error en variable 90. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_RadiotherapyType == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RadiotherapyType == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"162|Error en variable 90. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((PE_RadiotherapyType == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"162|Error en variable 90. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo de la finalización de este último esquema de radioterapia suministrado en el corte actual (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
    /// </sumary> 
    public sealed class RUL_CARADIOTLA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 105
        /// </sumary>
        private long PE_ReasonEndingLastRadiotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// V104
        /// </sumary>
        private long PE_CurrentFeaturesLastRadiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARADIOTLA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo de la finalización de este último esquema de radioterapia suministrado en el corte actual (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        /// <param name="PE_ReasonEndingLastRadiotherapy">variable 105</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_Radiotherapy">V86</param>
        /// <param name="PE_CurrentFeaturesLastRadiotherapy">V104</param>
        public RuntimeResult<string> Execute(long PE_ReasonEndingLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy, long PE_CurrentFeaturesLastRadiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReasonEndingLastRadiotherapy = PE_ReasonEndingLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.PE_CurrentFeaturesLastRadiotherapy = PE_CurrentFeaturesLastRadiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7 || PE_ReasonEndingLastRadiotherapy == 98 || PE_ReasonEndingLastRadiotherapy == 55)) NonValidMessages.Add($"177| Error en variable 105. Valor no valido en “Motivo de la finalización de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"177| Error en variable 105. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"177| Error en variable 105. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");
            if (!(PE_CurrentFeaturesLastRadiotherapy == 2 || (new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy))) NonValidMessages.Add($"177| Error en variable 105. Valor no valido en “Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual”. Variable 104.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registras 1-2-3-4-5-6 o 7 debe registrar 2 en 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' - variable 104.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registras 1-2-3-4-5-6 o 7 debe registrar 2 en 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' - variable 104.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registras 1-2-3-4-5-6 o 7 debe registrar 2 en 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' - variable 104.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy >= 1 && PE_ReasonEndingLastRadiotherapy <= 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registras 1-2-3-4-5-6 o 7 debe registrar 2 en 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' - variable 104.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Si Registro 2 en la variable 104 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' , debe registrar un valor diferente a 98 en la variable 105.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Si Registro 2 en la variable 104, debe registrar un valor diferente en la variable 105.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registro 98,  debe registrar 98 en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. si registra 2 en la variable 104 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' , debe registrar un valor diferente a 98 en la variable 105.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177|Error en variable 105. Si registro 98 debe registrar tambien  98 en la variable 86  y  si registra 2 en la variable 104 'Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual' , debe registrar un valor diferente a 98 en la variable 105.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177|Error en variable 105. Si registro 98 debe registrar la opción 98 en la variable 86.", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && ((new long[] { 1, 3, 98, 55 }).Contains(PE_CurrentFeaturesLastRadiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ReasonEndingLastRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (PE_CurrentFeaturesLastRadiotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"177| Error en variable 105. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió el usuario algún tipo de radioterapia en el corte actual?
    /// </sumary> 
    public sealed class RUL_CARADIOTHE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CARADIOTHE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió el usuario algún tipo de radioterapia en el corte actual?
        /// </sumary>
        /// <param name="PE_Radiotherapy">variable 86</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_Radiotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 98 }).Contains(PE_Radiotherapy) || PE_Radiotherapy == 55)) NonValidMessages.Add($"158| Error en variable 86. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"158| Error en variable 86. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 98 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 98 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Radiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"158| Error en variable 86. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Ha sido valorado el usuario por el servicio de psiquiatría durante este corte?
    /// </sumary> 
    public sealed class RUL_CAPSYCHIAT
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 117
        /// </sumary>
        private long PE_Psychiatry;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPSYCHIAT() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Ha sido valorado el usuario por el servicio de psiquiatría durante este corte?
        /// </sumary>
        /// <param name="PE_Psychiatry">variable 117</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_Psychiatry, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Psychiatry = PE_Psychiatry;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 98 }).Contains(PE_Psychiatry) || PE_Psychiatry == 55)) NonValidMessages.Add($"195| Error en variable 117. Valor no valido en “¿Ha sido valorado el usuario por el servicio de psiquiatría durante este corte?”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"195| Error en variable 117. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 98 }).Contains(PE_Psychiatry)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 98 }).Contains(PE_Psychiatry)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Psychiatry == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"195| Error en variable 117. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Procarbazina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAPROCARBA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.22
        /// </sumary>
        private long PE_ProcarbazineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPROCARBA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Procarbazina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_ProcarbazineLastCycle">variable 66.22</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ProcarbazineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ProcarbazineLastCycle = PE_ProcarbazineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineLastCycle) || PE_ProcarbazineLastCycle == 55 || PE_ProcarbazineLastCycle == 98)) NonValidMessages.Add($"128| Error en variable 66.22. Valor no valido en “En este último esquema el usuario recibió Pegfilgrastim”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"128| Error en variable 66.22. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ProcarbazineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ProcarbazineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"128| Error en variable 66.22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ProcarbazineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
    /// </sumary> 
    public sealed class RUL_CAPREPHASE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.1
        /// </sumary>
        private long PE_PrephaseChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPREPHASE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        /// <param name="PE_PrephaseChemotherapy">variable 46.1</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_PrephaseChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrephaseChemotherapy = PE_PrephaseChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_PrephaseChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.1",
    "47"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"47|Valor no valido en 46.1 'El usuario recibió en este periodo la fase de quimioterapia denominada Prefase o Citorreducción inicial (aplica solo para leucemia linfoide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
    /// </sumary> 
    public sealed class RUL_CAPREDSONA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.29
        /// </sumary>
        private long PE_PrednisoneLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPREDSONA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        /// <param name="PE_PrednisoneLastCycle">variable 66.29</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PrednisoneLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrednisoneLastCycle = PE_PrednisoneLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneLastCycle) || PE_PrednisoneLastCycle == 98 || PE_PrednisoneLastCycle == 55)) NonValidMessages.Add($"135| Error en variable 66.29. Valor no valido en “ En este último esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"135| Error en variable 66.29. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoneLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoneLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoneLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"135| Error en variable 66.29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Prednisolona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
    /// </sumary> 
    public sealed class RUL_CAPREDSOLO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.30
        /// </sumary>
        private long PE_PrednisoloneLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPREDSOLO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Prednisolona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        /// <param name="PE_PrednisoloneLastCycle">variable 66.30</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PrednisoloneLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrednisoloneLastCycle = PE_PrednisoloneLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneLastCycle) || PE_PrednisoloneLastCycle == 98 || PE_PrednisoloneLastCycle == 55)) NonValidMessages.Add($"136| Error en variable 66.30. Valor no valido en “ En este último esquema el usuario recibió Prednisolona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"136| Error en variable 66.30. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoloneLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoloneLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoloneLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PrednisoloneLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"136| Error en variable 66.30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
    /// </sumary> 
    public sealed class RUL_CAPREDFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_PrednisoneFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPREDFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)
        /// </sumary>
        /// <param name="PE_PrednisoneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_PrednisoneFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrednisoneFirstCycle = PE_PrednisoneFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneFirstCycle) || PE_PrednisoneFirstCycle == 98 || PE_PrednisoneFirstCycle == 55)) NonValidMessages.Add($"90| Error en variable 53.29. Valor no valido en “En este primer o único esquema el usuario recibió Prednisona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico en la variable 53)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"90| Error en variable 53.29. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PrednisoneFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoneFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoneFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PrednisoneFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"90| Error en variable 53.29. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Grupo poblacional
    /// </sumary> 
    public sealed class RUL_CAPOPGROUP
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Grupo poblacional
        /// </sumary>
        private long PE_PopulationGroup;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPOPGROUP() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Grupo poblacional
        /// </sumary>
        /// <param name="PE_PopulationGroup">Grupo poblacional</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PopulationGroup, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PopulationGroup = PE_PopulationGroup;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }).Contains(PE_PopulationGroup) || PE_PopulationGroup == 555)) NonValidMessages.Add($"13| Error en variable 13. Valor no valido en Grupo poblacional. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"13| Error en variable 13. Valor no valido en Grupo poblacional en Regimen de afiliacion AL SGSSS , variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }).Contains(PE_PopulationGroup)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 }).Contains(PE_PopulationGroup)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PopulationGroup == 555) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"13| Error en variable 13. Si registra 555, no debe registrar N o P o E en la variable 10 Tipo de régimen. ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número telefónico del paciente (incluyendo a familiares y cuidadores)
    /// </sumary> 
    public sealed class RUL_CAPHONES
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Número telefónico del paciente (incluyendo a familiares y cuidadores)
        /// </sumary>
        private string PE_Phones;
        /// <sumary>
        /// Longitud Número telefónico del paciente (incluyendo a familiares y cuidadores)
        /// </sumary>
        private bool VC_Phones;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPHONES() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número telefónico del paciente (incluyendo a familiares y cuidadores)
        /// </sumary>
        /// <param name="PE_Phones">Número telefónico del paciente (incluyendo a familiares y cuidadores)</param>
        public RuntimeResult<string> Execute(string PE_Phones)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Phones = PE_Phones;
                this.VC_Phones = FUNC_VC_Phones();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Phones()
        {
            if ((PE_Phones.Length <= 21) && (PE_Phones.Length >= 1))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Phones == true)) NonValidMessages.Add($"15| Error en variable 15. Valor no valido en Numero telefonico del paciente (incluyendo a familiares y cuidadores). Maximo 21 caracteres.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Pegfilgrastim (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAPEGFILGR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.21
        /// </sumary>
        private long PE_PegfilgrastimLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPEGFILGR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Pegfilgrastim (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_PegfilgrastimLastCycle">variable 66.21</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PegfilgrastimLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PegfilgrastimLastCycle = PE_PegfilgrastimLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimLastCycle) || PE_PegfilgrastimLastCycle == 55 || PE_PegfilgrastimLastCycle == 98)) NonValidMessages.Add($"127| Error en variable 66.21. Valor no valido en “En este último esquema el usuario recibió Pegfilgrastim”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"127| Error en variable 66.21. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PegfilgrastimLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PegfilgrastimLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"127| Error en variable 66.21. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_PegfilgrastimLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Pegfilgrastim
    /// </sumary> 
    public sealed class RUL_CAPEGFFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_PegfilgrastimFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPEGFFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Pegfilgrastim
        /// </sumary>
        /// <param name="PE_PegfilgrastimFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_PegfilgrastimFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PegfilgrastimFirstCycle = PE_PegfilgrastimFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimFirstCycle) || PE_PegfilgrastimFirstCycle == 98 || PE_PegfilgrastimFirstCycle == 55)) NonValidMessages.Add($"82| Error en variable 53.21. Valor no valido en “En este primer o único esquema el usuario recibió Pegfilgrastim”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"82| Error en variable 53.21. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PegfilgrastimFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PegfilgrastimFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PegfilgrastimFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PegfilgrastimFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"82| Error en variable 53.21. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Capecitabina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAPECITABI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.3
        /// </sumary>
        private long PE_CapecitabineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPECITABI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Capecitabina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_CapecitabineLastCycle">variable 66.3</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CapecitabineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CapecitabineLastCycle = PE_CapecitabineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineLastCycle) || PE_CapecitabineLastCycle == 55 || PE_CapecitabineLastCycle == 98)) NonValidMessages.Add($"109| Error en variable 66.3. Valor no valido en “En este último esquema el usuario recibió Capecitabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"109| Error en variable 66.3. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CapecitabineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CapecitabineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109| Error en variable 66.3. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CapecitabineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Capecitabina
    /// </sumary> 
    public sealed class RUL_CAPECIFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CapecitabineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPECIFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Capecitabina
        /// </sumary>
        /// <param name="PE_CapecitabineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CapecitabineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CapecitabineFirstCycle = PE_CapecitabineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineFirstCycle) || PE_CapecitabineFirstCycle == 98 || PE_CapecitabineFirstCycle == 55)) NonValidMessages.Add($"64| Error en variable 53.3. Valor no valido en “En este primer o único esquema el usuario recibió Capecitabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"64| Error en variable 53.3. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CapecitabineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CapecitabineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CapecitabineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CapecitabineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"64| Error en variable 53.3. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿El usuario fue valorado en consulta o procedimiento de cuidado paliativo durante este corte? (pueden haber sido múltiples)
    /// </sumary> 
    public sealed class RUL_CAPALLICAR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114
        /// </sumary>
        private long PE_PalliativeCare;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPALLICAR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿El usuario fue valorado en consulta o procedimiento de cuidado paliativo durante este corte? (pueden haber sido múltiples)
        /// </sumary>
        /// <param name="PE_PalliativeCare">variable 114</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PalliativeCare, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PalliativeCare = PE_PalliativeCare;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PalliativeCare) || PE_PalliativeCare == 55)) NonValidMessages.Add($"186| Error en variable 114. Valor no valido en “¿El usuario fue valorado en consulta o procedimiento de cuidado paliativo durante este corte?”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"186| Error en variable 114. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PalliativeCare)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PalliativeCare)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PalliativeCare == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"186| Error en variable 114. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por profesional de la salud (no médico, incluye psicólogo) especialista en cuidado paliativo
    /// </sumary> 
    public sealed class RUL_CAPALLCARE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.2
        /// </sumary>
        private long PE_ConsultationProfessionalPalliativeCare;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPALLCARE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por profesional de la salud (no médico, incluye psicólogo) especialista en cuidado paliativo
        /// </sumary>
        /// <param name="PE_ConsultationProfessionalPalliativeCare">variable 114.2</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ConsultationProfessionalPalliativeCare, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationProfessionalPalliativeCare = PE_ConsultationProfessionalPalliativeCare;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationProfessionalPalliativeCare) || PE_ConsultationProfessionalPalliativeCare == 55)) NonValidMessages.Add($"188| Error en variable 114.2. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por profesional de la salud (no médico, incluye psicólogo) especialista en cuidado paliativo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"188| Error en variable 114.2. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationProfessionalPalliativeCare)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationProfessionalPalliativeCare)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationProfessionalPalliativeCare == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"188| Error en variable 114.2. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Paclitaxel (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAPACLITAX
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.20
        /// </sumary>
        private long PE_PaclitaxelLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPACLITAX() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Paclitaxel (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_PaclitaxelLastCycle">variable 66.20</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_PaclitaxelLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PaclitaxelLastCycle = PE_PaclitaxelLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelLastCycle) || PE_PaclitaxelLastCycle == 55 || PE_PaclitaxelLastCycle == 98)) NonValidMessages.Add($"126|Valor no valido en la variable de último ciclo el usuario recibió Paclitaxel (puede haber recibido más de un medicamento). Validar variable 66.20. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"126| Error en variable 66.20. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PaclitaxelLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_PaclitaxelLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"126| Error en variable 66.20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_PaclitaxelLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Paclitaxel
    /// </sumary> 
    public sealed class RUL_CAPACLIFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_PaclitaxelFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAPACLIFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Paclitaxel
        /// </sumary>
        /// <param name="PE_PaclitaxelFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_PaclitaxelFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PaclitaxelFirstCycle = PE_PaclitaxelFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelFirstCycle) || PE_PaclitaxelFirstCycle == 98 || PE_PaclitaxelFirstCycle == 55)) NonValidMessages.Add($"81| Error en variable 53.20. Valor no valido en “En este primer o único esquema el usuario recibió Paclitaxel”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"81| Error en variable 53.20. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_PaclitaxelFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PaclitaxelFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PaclitaxelFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_PaclitaxelFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"81| Error en variable 53.20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por otro profesional de salud (no médico, incluye psicólogo) no especializado
    /// </sumary> 
    public sealed class RUL_CAOTHERPRO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.6
        /// </sumary>
        private long PE_ConsultationOtherProfessional;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAOTHERPRO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por otro profesional de salud (no médico, incluye psicólogo) no especializado
        /// </sumary>
        /// <param name="PE_ConsultationOtherProfessional">variable 114.6</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ConsultationOtherProfessional, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationOtherProfessional = PE_ConsultationOtherProfessional;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationOtherProfessional) || PE_ConsultationOtherProfessional == 55)) NonValidMessages.Add($"192| Error en variable 114.6. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por otro profesional de salud (no médico, incluye psicólogo) no especializado”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"192| Error en variable 114.6. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationOtherProfessional)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationOtherProfessional)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationOtherProfessional == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"192| Error en variable 114.6. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte Otra fase de quimioterapia denominada diferente a las anteriores (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAOTHERCHE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.8
        /// </sumary>
        private long PE_OtherChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAOTHERCHE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte Otra fase de quimioterapia denominada diferente a las anteriores (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_OtherChemotherapy">variable 46.8</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_OtherChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_OtherChemotherapy = PE_OtherChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_OtherChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.8",
    "54"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"54|Valor no valido en 46.8 'El usuario recibió en este periodo Otra fase de quimioterapia denominada diferente a las anteriores (aplica solo para leucemia linfoide o mieloide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS1 que suministra el primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CAODIPFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeIPSOneFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAODIPFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS1 que suministra el primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_CodeIPSOneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_CodeIPSOneFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeIPSOneFirstCycle = PE_CodeIPSOneFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_CodeIPSOneFirstCycle.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. ");
            if (!(PE_CodeIPSOneFirstCycle == "55" || PE_CodeIPSOneFirstCycle == "98" || !(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle)))) NonValidMessages.Add($"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. ");
            if (!((new long[] { 1, 55 }).Contains(PE_Chemotherapy) || PE_Chemotherapy == 2 || PE_Chemotherapy == 98)) NonValidMessages.Add($"59| Error en variable 51. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual?.”-variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"59| Error en variable 51. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si registro 98 en la variable 45 debe registrar 98 en la variable 51.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si registro 98 en la variable 45 debe registrar 98 en la variable 51.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si registro 98 en la variable 45 debe registrar 98 en la variable 51.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si registro 98 en la variable 45 debe registrar 98 en la variable 51.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si  98 debe registrar 2 o  98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59|Error en variable 51. Si  98 debe registrar 2 o  98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSOneFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSOneFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"59| Error en variable 51. Valor no valido en “Código de la IPS1 que suministra el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de ocupación 
    /// </sumary> 
    public sealed class RUL_CAOCUPATIO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de ocupacion
        /// </sumary>
        private string PE_OccupationCode;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud Código de Ocupación
        /// </sumary>
        private bool LongOccupationCode;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAOCUPATIO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de ocupación 
        /// </sumary>
        /// <param name="PE_OccupationCode">Codigo de ocupacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_OccupationCode, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_OccupationCode = PE_OccupationCode;
                this.PE_RegimeType = PE_RegimeType;
                this.LongOccupationCode = FUNC_LongOccupationCode();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LongOccupationCode()
        {
            return PE_OccupationCode.ToString().Length == 4;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "9999", "9998" }).Contains(PE_OccupationCode) || PE_OccupationCode == "5555" || !(new string[] { "9999", "9998", "5555" }.Contains(PE_OccupationCode)))) NonValidMessages.Add($"9| Error en variable 9. Valor no valido en Codigo de Ocupacion. Debe ser igual a 4 caracteres y sea un valor de CIUO 88.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"9| Error en variable 9. Valor no valido en tipo de regimen, variable 10. ");
            if (!(LongOccupationCode == true)) NonValidMessages.Add($"9| Error en variable 9. Valor no valido en Codigo de Ocupacion. Debe ser igual a 4 caracteres.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new string[] { "9999", "9998" }).Contains(PE_OccupationCode)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (LongOccupationCode == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new string[] { "9999", "9998" }).Contains(PE_OccupationCode)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (LongOccupationCode == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_OccupationCode == "5555") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (LongOccupationCode == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_OccupationCode == "5555") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (LongOccupationCode == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 9| Error en variable 9. Si registra 5555, debe registras C o S en la variable 10-'Tipo de régimen'. ", this.FileName);
            }
            else if ((!(new string[] { "9999", "9998", "5555" }.Contains(PE_OccupationCode))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (LongOccupationCode == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Fue valorado el usuario por profesional en nutrición durante este corte?
    /// </sumary> 
    public sealed class RUL_CANUTRITIO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 120
        /// </sumary>
        private long PE_Nutrition;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANUTRITIO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Fue valorado el usuario por profesional en nutrición durante este corte?
        /// </sumary>
        /// <param name="PE_Nutrition">variable 120</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_Nutrition, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Nutrition = PE_Nutrition;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 98 }).Contains(PE_Nutrition) || PE_Nutrition == 55)) NonValidMessages.Add($"198| Error en variable 120. Valor no valido en “¿Fue valorado el usuario por profesional en nutrición durante este corte?”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"198| Error en variable 120. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 98 }).Contains(PE_Nutrition)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 98 }).Contains(PE_Nutrition)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Nutrition == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"198| Error en variable 120. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿El usuario recibió soporte nutricional?
    /// </sumary> 
    public sealed class RUL_CANUTRISUP
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 123
        /// </sumary>
        private long PE_NutritionalSupport;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANUTRISUP() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿El usuario recibió soporte nutricional?
        /// </sumary>
        /// <param name="PE_NutritionalSupport">variable 123</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_NutritionalSupport, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_NutritionalSupport = PE_NutritionalSupport;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4 }).Contains(PE_NutritionalSupport) || PE_NutritionalSupport == 55)) NonValidMessages.Add($"201| Error en variable 123. Valor no valido en “¿El usuario recibió soporte nutricional?”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"201| Error en variable 123. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4 }).Contains(PE_NutritionalSupport)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_NutritionalSupport)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_NutritionalSupport == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"201| Error en variable 123. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de Identificación del usuario
    /// </sumary> 
    public sealed class RUL_CANUMIDENT
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Numero de identificacion
        /// </sumary>
        private string PE_DocumentNumber;
        /// <sumary>
        /// Numero de identificación
        /// </sumary>
        private long VC_DocumentNumber;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANUMIDENT() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de Identificación del usuario
        /// </sumary>
        /// <param name="PE_DocumentNumber">Numero de identificacion</param>
        public RuntimeResult<string> Execute(string PE_DocumentNumber)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DocumentNumber = PE_DocumentNumber;
                this.VC_DocumentNumber = FUNC_VC_DocumentNumber();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_DocumentNumber()
        {
            return PE_DocumentNumber.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_DocumentNumber >= 1 && VC_DocumentNumber <= 20 || !(VC_DocumentNumber >= 1 && VC_DocumentNumber <= 20))) NonValidMessages.Add($"6|Error en variable 6. Valor no valido en Numero de Identificacion del usuario. maximo 20 caracteres.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_DocumentNumber >= 1 && VC_DocumentNumber <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"6|Error en variable 6. Valor no valido en “Número de Identificación del usuario”. máximo 20 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en este último ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CANTINEOPL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// AntineoplasticDrugsLastCycle
        /// </sumary>
        private string PE_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// v66
        /// </sumary>
        private bool VC_AntineoplasticDrugsLastCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANTINEOPL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en este último ciclo de este corte
        /// </sumary>
        /// <param name="PE_AntineoplasticDrugsLastCycle">AntineoplasticDrugsLastCycle</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_AntineoplasticDrugsLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AntineoplasticDrugsLastCycle = PE_AntineoplasticDrugsLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_AntineoplasticDrugsLastCycle = FUNC_VC_AntineoplasticDrugsLastCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AntineoplasticDrugsLastCycle()
        {
            if (PE_AntineoplasticDrugsLastCycle.ToString().Length <= 2)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_AntineoplasticDrugsLastCycle == true)) NonValidMessages.Add($"'106| Error en variable 66. Valor no valido en “Cuántos medicamentos antineoplásicos o terapia hormonal para el cáncer, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en este último esquema de este periodo de reporte:”.'");
            if (!(PE_AntineoplasticDrugsLastCycle == "98" || PE_AntineoplasticDrugsLastCycle == "99" || !(new string[] { "98", "99" }.Contains(PE_AntineoplasticDrugsLastCycle)))) NonValidMessages.Add($"'106| Error en variable 66. Valor no valido en “Cuántos medicamentos antineoplásicos o terapia hormonal para el cáncer, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en este último esquema de este periodo de reporte:”.'");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"106| Error en variable 66. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_AntineoplasticDrugsLastCycle == true) && (PE_AntineoplasticDrugsLastCycle == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsLastCycle == true) && (PE_AntineoplasticDrugsLastCycle == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsLastCycle == true) && (PE_AntineoplasticDrugsLastCycle == "99") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsLastCycle == true) && (PE_AntineoplasticDrugsLastCycle == "99") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"106| Error en variable 66. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsLastCycle == true) && (!(new string[] { "98", "99" }.Contains(PE_AntineoplasticDrugsLastCycle))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Nombre de la neoplasia (cáncer o tumor) maligna reportada
    /// </sumary> 
    public sealed class RUL_CANAMENEOP
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Nombre de la neoplasia (cáncer o tumor) maligna reportada
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// Nombre de la neoplasia (cáncer o tumor) maligna reportada
        /// </sumary>
        private long VC_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANAMENEOP() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Nombre de la neoplasia (cáncer o tumor) maligna reportada
        /// </sumary>
        /// <param name="PE_NameNeoplasia">Nombre de la neoplasia (cáncer o tumor) maligna reportada</param>
        public RuntimeResult<string> Execute(string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_NameNeoplasia()
        {
            return PE_NameNeoplasia.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_NameNeoplasia == 4 || VC_NameNeoplasia != 4)) NonValidMessages.Add($"17| Error en variable 17. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada segun CIE 10. Tama�o 4 caracteres.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_NameNeoplasia == 4))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"17| Error en variable 17. Valor no valido en “Nombre de la neoplasia (cáncer o tumor) maligna reportada según CIE 10”. Tamaño 4 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo (nombre) de ese cáncer antecedente
    /// </sumary> 
    public sealed class RUL_CANAHICA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_NameHistorialCancer;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CANAHICA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo (nombre) de ese cáncer antecedente
        /// </sumary>
        /// <param name="PE_NameHistorialCancer">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_NameHistorialCancer, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_NameHistorialCancer = PE_NameHistorialCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            if (PE_NameHistorialCancer.ToString().Length == 4)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"44| Error en variable 44. Valor no valido en Tipo (CIE-10) de ese cancer antecedente o concurrente-Variable 17. ");
            if (!(PE_NameHistorialCancer == "99" || PE_NameHistorialCancer == "55" || !(new string[] { "55", "99" }.Contains(PE_NameHistorialCancer)))) NonValidMessages.Add($"44| Error en variable 44. Valor no valido en Tipo (CIE-10) de ese cancer antecedente o concurrente:-Variable 17. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"44| Error en variable 44. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_NameHistorialCancer == "99") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_NameHistorialCancer == "99") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_NameHistorialCancer == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_NameHistorialCancer == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"44| Error en variable 44. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "99" }.Contains(PE_NameHistorialCancer))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "99" }.Contains(PE_NameHistorialCancer))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_NameHistorialCancer == "99") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_NameHistorialCancer == "99") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_NameHistorialCancer == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_NameHistorialCancer == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"44| Error en variable 44. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "99" }.Contains(PE_NameHistorialCancer))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"44| Error en variable 44. Valor no valido en “Tipo (CIE-10) de ese cáncer antecedente o concurrente:”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"44| Error en variable 44. Valor no valido en “Tipo (CIE-10) de ese cáncer antecedente o concurrente:”.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Municipio de residencia
    /// </sumary> 
    public sealed class RUL_CAMUNRESID
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de municipio
        /// </sumary>
        private string PE_MunicipalityResidence;
        /// <sumary>
        /// Longitud MunicipalityResidence
        /// </sumary>
        private bool MunicipalityResidence;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMUNRESID() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Municipio de residencia
        /// </sumary>
        /// <param name="PE_MunicipalityResidence">Codigo de municipio</param>
        public RuntimeResult<string> Execute(string PE_MunicipalityResidence)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MunicipalityResidence = PE_MunicipalityResidence;
                this.MunicipalityResidence = FUNC_MunicipalityResidence();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_MunicipalityResidence()
        {
            return PE_MunicipalityResidence.ToString().Length == 5;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(MunicipalityResidence == true)) NonValidMessages.Add($"14| Error en variable 14. Valor no valido en Municipio de residencia debe ser de 5 caracteres y un codigo valido del DANE");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Metilprednisolona (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAMETHYLPR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.31
        /// </sumary>
        private long PE_MethylprednisoloneLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMETHYLPR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Metilprednisolona (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_MethylprednisoloneLastCycle">variable 66.31</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_MethylprednisoloneLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MethylprednisoloneLastCycle = PE_MethylprednisoloneLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneLastCycle) || PE_MethylprednisoloneLastCycle == 98 || PE_MethylprednisoloneLastCycle == 55)) NonValidMessages.Add($"137| Error en variable 66.31. Valor no valido en “ En este último esquema el usuario recibió Metilprednisolona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"137| Error en variable 66.31. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MethylprednisoloneLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MethylprednisoloneLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MethylprednisoloneLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"137| Error en variable 66.31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    ///  En este primer ciclo el usuario recibió Metilprednisolona (en uso intratecal o manejo exclusivo de hematolinfaticos contabilizar como antineoplasico en la variable 53) 
    /// </sumary> 
    public sealed class RUL_CAMETHYLFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_MethylprednisoloneFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMETHYLFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        ///  En este primer ciclo el usuario recibió Metilprednisolona (en uso intratecal o manejo exclusivo de hematolinfaticos contabilizar como antineoplasico en la variable 53) 
        /// </sumary>
        /// <param name="PE_MethylprednisoloneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_MethylprednisoloneFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MethylprednisoloneFirstCycle = PE_MethylprednisoloneFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneFirstCycle) || PE_MethylprednisoloneFirstCycle == 98 || PE_MethylprednisoloneFirstCycle == 55)) NonValidMessages.Add($"92| Error en variable 53.31. Valor no valido en “En este primer ciclo el usuario recibió Metilprednisolona (en uso intratecal o manejo exclusivo de hematolinfaticos contabilizar como antineoplasico en la variable 53)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"92| Error en variable 53.31. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MethylprednisoloneFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethylprednisoloneFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethylprednisoloneFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethylprednisoloneFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"92| Error en variable 53.31. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Metotrexato
    /// </sumary> 
    public sealed class RUL_CAMETHOTRE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.19
        /// </sumary>
        private long PE_MethotrexateLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMETHOTRE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Metotrexato
        /// </sumary>
        /// <param name="PE_MethotrexateLastCycle">variable 66.19</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_MethotrexateLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MethotrexateLastCycle = PE_MethotrexateLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateLastCycle) || PE_MethotrexateLastCycle == 55 || PE_MethotrexateLastCycle == 98)) NonValidMessages.Add($"125| Error en variable 66.19. Valor no valido en “En este último esquema el usuario recibió Metotrexato”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"125| Error en variable 66.19. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MethotrexateLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MethotrexateLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"125| Error en variable 66.19. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_MethotrexateLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Metotrexato
    /// </sumary> 
    public sealed class RUL_CAMETHOFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_MethotrexateFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMETHOFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Metotrexato
        /// </sumary>
        /// <param name="PE_MethotrexateFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_MethotrexateFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MethotrexateFirstCycle = PE_MethotrexateFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateFirstCycle) || PE_MethotrexateFirstCycle == 98 || PE_MethotrexateFirstCycle == 55)) NonValidMessages.Add($"80| Error en variable 53.19. Valor no valido en “En este primer o único esquema el usuario recibió Metotrexato”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"80| Error en variable 53.19. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MethotrexateFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethotrexateFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethotrexateFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MethotrexateFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"80| Error en variable 53.19. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Mercaptopurina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAMERCAPTO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.18
        /// </sumary>
        private long PE_MercaptopurineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMERCAPTO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Mercaptopurina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_MercaptopurineLastCycle">variable 66.18</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_MercaptopurineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MercaptopurineLastCycle = PE_MercaptopurineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineLastCycle) || PE_MercaptopurineLastCycle == 55 || PE_MercaptopurineLastCycle == 98)) NonValidMessages.Add($"124| Error en variable 66.18. Valor no valido en “En este último esquema el usuario recibió Mercaptopurina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"124| Error en variable 66.18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MercaptopurineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MercaptopurineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"124| Error en variable 66.18. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_MercaptopurineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Mercaptopurina
    /// </sumary> 
    public sealed class RUL_CAMERCAPFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_MercaptopurineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMERCAPFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Mercaptopurina
        /// </sumary>
        /// <param name="PE_MercaptopurineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_MercaptopurineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MercaptopurineFirstCycle = PE_MercaptopurineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineFirstCycle) || PE_MercaptopurineFirstCycle == 98 || PE_MercaptopurineFirstCycle == 55)) NonValidMessages.Add($"79| Error en variable 53.18. Valor no valido en “En este primer o único esquema el usuario recibió Mercaptopurina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"79| Error en variable 53.18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MercaptopurineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MercaptopurineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MercaptopurineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MercaptopurineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"79| Error en variable 53.18. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Melfalan (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAMELFALAN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.17
        /// </sumary>
        private long PE_MelfalanLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMELFALAN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Melfalan (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_MelfalanLastCycle">variable 66.17</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_MelfalanLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MelfalanLastCycle = PE_MelfalanLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MelfalanLastCycle) || PE_MelfalanLastCycle == 55 || PE_MelfalanLastCycle == 98)) NonValidMessages.Add($"123| Error en variable 66.17. Valor no valido en “En este último esquema el usuario recibió Melfalan”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"123| Error en variable 66.17. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MelfalanLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MelfalanLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MelfalanLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_MelfalanLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"123| Error en variable 66.17. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_MelfalanLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Melfalan
    /// </sumary> 
    public sealed class RUL_CAMELFAFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_MelfalanFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMELFAFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Melfalan
        /// </sumary>
        /// <param name="PE_MelfalanFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_MelfalanFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MelfalanFirstCycle = PE_MelfalanFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_MelfalanFirstCycle) || PE_MelfalanFirstCycle == 98 || PE_MelfalanFirstCycle == 55)) NonValidMessages.Add($"78| Error en variable 53.17. Valor no valido en “En este primer o único esquema el usuario recibió Melfalan”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"78| Error en variable 53.17. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_MelfalanFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_MelfalanFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MelfalanFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MelfalanFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_MelfalanFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"78| Error en variable 53.17. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista, otra especialida
    /// </sumary> 
    public sealed class RUL_CAMEDSPECI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.3
        /// </sumary>
        private long PE_ConsultationSpecialistOtherSpecialty;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMEDSPECI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista, otra especialida
        /// </sumary>
        /// <param name="PE_ConsultationSpecialistOtherSpecialty">variable 114.3</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ConsultationSpecialistOtherSpecialty, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationSpecialistOtherSpecialty = PE_ConsultationSpecialistOtherSpecialty;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistOtherSpecialty) || PE_ConsultationSpecialistOtherSpecialty == 55)) NonValidMessages.Add($"189| Error en variable 114.3. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico especialista, otra especialidad”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"189| Error en variable 114.3. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistOtherSpecialty)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationSpecialistOtherSpecialty)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationSpecialistOtherSpecialty == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"189| Error en variable 114.3. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Objetivo (o intención) del tratamiento médico inicial (al diagnóstico)
    /// </sumary> 
    public sealed class RUL_CAMEDITRET
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 40
        /// </sumary>
        private long PE_ObjectiveMedicalTreatment;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMEDITRET() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Objetivo (o intención) del tratamiento médico inicial (al diagnóstico)
        /// </sumary>
        /// <param name="PE_ObjectiveMedicalTreatment">Variable 40</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(long PE_ObjectiveMedicalTreatment, string PE_RegimeType, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ObjectiveMedicalTreatment = PE_ObjectiveMedicalTreatment;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_ObjectiveMedicalTreatment) || PE_ObjectiveMedicalTreatment == 55 || PE_ObjectiveMedicalTreatment == 99)) NonValidMessages.Add($"40| Error en variable 40. Valor no valido en Objetivo (o intencion) del tratamiento medico inicial (al diagnostico). ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"40| Error en variable 40. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"40|Error en variable 40. La fecha de Diagnostic-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_ObjectiveMedicalTreatment)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ObjectiveMedicalTreatment)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ObjectiveMedicalTreatment)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_ObjectiveMedicalTreatment)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObjectiveMedicalTreatment == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObjectiveMedicalTreatment == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObjectiveMedicalTreatment == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"40| Error en variable 40. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_ObjectiveMedicalTreatment == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"40| Error en variable 40. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_ObjectiveMedicalTreatment == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObjectiveMedicalTreatment == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"40|Error en variable 40. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ObjectiveMedicalTreatment == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"40|Error en variable 40. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Objetivo de la intervención médica durante el periodo de reporte.
    /// </sumary> 
    public sealed class RUL_CAMEDINTER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 41
        /// </sumary>
        private long PE_ObjectiveMedicalIntervention;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMEDINTER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Objetivo de la intervención médica durante el periodo de reporte.
        /// </sumary>
        /// <param name="PE_ObjectiveMedicalIntervention">Variable 41</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ObjectiveMedicalIntervention, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ObjectiveMedicalIntervention = PE_ObjectiveMedicalIntervention;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 99 }).Contains(PE_ObjectiveMedicalIntervention) || PE_ObjectiveMedicalIntervention == 55)) NonValidMessages.Add($"41| Error en variable 41. Valor no valido en Objetivo de la intervencion medica durante el periodo de reporte.. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"41| Error en variable 41. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 99 }).Contains(PE_ObjectiveMedicalIntervention)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 99 }).Contains(PE_ObjectiveMedicalIntervention)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObjectiveMedicalIntervention == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"41| Error en variable 41. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico general
    /// </sumary> 
    public sealed class RUL_CAMEDGENER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 114.4
        /// </sumary>
        private long PE_ConsultationGeneralPractitioner;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMEDGENER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico general
        /// </sumary>
        /// <param name="PE_ConsultationGeneralPractitioner">variable 114.4</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ConsultationGeneralPractitioner, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsultationGeneralPractitioner = PE_ConsultationGeneralPractitioner;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ConsultationGeneralPractitioner) || PE_ConsultationGeneralPractitioner == 55)) NonValidMessages.Add($"190| Error en variable 114.4. Valor no valido en “El usuario recibió consulta o procedimiento de cuidado paliativo en este corte, por médico general”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"190| Error en variable 114.4. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationGeneralPractitioner)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ConsultationGeneralPractitioner)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ConsultationGeneralPractitioner == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"190| Error en variable 114.4. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAMACH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.6
        /// </sumary>
        private long PE_MaintenanceChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAMACH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_MaintenanceChemotherapy">variable 46.6</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_MaintenanceChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MaintenanceChemotherapy = PE_MaintenanceChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_MaintenanceChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.6",
    "52"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"52|Valor no valido en 46.6 'El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento  (aplica solo para leucemia linfoide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Clasificación de riesgo leucemias o linfomas, y sólidos pediátricos
    /// </sumary> 
    public sealed class RUL_CALINFPEDI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 38
        /// </sumary>
        private long PE_RiskLymphomasPediatricSolids;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CALINFPEDI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Clasificación de riesgo leucemias o linfomas, y sólidos pediátricos
        /// </sumary>
        /// <param name="PE_RiskLymphomasPediatricSolids">Variable 38</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(long PE_RiskLymphomasPediatricSolids, string PE_RegimeType, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_RiskLymphomasPediatricSolids = PE_RiskLymphomasPediatricSolids;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids) || PE_RiskLymphomasPediatricSolids == 55 || PE_RiskLymphomasPediatricSolids == 93 || PE_RiskLymphomasPediatricSolids == 99)) NonValidMessages.Add($"38| Error en variable 38. Valor no valido en Clasificacion de riesgo leucemias o linfomas, y solidos pediatricos. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"38| Error en variable 38. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01) || PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"38|Error en variable 38. La fecha de Diagnostic-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 97, 98 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38| Error en variable 38. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38| Error en variable 38. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38| Error en variable 38. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_RiskLymphomasPediatricSolids == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_RiskLymphomasPediatricSolids == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"38|Error en variable 38. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de radioterapia aplicada en el último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CALASTRADI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 99
        /// </sumary>
        private long PE_LastRadiotherapyType;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CALASTRADI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de radioterapia aplicada en el último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_LastRadiotherapyType">variable 99</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_LastRadiotherapyType, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_LastRadiotherapyType = PE_LastRadiotherapyType;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_LastRadiotherapyType >= 1 && PE_LastRadiotherapyType <= 7 || PE_LastRadiotherapyType == 55 || PE_LastRadiotherapyType == 98)) NonValidMessages.Add($"171| Error en variable 99. Valor no valido en “Tipo de radioterapia aplicada en el último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "E", "P" }).Contains(PE_RegimeType))) NonValidMessages.Add($"171| Error en variable 99. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"171| Error en variable 99. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_LastRadiotherapyType >= 1 && PE_LastRadiotherapyType <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType >= 1 && PE_LastRadiotherapyType <= 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType >= 1 && PE_LastRadiotherapyType <= 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType >= 1 && PE_LastRadiotherapyType <= 7) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType == 55) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"171| Error en variable 99. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_LastRadiotherapyType == 55) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"171| Error en variable 99. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_LastRadiotherapyType == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_LastRadiotherapyType == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"171|Error en variable 99. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((PE_LastRadiotherapyType == 98) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"171|Error en variable 99. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS2 que suministra la radioterapia
    /// </sumary> 
    public sealed class RUL_CAIPSTWORA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSTwoRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSTWORA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS2 que suministra la radioterapia
        /// </sumary>
        /// <param name="PE_IPSTwoRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSTwoRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSTwoRadiotherapy = PE_IPSTwoRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSTwoRadiotherapy.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.");
            if (!(PE_IPSTwoRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy)) || PE_IPSTwoRadiotherapy == "55")) NonValidMessages.Add($"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"165| Error en variable 93. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"165| Error en variable 93. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165|Error en variable 93. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165|Error en variable 93. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Código de la IPS2 que suministra la radioterapia de este primer o único esquema:” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"165| Error en variable 93. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS2 que suministra la radioterapia
    /// </sumary> 
    public sealed class RUL_CAIPSTWOLA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSTwoLastRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSTWOLA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS2 que suministra la radioterapia
        /// </sumary>
        /// <param name="PE_IPSTwoLastRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSTwoLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSTwoLastRadiotherapy = PE_IPSTwoLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSTwoLastRadiotherapy.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!(PE_IPSTwoLastRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy)) || PE_IPSTwoLastRadiotherapy == "55")) NonValidMessages.Add($"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"174| Error en variable 102. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"174| Error en variable 102. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174|Error en variable 102. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174|Error en variable 102. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTwoLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Código de la IPS2 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTwoLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"174| Error en variable 102. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS que realizó este trasplante
    /// </sumary> 
    public sealed class RUL_CAIPSTRANS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSTransplant;
        /// <sumary>
        /// V106
        /// </sumary>
        private long PE_TransplantProgenitorCells;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSTRANS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS que realizó este trasplante
        /// </sumary>
        /// <param name="PE_IPSTransplant">Codigo de habilitacion</param>
        /// <param name="PE_TransplantProgenitorCells">V106</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_IPSTransplant, long PE_TransplantProgenitorCells, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSTransplant = PE_IPSTransplant;
                this.PE_TransplantProgenitorCells = PE_TransplantProgenitorCells;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSTransplant.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”.");
            if (!(PE_IPSTransplant == "98" || PE_IPSTransplant == "55" || !(new string[] { "98", "55" }.Contains(PE_IPSTransplant)))) NonValidMessages.Add($"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”.");
            if (!(PE_TransplantProgenitorCells == 98 || (new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells))) NonValidMessages.Add($"182| Error en variable 110. Valor no valido en “¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?”-variable (106).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"182| Error en variable 110. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSTransplant == "98") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "98") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "55") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "55") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSTransplant == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "98") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "98") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182|Error en variable 110. Si registro 98 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182|Error en variable 110. Si registro 98 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "55") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "55") && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSTransplant == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSTransplant))) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"182| Error en variable 110. Valor no valido en “Código de la IPS que realizó este trasplante”. se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS que realizó cirugía reconstructiva
    /// </sumary> 
    public sealed class RUL_CAIPSTEREC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSReconstructiveSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSTEREC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS que realizó cirugía reconstructiva
        /// </sumary>
        /// <param name="PE_IPSReconstructiveSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSReconstructiveSurgery, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSReconstructiveSurgery = PE_IPSReconstructiveSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSReconstructiveSurgery.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.");
            if (!(PE_IPSReconstructiveSurgery == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSReconstructiveSurgery)) || PE_IPSReconstructiveSurgery == "55")) NonValidMessages.Add($"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"185| Error en variable 113. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSReconstructiveSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSReconstructiveSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSReconstructiveSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSReconstructiveSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSReconstructiveSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSReconstructiveSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSReconstructiveSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSReconstructiveSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSReconstructiveSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSReconstructiveSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Código de la IPS que realizó cirugía reconstructiva”. se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSReconstructiveSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"185| Error en variable 113. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de IPS que suministran este primer o único esquema de radioterapia
    /// </sumary> 
    public sealed class RUL_CAIPSRADIO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSRADIO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de IPS que suministran este primer o único esquema de radioterapia
        /// </sumary>
        /// <param name="PE_IPSRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSRadiotherapy = PE_IPSRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSRadiotherapy.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.");
            if (!(PE_IPSRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy)) || PE_IPSRadiotherapy == "55")) NonValidMessages.Add($"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"163| Error en variable 91. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"163| Error en variable 91. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163|Error en variable 91. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163|Error en variable 91. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"163| Error en variable 91. Valor no valido en “Número de IPS que suministran este primer o único esquema de radioterapia” permite máximo 2 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS donde recibió la primera valoración de psiquiatría en este corte
    /// </sumary> 
    public sealed class RUL_CAIPSPSYCH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSPsychiatry;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSPSYCH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS donde recibió la primera valoración de psiquiatría en este corte
        /// </sumary>
        /// <param name="PE_IPSPsychiatry">Codigo de habilitacion</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSPsychiatry, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSPsychiatry = PE_IPSPsychiatry;
                this.Pe_RegimeType = Pe_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSPsychiatry.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.");
            if (!(PE_IPSPsychiatry == "98" || PE_IPSPsychiatry == "55" || !(new string[] { "98", "55" }.Contains(PE_IPSPsychiatry)))) NonValidMessages.Add($"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"197| Error en variable 119. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSPsychiatry == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPsychiatry == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPsychiatry == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPsychiatry == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPsychiatry))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPsychiatry))) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPsychiatry == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPsychiatry == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPsychiatry == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPsychiatry == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPsychiatry))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"197| Error en variable 119. Valor no valido en Código de la IPS donde recibió la primera valoración de psiquiatría en este corte”.se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS donde recibió la primera valoración de cuidado Paliativo
    /// </sumary> 
    public sealed class RUL_CAIPSPALLI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSPalliativeCare;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSPALLI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS donde recibió la primera valoración de cuidado Paliativo
        /// </sumary>
        /// <param name="PE_IPSPalliativeCare">Codigo de habilitacion</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSPalliativeCare, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSPalliativeCare = PE_IPSPalliativeCare;
                this.Pe_RegimeType = Pe_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSPalliativeCare.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.");
            if (!(PE_IPSPalliativeCare == "98" || PE_IPSPalliativeCare == "55" || !(new string[] { "98", "55" }.Contains(PE_IPSPalliativeCare)))) NonValidMessages.Add($"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"194| Error en variable 116. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSPalliativeCare == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPalliativeCare == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPalliativeCare == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSPalliativeCare == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPalliativeCare))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPalliativeCare))) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPalliativeCare == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPalliativeCare == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPalliativeCare == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSPalliativeCare == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSPalliativeCare))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"194| Error en variable 116. Valor no valido en “Código de la IPS donde recibió la primera valoración de cuidado Paliativo”.se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS1 que suministra la radioterapia. 
    /// </sumary> 
    public sealed class RUL_CAIPSONERA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSOneRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSONERA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS1 que suministra la radioterapia. 
        /// </sumary>
        /// <param name="PE_IPSOneRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSOneRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSOneRadiotherapy = PE_IPSOneRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSOneRadiotherapy.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.");
            if (!(PE_IPSOneRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy)) || PE_IPSOneRadiotherapy == "55")) NonValidMessages.Add($"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"164| Error en variable 92. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"164| Error en variable 92. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164|Error en variable 92. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "98") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164|Error en variable 92. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneRadiotherapy))) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Código de la IPS1 que suministra la radioterapia.” Solicita 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneRadiotherapy == "55") && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"164| Error en variable 92. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS1 que suministra la radioterapia
    /// </sumary> 
    public sealed class RUL_CAIPSONELA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSOneLastRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSONELA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS1 que suministra la radioterapia
        /// </sumary>
        /// <param name="PE_IPSOneLastRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSOneLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSOneLastRadiotherapy = PE_IPSOneLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSOneLastRadiotherapy.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!(PE_IPSOneLastRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy)) || PE_IPSOneLastRadiotherapy == "55")) NonValidMessages.Add($"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"173| Error en variable 101. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"173| Error en variable 101. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173|Error en variable 101. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173|Error en variable 101. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSOneLastRadiotherapy))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Código de la IPS1 que suministra último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSOneLastRadiotherapy == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"173| Error en variable 101. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS donde recibió la valoración por nutrición, en este corte
    /// </sumary> 
    public sealed class RUL_CAIPSNUTRI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSNutrition;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSNUTRI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS donde recibió la valoración por nutrición, en este corte
        /// </sumary>
        /// <param name="PE_IPSNutrition">Codigo de habilitacion</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSNutrition, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSNutrition = PE_IPSNutrition;
                this.Pe_RegimeType = Pe_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSNutrition.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.");
            if (!(PE_IPSNutrition == "98" || PE_IPSNutrition == "55" || !(new string[] { "98", "55" }.Contains(PE_IPSNutrition)))) NonValidMessages.Add($"200| Error en variable 122. Valor no valido en  “Código de la IPS donde recibió la valoración por nutrición, en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"200| Error en variable 122. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSNutrition == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSNutrition == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSNutrition == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSNutrition == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSNutrition))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSNutrition))) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSNutrition == "98") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSNutrition == "98") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSNutrition == "55") && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSNutrition == "55") && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSNutrition))) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"200| Error en variable 122. Valor no valido en “Código de la IPS donde recibió la valoración por nutrición, en este corte”. Se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de IPS que suministran este último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAIPSLASTR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSLastRadiotherapy;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSLASTR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de IPS que suministran este último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_IPSLastRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(string PE_IPSLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSLastRadiotherapy = PE_IPSLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSLastRadiotherapy.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!(PE_IPSLastRadiotherapy == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy)) || PE_IPSLastRadiotherapy == "55")) NonValidMessages.Add($"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "E", "P" }).Contains(PE_RegimeType))) NonValidMessages.Add($"172| Error en variable 100. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"172| Error en variable 100. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172|Error en variable 100. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172|Error en variable 100. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "98") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastRadiotherapy))) && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastRadiotherapy == "55") && ((new string[] { "N", "E", "P" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"172| Error en variable 100. Valor no valido en “Número de IPS que suministran este último esquema de cualquier tipo de radioterapia en el periodo de reporte actual” se solicita máximo 2 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de IPS que suministran el último ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CAIPSLASTC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSLASTC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de IPS que suministran el último ciclo de este corte
        /// </sumary>
        /// <param name="PE_IPSLastCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSLastCycle = PE_IPSLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSLastCycle.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_IPSLastCycle == "98" || PE_IPSLastCycle == "55" || !(new string[] { "98", "55" }.Contains(PE_IPSLastCycle)))) NonValidMessages.Add($"103| Error en variable 63. Valor no valido en “Número de IPS que suministran el último esquema de este periodo de reporte:”.");
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"103| Error en variable 63. Valor no valido en “Número de IPS que suministran el último esquema de este periodo de reporte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"103| Error en variable 63. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_IPSLastCycle == "98") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_IPSLastCycle == "98") && (LenghtHabilitation == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_IPSLastCycle == "55") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_IPSLastCycle == "55") && (LenghtHabilitation == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"103|Error en variable 63. Si registra 99 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((!(new string[] { "98", "55" }.Contains(PE_IPSLastCycle))) && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de IPS que suministran el primer ciclo o único esquema de quimioterapia o terapia sistemica de este reporte
    /// </sumary> 
    public sealed class RUL_CAIPSFIRST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 50
        /// </sumary>
        private string PE_IPSFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPSFIRST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de IPS que suministran el primer ciclo o único esquema de quimioterapia o terapia sistemica de este reporte
        /// </sumary>
        /// <param name="PE_IPSFirstCycle">Variable 50</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_IPSFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSFirstCycle = PE_IPSFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_IPSFirstCycle.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte”. ");
            if (!(PE_IPSFirstCycle == "55" || PE_IPSFirstCycle == "98" || !(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle)))) NonValidMessages.Add($"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte”. ");
            if (!((new long[] { 1, 55 }).Contains(PE_Chemotherapy) || PE_Chemotherapy == 2 || PE_Chemotherapy == 98)) NonValidMessages.Add($" 58| Error en variable 45. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual?.”-variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"58| Error en variable 50. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 en la variable 45 debe registrar 98 en la variable 50.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 en la variable 45 debe registrar 98 en la variable 50.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 debe registrar 2 O  98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 debe registrar 2 O  98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 en la variable 45 debe registrar 98 en la variable 50.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58|Error en variable 50. Si registro 98 en la variable 45 debe registrar 98 en la variable 50.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_IPSFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"58| Error en variable 50. Valor no valido en “Número de IPS que suministran el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte:”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte
    /// </sumary> 
    public sealed class RUL_CAIPLASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSLastSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V74
        /// </sumary>
        private long PE_Surgeries;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPLASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte
        /// </sumary>
        /// <param name="PE_IPSLastSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Surgeries">V74</param>
        public RuntimeResult<string> Execute(string PE_IPSLastSurgery, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSLastSurgery = PE_IPSLastSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return (PE_IPSLastSurgery.ToString().Length == 12);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.");
            if (!(PE_IPSLastSurgery == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery)) || PE_IPSLastSurgery == "55")) NonValidMessages.Add($"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"154| Error en variable 82. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"154| Error en variable 82. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_IPSLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_IPSLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Código de la IPS que realiza el último de los procedimientos quirúrgicos en este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_IPSLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"154| Error en variable 82. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS que realizó la primera cirugía de este corte
    /// </sumary> 
    public sealed class RUL_CAIPFISU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_IPSFirstSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIPFISU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS que realizó la primera cirugía de este corte
        /// </sumary>
        /// <param name="PE_IPSFirstSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_IPSFirstSurgery, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IPSFirstSurgery = PE_IPSFirstSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_IPSFirstSurgery.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == 12 || LenghtHabilitation != 12)) NonValidMessages.Add($"149| Error en variable 77. Valor no valido en “Código de la IPS que realizó la primera cirugía de este corte”.");
            if (!(PE_IPSFirstSurgery == "98" || !(new string[] { "98", "55" }.Contains(PE_IPSFirstSurgery)) || PE_IPSFirstSurgery == "55")) NonValidMessages.Add($"149| Error en variable 77. Valor no valido en “Código de la IPS que realizó la primera cirugía de este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"149| Error en variable 77. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == 12) && (PE_IPSFirstSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == 12) && (PE_IPSFirstSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "98", "55" }.Contains(PE_IPSFirstSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "98", "55" }.Contains(PE_IPSFirstSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_IPSFirstSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation == 12) && (PE_IPSFirstSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_IPSFirstSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_IPSFirstSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "98", "55" }.Contains(PE_IPSFirstSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"149| Error en variable 77. Valor no valido en “Código de la IPS que realizó la primera cirugía de este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "98", "55" }.Contains(PE_IPSFirstSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"149| Error en variable 77. Valor no valido en “Código de la IPS que realizó la primera cirugía de este corte”.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_IPSFirstSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"149| Error en variable 77. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió quimioterapia intratecal en el último ciclo de este corte?
    /// </sumary> 
    public sealed class RUL_CAINTRATHE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 70
        /// </sumary>
        private long PE_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private long PE_UTLastCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINTRATHE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió quimioterapia intratecal en el último ciclo de este corte?
        /// </sumary>
        /// <param name="PE_IntrathecalChemotherapyLastCycle">variable 70</param>
        /// <param name="PE_UTLastCycle">Ubicación temporal del último ciclo de este corte en relación al manejo oncológico</param>
        public RuntimeResult<string> Execute(long PE_IntrathecalChemotherapyLastCycle, long PE_UTLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IntrathecalChemotherapyLastCycle = PE_IntrathecalChemotherapyLastCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_IntrathecalChemotherapyLastCycle) || PE_IntrathecalChemotherapyLastCycle == 98)) NonValidMessages.Add($"142| Error en variable 70. Valor no valido en “¿Recibió quimioterapia intratecal en el último esquema de este periodo de reporte?:”.");
            if (!((new long[] { 1, 10, 55 }).Contains(PE_UTLastCycle) || (new long[] { 97, 98 }).Contains(PE_UTLastCycle))) NonValidMessages.Add($"142| Error en variable 70. Valor no valido en “Ubicación temporal del último ciclo de este corte en relación al manejo oncológico”-variable (61).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_IntrathecalChemotherapyLastCycle)) && ((new long[] { 1, 10, 55 }).Contains(PE_UTLastCycle)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_IntrathecalChemotherapyLastCycle)) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"142|Error en variable 70. Si registra 1 o 2 debe registrar un dato diferente a 97 y 98 en 'Ubicación temporal del último ciclo de este corte en relación al manejo oncológico' variable 61", this.FileName);
            }
            else if ((PE_IntrathecalChemotherapyLastCycle == 98) && ((new long[] { 1, 10, 55 }).Contains(PE_UTLastCycle)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"144|Error en variable 72. Si registra 98 debe registrar  97 o 98 en 'Ubicación temporal del último ciclo de este corte en relación al manejo oncológico' variable 61", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Interferón Alfa Natural 
    /// </sumary> 
    public sealed class RUL_CAINTERFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_InterferonAlfaNaturalFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINTERFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Interferón Alfa Natural 
        /// </sumary>
        /// <param name="PE_InterferonAlfaNaturalFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_InterferonAlfaNaturalFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InterferonAlfaNaturalFirstCycle = PE_InterferonAlfaNaturalFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalFirstCycle) || PE_InterferonAlfaNaturalFirstCycle == 98 || PE_InterferonAlfaNaturalFirstCycle == 55)) NonValidMessages.Add($"77| Error en variable 53.16. Valor no valido en En este primer o unico esquema el usuario recibio Interferon Alfa Natural.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"77| Error en variable 53.16. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InterferonAlfaNaturalFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InterferonAlfaNaturalFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InterferonAlfaNaturalFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"77| Error en variable 53.16. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Interferón Alfa Natural (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAINTERFER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINTERFER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Interferón Alfa Natural (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_InterferonAlfaNaturalLastCycle">variable 66.16</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_InterferonAlfaNaturalLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InterferonAlfaNaturalLastCycle = PE_InterferonAlfaNaturalLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalLastCycle) || PE_InterferonAlfaNaturalLastCycle == 55 || PE_InterferonAlfaNaturalLastCycle == 98)) NonValidMessages.Add($"122| Error en variable 66.16. Valor no valido en “En este último esquema el usuario recibió Interferón Alfa”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"112| Error en variable 66.16. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_InterferonAlfaNaturalLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_InterferonAlfaNaturalLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_InterferonAlfaNaturalLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"122| Error en variable 66.16. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_InterferonAlfaNaturalLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Intensificación (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAINTENSIF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.3
        /// </sumary>
        private long PE_IntensificationChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINTENSIF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Intensificación (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_IntensificationChemotherapy">variable 46.3</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_IntensificationChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IntensificationChemotherapy = PE_IntensificationChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_IntensificationChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.3",
    "49"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"49|Valor no valido en 46.3 'El usuario recibió en este periodo la fase de quimioterapia denominada Intensificación (aplica solo para leucemia linfoide o mieloide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de consulta inicial con nutrición en este corte
    /// </sumary> 
    public sealed class RUL_CAINITDATE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_InitialDateNutrition;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINITDATE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de consulta inicial con nutrición en este corte
        /// </sumary>
        /// <param name="PE_InitialDateNutrition">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(DateTime PE_InitialDateNutrition, DateTime PE_BirthDate, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitialDateNutrition = PE_InitialDateNutrition;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.Pe_RegimeType = Pe_RegimeType;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_InitialDateNutrition >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_InitialDateNutrition >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_InitialDateNutrition <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_InitialDateNutrition > new DateTime(1900, 01, 01) || PE_InitialDateNutrition == new DateTime(1845, 01, 01) || PE_InitialDateNutrition == new DateTime(1846, 01, 01))) NonValidMessages.Add($"199| Error en variable 121. Valor no valido en “Fecha de consulta inicial con nutrición en este corte”. ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"199|Error en variable 121. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"199|Error en variable 121. Valor no valido en fecha de corte. Variable 134.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. Valor no valido  “ la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. Valor no valido  “ la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. Valor no valido  “ la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. Valor no valido  “ la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199|Error en variable 121. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_InitialDateNutrition == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"199| Error en variable 121. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de ciclos iniciados y administrados en el periodo de reporte, incluyendo el que aún recibe en la fecha de corte.
    /// </sumary> 
    public sealed class RUL_CAINITCYCL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_InitiatedCycles;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINITCYCL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de ciclos iniciados y administrados en el periodo de reporte, incluyendo el que aún recibe en la fecha de corte.
        /// </sumary>
        /// <param name="PE_InitiatedCycles">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        public RuntimeResult<string> Execute(string PE_InitiatedCycles, string PE_RegimeType, long PE_Chemotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitiatedCycles = PE_InitiatedCycles;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_InitiatedCycles.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. ");
            if (!(PE_InitiatedCycles == "55" || PE_InitiatedCycles == "98" || !(new string[] { "55", "98" }.Contains(PE_InitiatedCycles)))) NonValidMessages.Add($"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"55| Error en variable 47. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 1, 55 }).Contains(PE_Chemotherapy) || PE_Chemotherapy == 2 || PE_Chemotherapy == 98)) NonValidMessages.Add($"55| Error en variable 47. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registra 98 en la variable 45 debe registrar 98 en la variable 47. variable (45).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registra 98 en la variable 45 debe registrar 98 en la variable 47. variable (45).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registro 98 en la variable 47 para el numero de ciclos iniciados y administrados en el periodo, debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registro 98 en la variable 47 para el numero de ciclos iniciados y administrados en el periodo, debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registra 98 en la variable 45 debe registrar 98 en la variable 47. variable (45).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Si registra 98 en la variable 45 debe registrar 98 en la variable 47. variable (45).", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_InitiatedCycles == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_InitiatedCycles))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Chemotherapy == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"55| Error en variable 47. Valor no valido en “Número de ciclos iniciados y administrados en el periodo de reporte”. Se solicitan máximo 2 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de inicio del último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAINITALDA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_InitalDateLastRadiotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de finalización de primer o único esquema de radioterapia
        /// </sumary>
        private DateTime PE_EndDateRadiotherapy;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Tipo de Regimen
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Radioterapia
        /// </sumary>
        private long Pe_Radiotherapy;
        /// <sumary>
        /// variable que calcula que la fecha sea mayor a la fecha de nacimiento
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// Variable que calcula que la fecha de corte sea mayor
        /// </sumary>
        private bool VC_CutDate;
        /// <sumary>
        /// Variable que calcula que la fecha sea mayor 
        /// </sumary>
        private bool VC_EndDateRadiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINITALDA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de inicio del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_InitalDateLastRadiotherapy">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_EndDateRadiotherapy">Fecha de finalización de primer o único esquema de radioterapia</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_RegimeType">Tipo de Regimen</param>
        /// <param name="Pe_Radiotherapy">Radioterapia</param>
        public RuntimeResult<string> Execute(DateTime PE_InitalDateLastRadiotherapy, DateTime PE_BirthDate, DateTime PE_EndDateRadiotherapy, DateTime PE_CutDate, string PE_RegimeType, long Pe_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitalDateLastRadiotherapy = PE_InitalDateLastRadiotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_EndDateRadiotherapy = PE_EndDateRadiotherapy;
                this.PE_CutDate = PE_CutDate;
                this.PE_RegimeType = PE_RegimeType;
                this.Pe_Radiotherapy = Pe_Radiotherapy;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CutDate = FUNC_VC_CutDate();
                this.VC_EndDateRadiotherapy = FUNC_VC_EndDateRadiotherapy();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_InitalDateLastRadiotherapy >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutDate()
        {
            return (PE_InitalDateLastRadiotherapy <= PE_CutDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateRadiotherapy()
        {
            return (PE_InitalDateLastRadiotherapy >= PE_EndDateRadiotherapy);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01) || PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01) || PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01))) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!(Pe_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy))) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");
            if (!(VC_CutDate == true || VC_CutDate != true)) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”.");
            if (!(VC_EndDateRadiotherapy == true || VC_EndDateRadiotherapy != true)) NonValidMessages.Add($"169| Error en variable 97. Valor no valido en “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de finalización de primer o único esquema de radioterapia, validar variable 97 y variable 94", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de finalización de primer o único esquema de radioterapia, validar variable 97 y variable 94", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de finalización de primer o único esquema de radioterapia, validar variable 97 y variable 94", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de finalización de primer o único esquema de radioterapia, validar variable 97 y variable 94", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97 La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. La Fecha de inicio del último esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Pe_Radiotherapy == 98) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate == true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate == true) && (VC_EndDateRadiotherapy != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(Pe_Radiotherapy)) && (VC_CutDate != true) && (VC_BirthDate != true) && (VC_EndDateRadiotherapy == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"169|Error en variable 97. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Inducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAINDUCTIO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.2
        /// </sumary>
        private long PE_InductionChemotherapy;
        /// <sumary>
        /// variable 46.2
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// MR
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// V46.2
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAINDUCTIO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Inducción (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_InductionChemotherapy">variable 46.2</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46.2</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_InductionChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InductionChemotherapy = PE_InductionChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_InductionChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.2",
    "48"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"48|Valor no valido en 46.2 'El usuario recibió en este periodo la fase de quimioterapia denominada Inducción (aplica solo para leucemia linfoide o mieloide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAIMATINIB
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.15
        /// </sumary>
        private long PE_ImatinibLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIMATINIB() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_ImatinibLastCycle">variable 66.15</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ImatinibLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ImatinibLastCycle = PE_ImatinibLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ImatinibLastCycle) || PE_ImatinibLastCycle == 55 || PE_ImatinibLastCycle == 98)) NonValidMessages.Add($"121| Error en variable 66.15. Valor no valido en “En este último esquema el usuario recibió Imatinib”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"121| Error en variable 66.15. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ImatinibLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ImatinibLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ImatinibLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ImatinibLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"121| Error en variable 66.15. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ImatinibLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Imatinib 
    /// </sumary> 
    public sealed class RUL_CAIMATIFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_ImatinibFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIMATIFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Imatinib 
        /// </sumary>
        /// <param name="PE_ImatinibFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ImatinibFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ImatinibFirstCycle = PE_ImatinibFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ImatinibFirstCycle) || PE_ImatinibFirstCycle == 98 || PE_ImatinibFirstCycle == 55)) NonValidMessages.Add($"76| Error en variable 53.15. Valor no valido en “En este primer o único esquema el usuario recibió Imatinib”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"76| Error en variable 53.15. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ImatinibFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ImatinibFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ImatinibFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ImatinibFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ImatinibFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"76| Error en variable 53.15. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// codigo unico de identificacion (BDUA -BDEX - PVS)
    /// </sumary> 
    public sealed class RUL_CAIDECODE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo
        /// </sumary>
        private string PE_IDENTIFICATIONCODE;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAIDECODE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// codigo unico de identificacion (BDUA -BDEX - PVS)
        /// </sumary>
        /// <param name="PE_IDENTIFICATIONCODE">Codigo</param>
        public RuntimeResult<string> Execute(string PE_IDENTIFICATIONCODE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IDENTIFICATIONCODE = PE_IDENTIFICATIONCODE;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_IDENTIFICATIONCODE.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"211| Error en variable 133. Valor no valido en “código único de identificación (BDUA -BDEX - PVS)”. Se solicita 2 caracteres");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"211| Error en variable 133. Valor no valido en “código único de identificación (BDUA -BDEX - PVS)”. Se solicita 20 caracteres", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Histología del tumor en muestra de biopsia o quirúrgica
    /// </sumary> 
    public sealed class RUL_CAHISTUMOR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Histología del tumor en muestra de biopsia o quirúrgica
        /// </sumary>
        private long PE_HistologyTumor;
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private long PE_TypeTest;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAHISTUMOR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Histología del tumor en muestra de biopsia o quirúrgica
        /// </sumary>
        /// <param name="PE_HistologyTumor">Histología del tumor en muestra de biopsia o quirúrgica</param>
        /// <param name="PE_TypeTest">Tipo de estudio con el que se realizó el diagnóstico de cáncer</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(long PE_HistologyTumor, long PE_TypeTest, string PE_RegimeType, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HistologyTumor = PE_HistologyTumor;
                this.PE_TypeTest = PE_TypeTest;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24 || PE_HistologyTumor == 98 || PE_HistologyTumor == 99 || PE_HistologyTumor == 55)) NonValidMessages.Add($"27| Error en variable 27. Valor no valido en Histologia del tumor en muestra de biopsia o quirurgica. ");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"27| Error en variable 27. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer-variable 21.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"27| Error en variable 27. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"27|Error en variable 27. La opcion 99 es valida en caso de diagnostico antes de 2015-01-01. Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor >= 1 && PE_HistologyTumor <= 24) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 98) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 98) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 98) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 98) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 98) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. La opción 98 es válida en caso de “No se realizó estudio histopatológico” (que en la variable 21 registro la opción 7).", this.FileName);
            }
            else if ((PE_HistologyTumor == 98) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. La opción 98 es válida en caso de “No se realizó estudio histopatológico” (que en la variable 21 registro la opción 7).", this.FileName);
            }
            else if ((PE_HistologyTumor == 98) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. La opción 98 es válida en caso de “No se realizó estudio histopatológico” (que en la variable 21 registro la opción 7).", this.FileName);
            }
            else if ((PE_HistologyTumor == 98) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. La opción 98 es válida en caso de “No se realizó estudio histopatológico” (que en la variable 21 registro la opción 7).", this.FileName);
            }
            else if ((PE_HistologyTumor == 99) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 99) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27|Error en variable 27. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_HistologyTumor == 99) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 99) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27|Error en variable 27. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_HistologyTumor == 99) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 99) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27|Error en variable 27. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_HistologyTumor == 99) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 99) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27|Error en variable 27. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_HistologyTumor == 55) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 55) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 55) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_HistologyTumor == 55) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_HistologyTumor == 55) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 55) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistologyTumor == 55) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"27| Error en variable 27. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tiene antecedente de otro cáncer primario (es decir, tiene o tuvo otro tumor maligno diferente al que está notificando)
    /// </sumary> 
    public sealed class RUL_CAHICA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 42
        /// </sumary>
        private long PE_HistorialCancer;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime CA_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAHICA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tiene antecedente de otro cáncer primario (es decir, tiene o tuvo otro tumor maligno diferente al que está notificando)
        /// </sumary>
        /// <param name="PE_HistorialCancer">Variable 42</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="CA_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(long PE_HistorialCancer, string PE_RegimeType, DateTime CA_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HistorialCancer = PE_HistorialCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.CA_DIAGNOSISDATE = CA_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_HistorialCancer) || PE_HistorialCancer == 55 || PE_HistorialCancer == 99)) NonValidMessages.Add($"42| Error en variable 42. Valor no valido en Tiene antecedente de otro cancer primario (es decir, tiene o tuvo otro tumor maligno diferente al que esta notificando). ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"42| Error en variable 42. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || CA_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"42|Error en variable 42. La fecha de Diagnostic-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_HistorialCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_HistorialCancer)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_HistorialCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_HistorialCancer)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistorialCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistorialCancer == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistorialCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"42| Error en variable 42. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_HistorialCancer == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"42| Error en variable 42. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_HistorialCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HistorialCancer == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"42|Error en variable 42. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_HistorialCancer == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (CA_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"42|Error en variable 42. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
    /// </sumary> 
    public sealed class RUL_CAHEMOTHER98
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// V46.1
        /// </sumary>
        private long PE_PrephaseChemotherapy;
        /// <sumary>
        /// 46.2
        /// </sumary>
        private long PE_InductionChemotherapy;
        /// <sumary>
        /// 46.3
        /// </sumary>
        private long PE_IntensificationChemotherapy;
        /// <sumary>
        /// 46.4
        /// </sumary>
        private long PE_ConsolidationChemotherapy;
        /// <sumary>
        /// 46.5
        /// </sumary>
        private long PE_ReinductionChemotherapy;
        /// <sumary>
        /// 46.6
        /// </sumary>
        private long PE_MaintenanceChemotherapy;
        /// <sumary>
        /// 46.7
        /// </sumary>
        private long PE_FinalMaintenanceChemotherapy;
        /// <sumary>
        /// 46.8
        /// </sumary>
        private long PE_OtherChemotherapy;
        /// <sumary>
        /// 47
        /// </sumary>
        private string PE_InitiatedCycles;
        /// <sumary>
        /// 48
        /// </sumary>
        private long PE_UbicationFirstCycle;
        /// <sumary>
        /// 49
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// 50
        /// </sumary>
        private string PE_IPSFirstCycle;
        /// <sumary>
        /// 51
        /// </sumary>
        private string PE_CodeIPSOneFirstCycle;
        /// <sumary>
        /// 52
        /// </sumary>
        private string PE_CodeIPSTwoFirstCycle;
        /// <sumary>
        /// 53
        /// </sumary>
        private string PE_AntineoplasticDrugsFirstCycle;
        /// <sumary>
        /// 53.1
        /// </sumary>
        private long PE_BleomycinFirstCycle;
        /// <sumary>
        /// 53.2
        /// </sumary>
        private long PE_BusulfanFirstCycle;
        /// <sumary>
        /// 53.3
        /// </sumary>
        private long PE_CapecitabineFirstCycle;
        /// <sumary>
        /// 53.4
        /// </sumary>
        private long PE_CarboplatinFirstCycle;
        /// <sumary>
        /// 53.5
        /// </sumary>
        private long PE_CyclophosphamideFirstCycle;
        /// <sumary>
        /// 53.6
        /// </sumary>
        private long PE_CiclosporinFirstCycle;
        /// <sumary>
        /// 53.7
        /// </sumary>
        private long PE_CisplatinFirstCycle;
        /// <sumary>
        /// 53.8
        /// </sumary>
        private long PE_CytarabineFirstCycle;
        /// <sumary>
        /// 53.9
        /// </sumary>
        private long PE_ChlorambucilFirstCycle;
        /// <sumary>
        /// 53.10
        /// </sumary>
        private long PE_DacarbazineFirstCycle;
        /// <sumary>
        /// 53.11
        /// </sumary>
        private long PE_DoxorubicinFirstCycle;
        /// <sumary>
        /// 53.12
        /// </sumary>
        private long PE_EtoposideFirstCycle;
        /// <sumary>
        /// 53.13
        /// </sumary>
        private long PE_FluorouracilFirstCycle;
        /// <sumary>
        /// 53.14
        /// </sumary>
        private long PE_GemcitabineFirstCycle;
        /// <sumary>
        /// 53.15
        /// </sumary>
        private long PE_ImatinibFirstCycle;
        /// <sumary>
        /// 53.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalFirstCycle;
        /// <sumary>
        /// 53.17
        /// </sumary>
        private long PE_MelfalanFirstCycle;
        /// <sumary>
        /// 53.18
        /// </sumary>
        private long PE_MercaptopurineFirstCycle;
        /// <sumary>
        /// 53.19
        /// </sumary>
        private long PE_MethotrexateFirstCycle;
        /// <sumary>
        /// 53.20
        /// </sumary>
        private long PE_PaclitaxelFirstCycle;
        /// <sumary>
        /// 53.21
        /// </sumary>
        private long PE_PegfilgrastimFirstCycle;
        /// <sumary>
        /// 53.22
        /// </sumary>
        private long PE_ProcarbazineFirstCycle;
        /// <sumary>
        /// 53.23
        /// </sumary>
        private long PE_RituximabFirstCycle;
        /// <sumary>
        /// 53.24
        /// </sumary>
        private long PE_TamoxifenFirstCycle;
        /// <sumary>
        /// 53.25
        /// </sumary>
        private long PE_ThioguanineFirstCycle;
        /// <sumary>
        /// 53.26
        /// </sumary>
        private long PE_TrastuzumabFirstCycle;
        /// <sumary>
        /// 53.27
        /// </sumary>
        private long PE_VinblastineFirstCycle;
        /// <sumary>
        /// 53.28
        /// </sumary>
        private long PE_VincristineFirstCycle;
        /// <sumary>
        /// 53.29
        /// </sumary>
        private long PE_PrednisoneFirstCycle;
        /// <sumary>
        /// 53.30
        /// </sumary>
        private long PE_PrednisoloneFirstCycle;
        /// <sumary>
        /// 53.31
        /// </sumary>
        private long PE_MethylprednisoloneFirstCycle;
        /// <sumary>
        /// 53.32
        /// </sumary>
        private long PE_DexamethasoneFirstCycle;
        /// <sumary>
        /// 54
        /// </sumary>
        private string PE_DrugPOSOneFirstCycle;
        /// <sumary>
        /// 55
        /// </sumary>
        private string PE_DrugPOSTwoFirstCycle;
        /// <sumary>
        /// 56
        /// </sumary>
        private string PE_DrugPOSThreeFirstCycle;
        /// <sumary>
        /// 57
        /// </sumary>
        private long PE_IntrathecalChemotherapyFirstCycle;
        /// <sumary>
        /// 58
        /// </sumary>
        private DateTime PE_EndDateFirstCycle;
        /// <sumary>
        /// 59
        /// </sumary>
        private long PE_CurrentFeaturesFirstCycle;
        /// <sumary>
        /// 60
        /// </sumary>
        private long PE_ReasonEndingFirstCycle;
        /// <sumary>
        /// 61
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// 62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// 63
        /// </sumary>
        private string PE_IPSLastCycle;
        /// <sumary>
        /// 64
        /// </sumary>
        private string PE_CodeIPSOneLastCycle;
        /// <sumary>
        /// 65
        /// </sumary>
        private string PE_CodeIPSTwoLastCycle;
        /// <sumary>
        /// 66
        /// </sumary>
        private string PE_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private long PE_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private long PE_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private long PE_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private long PE_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private long PE_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private long PE_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private long PE_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private long PE_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private long PE_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private long PE_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private long PE_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private long PE_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private long PE_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private long PE_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private long PE_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private long PE_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private long PE_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_MethotrexateLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private long PE_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private long PE_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private long PE_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private long PE_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private long PE_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private long PE_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private long PE_VinblastineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private long PE_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private long PE_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private long PE_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private long PE_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private string PE_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private long PE_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private long PE_ReasonEndingLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private long PE_VincristineLastCycle;
        /// <sumary>
        /// V46
        /// </sumary>
        private bool VC_CountPhaseChemotherapy;
        /// <sumary>
        /// 46.1
        /// </sumary>
        private bool VC_PrephaseChemotherapy;
        /// <sumary>
        /// 46.2
        /// </sumary>
        private bool VC_InductionChemotherapy;
        /// <sumary>
        /// 46.3
        /// </sumary>
        private bool VC_IntensificationChemotherapy;
        /// <sumary>
        /// 46.4
        /// </sumary>
        private bool VC_ConsolidationChemotherapy;
        /// <sumary>
        /// 46.5
        /// </sumary>
        private bool VC_ReinductionChemotherapy;
        /// <sumary>
        /// 46.6
        /// </sumary>
        private bool VC_MaintenanceChemotherapy;
        /// <sumary>
        /// 46.7
        /// </sumary>
        private bool VC_FinalMaintenanceChemotherapy;
        /// <sumary>
        /// 46.8
        /// </sumary>
        private bool VC_OtherChemotherapy;
        /// <sumary>
        /// 47
        /// </sumary>
        private bool VC_InitiatedCycles;
        /// <sumary>
        /// 48
        /// </sumary>
        private bool VC_UbicationFirstCycle;
        /// <sumary>
        /// 49
        /// </sumary>
        private bool VC_DateFirstCycle;
        /// <sumary>
        /// 50
        /// </sumary>
        private bool VC_IPSFirstCycle;
        /// <sumary>
        /// 51
        /// </sumary>
        private bool VC_CodeIPSOneFirstCycle;
        /// <sumary>
        /// 52
        /// </sumary>
        private bool VC_CodeIPSTwoFirstCycle;
        /// <sumary>
        /// 53
        /// </sumary>
        private bool VC_AntineoplasticDrugsFirstCycle;
        /// <sumary>
        /// 53.1
        /// </sumary>
        private bool VC_BleomycinFirstCycle;
        /// <sumary>
        /// 53.2
        /// </sumary>
        private bool VC_BusulfanFirstCycle;
        /// <sumary>
        /// 53.3
        /// </sumary>
        private bool VC_CapecitabineFirstCycle;
        /// <sumary>
        /// 53.4
        /// </sumary>
        private bool VC_CarboplatinFirstCycle;
        /// <sumary>
        /// 53.5
        /// </sumary>
        private bool VC_CyclophosphamideFirstCycle;
        /// <sumary>
        /// 53.6
        /// </sumary>
        private bool VC_CiclosporinFirstCycle;
        /// <sumary>
        /// 53.7
        /// </sumary>
        private bool VC_CisplatinFirstCycle;
        /// <sumary>
        /// 53.8
        /// </sumary>
        private bool VC_CytarabineFirstCycle;
        /// <sumary>
        /// 53.9
        /// </sumary>
        private bool VC_ChlorambucilFirstCycle;
        /// <sumary>
        /// 53.10
        /// </sumary>
        private bool VC_DacarbazineFirstCycle;
        /// <sumary>
        /// 53.11
        /// </sumary>
        private bool VC_DoxorubicinFirstCycle;
        /// <sumary>
        /// 53.12
        /// </sumary>
        private bool VC_EtoposideFirstCycle;
        /// <sumary>
        /// 53.13
        /// </sumary>
        private bool VC_FluorouracilFirstCycle;
        /// <sumary>
        /// 53.14
        /// </sumary>
        private bool VC_GemcitabineFirstCycle;
        /// <sumary>
        /// 53.15
        /// </sumary>
        private bool VC_ImatinibFirstCycle;
        /// <sumary>
        /// 53.16
        /// </sumary>
        private bool VC_InterferonAlfaNaturalFirstCycle;
        /// <sumary>
        /// 53.17
        /// </sumary>
        private bool VC_MelfalanFirstCycle;
        /// <sumary>
        /// 53.18
        /// </sumary>
        private bool VC_MercaptopurineFirstCycle;
        /// <sumary>
        /// 53.19
        /// </sumary>
        private bool VC_MethotrexateFirstCycle;
        /// <sumary>
        /// 53.20
        /// </sumary>
        private bool VC_PaclitaxelFirstCycle;
        /// <sumary>
        /// 53.21
        /// </sumary>
        private bool VC_PegfilgrastimFirstCycle;
        /// <sumary>
        /// 53.22
        /// </sumary>
        private bool VC_ProcarbazineFirstCycle;
        /// <sumary>
        /// 53.23
        /// </sumary>
        private bool VC_RituximabFirstCycle;
        /// <sumary>
        /// 53.24
        /// </sumary>
        private bool VC_TamoxifenFirstCycle;
        /// <sumary>
        /// 53.25
        /// </sumary>
        private bool VC_ThioguanineFirstCycle;
        /// <sumary>
        /// 53.26
        /// </sumary>
        private bool VC_TrastuzumabFirstCycle;
        /// <sumary>
        /// 53.27
        /// </sumary>
        private bool VC_VinblastineFirstCycle;
        /// <sumary>
        /// 53.28
        /// </sumary>
        private bool VC_VincristineFirstCycle;
        /// <sumary>
        /// 53.29
        /// </sumary>
        private bool VC_PrednisoneFirstCycle;
        /// <sumary>
        /// 53.30
        /// </sumary>
        private bool VC_PrednisoloneFirstCycle;
        /// <sumary>
        /// 53.31
        /// </sumary>
        private bool VC_MethylprednisoloneFirstCycle;
        /// <sumary>
        /// 53.32
        /// </sumary>
        private bool VC_DexamethasoneFirstCycle;
        /// <sumary>
        /// 54
        /// </sumary>
        private bool VC_DrugPOSOneFirstCycle;
        /// <sumary>
        /// 55
        /// </sumary>
        private bool VC_DrugPOSTwoFirstCycle;
        /// <sumary>
        /// 56
        /// </sumary>
        private bool VC_DrugPOSThreeFirstCycle;
        /// <sumary>
        /// 57
        /// </sumary>
        private bool VC_IntrathecalChemotherapyFirstCycle;
        /// <sumary>
        /// 58
        /// </sumary>
        private bool VC_EndDateFirstCycle;
        /// <sumary>
        /// 59
        /// </sumary>
        private bool VC_CurrentFeaturesFirstCycle;
        /// <sumary>
        /// 60
        /// </sumary>
        private bool VC_ReasonEndingFirstCycle;
        /// <sumary>
        /// 61
        /// </sumary>
        private bool VC_UTLastCycle;
        /// <sumary>
        /// 62
        /// </sumary>
        private bool VC_InitalDateLastCycle;
        /// <sumary>
        /// 63
        /// </sumary>
        private bool VC_IPSLastCycle;
        /// <sumary>
        /// 64
        /// </sumary>
        private bool VC_CodeIPSOneLastCycle;
        /// <sumary>
        /// 65
        /// </sumary>
        private bool VC_CodeIPSTwoLastCycle;
        /// <sumary>
        /// 66
        /// </sumary>
        private bool VC_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private bool VC_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private bool VC_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private bool VC_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private bool VC_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private bool VC_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private bool VC_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private bool VC_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private bool VC_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private bool VC_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private bool VC_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private bool VC_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private bool VC_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private bool VC_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private bool VC_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private bool VC_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private bool VC_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private bool VC_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private bool VC_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.19
        /// </sumary>
        private bool VC_MethotrexateLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private bool VC_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private bool VC_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private bool VC_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private bool VC_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private bool VC_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private bool VC_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private bool VC_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private bool VC_VinblastineLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private bool VC_VincristineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private bool VC_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private bool VC_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private bool VC_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private bool VC_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private bool VC_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private bool VC_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private bool VC_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private bool VC_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private bool VC_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private bool VC_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private bool VC_ReasonEndingLastCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAHEMOTHER98() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
        /// </sumary>
        /// <param name="PE_Chemotherapy">Variable 45</param>
        /// <param name="PE_CountPhaseChemotherapy">V46</param>
        /// <param name="PE_PrephaseChemotherapy">V46.1</param>
        /// <param name="PE_InductionChemotherapy">46.2</param>
        /// <param name="PE_IntensificationChemotherapy">46.3</param>
        /// <param name="PE_ConsolidationChemotherapy">46.4</param>
        /// <param name="PE_ReinductionChemotherapy">46.5</param>
        /// <param name="PE_MaintenanceChemotherapy">46.6</param>
        /// <param name="PE_FinalMaintenanceChemotherapy">46.7</param>
        /// <param name="PE_OtherChemotherapy">46.8</param>
        /// <param name="PE_InitiatedCycles">47</param>
        /// <param name="PE_UbicationFirstCycle">48</param>
        /// <param name="PE_DateFirstCycle">49</param>
        /// <param name="PE_IPSFirstCycle">50</param>
        /// <param name="PE_CodeIPSOneFirstCycle">51</param>
        /// <param name="PE_CodeIPSTwoFirstCycle">52</param>
        /// <param name="PE_AntineoplasticDrugsFirstCycle">53</param>
        /// <param name="PE_BleomycinFirstCycle">53.1</param>
        /// <param name="PE_BusulfanFirstCycle">53.2</param>
        /// <param name="PE_CapecitabineFirstCycle">53.3</param>
        /// <param name="PE_CarboplatinFirstCycle">53.4</param>
        /// <param name="PE_CyclophosphamideFirstCycle">53.5</param>
        /// <param name="PE_CiclosporinFirstCycle">53.6</param>
        /// <param name="PE_CisplatinFirstCycle">53.7</param>
        /// <param name="PE_CytarabineFirstCycle">53.8</param>
        /// <param name="PE_ChlorambucilFirstCycle">53.9</param>
        /// <param name="PE_DacarbazineFirstCycle">53.10</param>
        /// <param name="PE_DoxorubicinFirstCycle">53.11</param>
        /// <param name="PE_EtoposideFirstCycle">53.12</param>
        /// <param name="PE_FluorouracilFirstCycle">53.13</param>
        /// <param name="PE_GemcitabineFirstCycle">53.14</param>
        /// <param name="PE_ImatinibFirstCycle">53.15</param>
        /// <param name="PE_InterferonAlfaNaturalFirstCycle">53.16</param>
        /// <param name="PE_MelfalanFirstCycle">53.17</param>
        /// <param name="PE_MercaptopurineFirstCycle">53.18</param>
        /// <param name="PE_MethotrexateFirstCycle">53.19</param>
        /// <param name="PE_PaclitaxelFirstCycle">53.20</param>
        /// <param name="PE_PegfilgrastimFirstCycle">53.21</param>
        /// <param name="PE_ProcarbazineFirstCycle">53.22</param>
        /// <param name="PE_RituximabFirstCycle">53.23</param>
        /// <param name="PE_TamoxifenFirstCycle">53.24</param>
        /// <param name="PE_ThioguanineFirstCycle">53.25</param>
        /// <param name="PE_TrastuzumabFirstCycle">53.26</param>
        /// <param name="PE_VinblastineFirstCycle">53.27</param>
        /// <param name="PE_VincristineFirstCycle">53.28</param>
        /// <param name="PE_PrednisoneFirstCycle">53.29</param>
        /// <param name="PE_PrednisoloneFirstCycle">53.30</param>
        /// <param name="PE_MethylprednisoloneFirstCycle">53.31</param>
        /// <param name="PE_DexamethasoneFirstCycle">53.32</param>
        /// <param name="PE_DrugPOSOneFirstCycle">54</param>
        /// <param name="PE_DrugPOSTwoFirstCycle">55</param>
        /// <param name="PE_DrugPOSThreeFirstCycle">56</param>
        /// <param name="PE_IntrathecalChemotherapyFirstCycle">57</param>
        /// <param name="PE_EndDateFirstCycle">58</param>
        /// <param name="PE_CurrentFeaturesFirstCycle">59</param>
        /// <param name="PE_ReasonEndingFirstCycle">60</param>
        /// <param name="PE_UTLastCycle">61</param>
        /// <param name="PE_InitalDateLastCycle">62</param>
        /// <param name="PE_IPSLastCycle">63</param>
        /// <param name="PE_CodeIPSOneLastCycle">64</param>
        /// <param name="PE_CodeIPSTwoLastCycle">65</param>
        /// <param name="PE_AntineoplasticDrugsLastCycle">66</param>
        /// <param name="PE_BleomycinLastCycle">66.1</param>
        /// <param name="PE_BusulfanLastCycle">66.2</param>
        /// <param name="PE_CapecitabineLastCycle">66.3</param>
        /// <param name="PE_CarboplatinLastCycle">66.4</param>
        /// <param name="PE_CyclophosphamideLastCycle">66.5</param>
        /// <param name="PE_CiclosporinLastCycle">66.6</param>
        /// <param name="PE_CisplatinLastCycle">66.7</param>
        /// <param name="PE_CytarabineLastCycle">66.8</param>
        /// <param name="PE_ChlorambucilLastCycle">66.9</param>
        /// <param name="PE_DacarbazineLastCycle">66.10</param>
        /// <param name="PE_DoxorubicinLastCycle">66.11</param>
        /// <param name="PE_EtoposideLastCycle">66.12</param>
        /// <param name="PE_FluorouracilLastCycle">66.13</param>
        /// <param name="PE_GemcitabineLastCycle">66.14</param>
        /// <param name="PE_ImatinibLastCycle">66.15</param>
        /// <param name="PE_InterferonAlfaNaturalLastCycle">66.16</param>
        /// <param name="PE_MelfalanLastCycle">66.17</param>
        /// <param name="PE_MercaptopurineLastCycle">66.18</param>
        /// <param name="PE_MethotrexateLastCycle">66.20</param>
        /// <param name="PE_PaclitaxelLastCycle">66.20</param>
        /// <param name="PE_PegfilgrastimLastCycle">66.21</param>
        /// <param name="PE_ProcarbazineLastCycle">66.22</param>
        /// <param name="PE_RituximabLastCycle">66.23</param>
        /// <param name="PE_TamoxifenLastCycle">66.24</param>
        /// <param name="PE_ThioguanineLastCycle">66.25</param>
        /// <param name="PE_TrastuzumabLastCycle">66.26</param>
        /// <param name="PE_VinblastineLastCycle">66.27</param>
        /// <param name="PE_PrednisoneLastCycle">66.29</param>
        /// <param name="PE_PrednisoloneLastCycle">66.30</param>
        /// <param name="PE_MethylprednisoloneLastCycle">66.31</param>
        /// <param name="PE_DexamethasoneLastCycle">66.32</param>
        /// <param name="PE_DrugPOSOneLastCycle">67</param>
        /// <param name="PE_DrugPOSTwoLastCycle">68</param>
        /// <param name="PE_DrugPOSThreeLastCycle">69</param>
        /// <param name="PE_IntrathecalChemotherapyLastCycle">70</param>
        /// <param name="PE_EndDateLastCycle">71</param>
        /// <param name="PE_CurrentFeaturesLastCycle">72</param>
        /// <param name="PE_ReasonEndingLastCycle">73</param>
        /// <param name="PE_VincristineLastCycle">66.28</param>
        public RuntimeResult<string> Execute(long PE_Chemotherapy, string PE_CountPhaseChemotherapy, long PE_PrephaseChemotherapy, long PE_InductionChemotherapy, long PE_IntensificationChemotherapy, long PE_ConsolidationChemotherapy, long PE_ReinductionChemotherapy, long PE_MaintenanceChemotherapy, long PE_FinalMaintenanceChemotherapy, long PE_OtherChemotherapy, string PE_InitiatedCycles, long PE_UbicationFirstCycle, DateTime PE_DateFirstCycle, string PE_IPSFirstCycle, string PE_CodeIPSOneFirstCycle, string PE_CodeIPSTwoFirstCycle, string PE_AntineoplasticDrugsFirstCycle, long PE_BleomycinFirstCycle, long PE_BusulfanFirstCycle, long PE_CapecitabineFirstCycle, long PE_CarboplatinFirstCycle, long PE_CyclophosphamideFirstCycle, long PE_CiclosporinFirstCycle, long PE_CisplatinFirstCycle, long PE_CytarabineFirstCycle, long PE_ChlorambucilFirstCycle, long PE_DacarbazineFirstCycle, long PE_DoxorubicinFirstCycle, long PE_EtoposideFirstCycle, long PE_FluorouracilFirstCycle, long PE_GemcitabineFirstCycle, long PE_ImatinibFirstCycle, long PE_InterferonAlfaNaturalFirstCycle, long PE_MelfalanFirstCycle, long PE_MercaptopurineFirstCycle, long PE_MethotrexateFirstCycle, long PE_PaclitaxelFirstCycle, long PE_PegfilgrastimFirstCycle, long PE_ProcarbazineFirstCycle, long PE_RituximabFirstCycle, long PE_TamoxifenFirstCycle, long PE_ThioguanineFirstCycle, long PE_TrastuzumabFirstCycle, long PE_VinblastineFirstCycle, long PE_VincristineFirstCycle, long PE_PrednisoneFirstCycle, long PE_PrednisoloneFirstCycle, long PE_MethylprednisoloneFirstCycle, long PE_DexamethasoneFirstCycle, string PE_DrugPOSOneFirstCycle, string PE_DrugPOSTwoFirstCycle, string PE_DrugPOSThreeFirstCycle, long PE_IntrathecalChemotherapyFirstCycle, DateTime PE_EndDateFirstCycle, long PE_CurrentFeaturesFirstCycle, long PE_ReasonEndingFirstCycle, long PE_UTLastCycle, DateTime PE_InitalDateLastCycle, string PE_IPSLastCycle, string PE_CodeIPSOneLastCycle, string PE_CodeIPSTwoLastCycle, string PE_AntineoplasticDrugsLastCycle, long PE_BleomycinLastCycle, long PE_BusulfanLastCycle, long PE_CapecitabineLastCycle, long PE_CarboplatinLastCycle, long PE_CyclophosphamideLastCycle, long PE_CiclosporinLastCycle, long PE_CisplatinLastCycle, long PE_CytarabineLastCycle, long PE_ChlorambucilLastCycle, long PE_DacarbazineLastCycle, long PE_DoxorubicinLastCycle, long PE_EtoposideLastCycle, long PE_FluorouracilLastCycle, long PE_GemcitabineLastCycle, long PE_ImatinibLastCycle, long PE_InterferonAlfaNaturalLastCycle, long PE_MelfalanLastCycle, long PE_MercaptopurineLastCycle, long PE_MethotrexateLastCycle, long PE_PaclitaxelLastCycle, long PE_PegfilgrastimLastCycle, long PE_ProcarbazineLastCycle, long PE_RituximabLastCycle, long PE_TamoxifenLastCycle, long PE_ThioguanineLastCycle, long PE_TrastuzumabLastCycle, long PE_VinblastineLastCycle, long PE_PrednisoneLastCycle, long PE_PrednisoloneLastCycle, long PE_MethylprednisoloneLastCycle, long PE_DexamethasoneLastCycle, string PE_DrugPOSOneLastCycle, string PE_DrugPOSTwoLastCycle, string PE_DrugPOSThreeLastCycle, long PE_IntrathecalChemotherapyLastCycle, DateTime PE_EndDateLastCycle, long PE_CurrentFeaturesLastCycle, long PE_ReasonEndingLastCycle, long PE_VincristineLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_PrephaseChemotherapy = PE_PrephaseChemotherapy;
                this.PE_InductionChemotherapy = PE_InductionChemotherapy;
                this.PE_IntensificationChemotherapy = PE_IntensificationChemotherapy;
                this.PE_ConsolidationChemotherapy = PE_ConsolidationChemotherapy;
                this.PE_ReinductionChemotherapy = PE_ReinductionChemotherapy;
                this.PE_MaintenanceChemotherapy = PE_MaintenanceChemotherapy;
                this.PE_FinalMaintenanceChemotherapy = PE_FinalMaintenanceChemotherapy;
                this.PE_OtherChemotherapy = PE_OtherChemotherapy;
                this.PE_InitiatedCycles = PE_InitiatedCycles;
                this.PE_UbicationFirstCycle = PE_UbicationFirstCycle;
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.PE_IPSFirstCycle = PE_IPSFirstCycle;
                this.PE_CodeIPSOneFirstCycle = PE_CodeIPSOneFirstCycle;
                this.PE_CodeIPSTwoFirstCycle = PE_CodeIPSTwoFirstCycle;
                this.PE_AntineoplasticDrugsFirstCycle = PE_AntineoplasticDrugsFirstCycle;
                this.PE_BleomycinFirstCycle = PE_BleomycinFirstCycle;
                this.PE_BusulfanFirstCycle = PE_BusulfanFirstCycle;
                this.PE_CapecitabineFirstCycle = PE_CapecitabineFirstCycle;
                this.PE_CarboplatinFirstCycle = PE_CarboplatinFirstCycle;
                this.PE_CyclophosphamideFirstCycle = PE_CyclophosphamideFirstCycle;
                this.PE_CiclosporinFirstCycle = PE_CiclosporinFirstCycle;
                this.PE_CisplatinFirstCycle = PE_CisplatinFirstCycle;
                this.PE_CytarabineFirstCycle = PE_CytarabineFirstCycle;
                this.PE_ChlorambucilFirstCycle = PE_ChlorambucilFirstCycle;
                this.PE_DacarbazineFirstCycle = PE_DacarbazineFirstCycle;
                this.PE_DoxorubicinFirstCycle = PE_DoxorubicinFirstCycle;
                this.PE_EtoposideFirstCycle = PE_EtoposideFirstCycle;
                this.PE_FluorouracilFirstCycle = PE_FluorouracilFirstCycle;
                this.PE_GemcitabineFirstCycle = PE_GemcitabineFirstCycle;
                this.PE_ImatinibFirstCycle = PE_ImatinibFirstCycle;
                this.PE_InterferonAlfaNaturalFirstCycle = PE_InterferonAlfaNaturalFirstCycle;
                this.PE_MelfalanFirstCycle = PE_MelfalanFirstCycle;
                this.PE_MercaptopurineFirstCycle = PE_MercaptopurineFirstCycle;
                this.PE_MethotrexateFirstCycle = PE_MethotrexateFirstCycle;
                this.PE_PaclitaxelFirstCycle = PE_PaclitaxelFirstCycle;
                this.PE_PegfilgrastimFirstCycle = PE_PegfilgrastimFirstCycle;
                this.PE_ProcarbazineFirstCycle = PE_ProcarbazineFirstCycle;
                this.PE_RituximabFirstCycle = PE_RituximabFirstCycle;
                this.PE_TamoxifenFirstCycle = PE_TamoxifenFirstCycle;
                this.PE_ThioguanineFirstCycle = PE_ThioguanineFirstCycle;
                this.PE_TrastuzumabFirstCycle = PE_TrastuzumabFirstCycle;
                this.PE_VinblastineFirstCycle = PE_VinblastineFirstCycle;
                this.PE_VincristineFirstCycle = PE_VincristineFirstCycle;
                this.PE_PrednisoneFirstCycle = PE_PrednisoneFirstCycle;
                this.PE_PrednisoloneFirstCycle = PE_PrednisoloneFirstCycle;
                this.PE_MethylprednisoloneFirstCycle = PE_MethylprednisoloneFirstCycle;
                this.PE_DexamethasoneFirstCycle = PE_DexamethasoneFirstCycle;
                this.PE_DrugPOSOneFirstCycle = PE_DrugPOSOneFirstCycle;
                this.PE_DrugPOSTwoFirstCycle = PE_DrugPOSTwoFirstCycle;
                this.PE_DrugPOSThreeFirstCycle = PE_DrugPOSThreeFirstCycle;
                this.PE_IntrathecalChemotherapyFirstCycle = PE_IntrathecalChemotherapyFirstCycle;
                this.PE_EndDateFirstCycle = PE_EndDateFirstCycle;
                this.PE_CurrentFeaturesFirstCycle = PE_CurrentFeaturesFirstCycle;
                this.PE_ReasonEndingFirstCycle = PE_ReasonEndingFirstCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_IPSLastCycle = PE_IPSLastCycle;
                this.PE_CodeIPSOneLastCycle = PE_CodeIPSOneLastCycle;
                this.PE_CodeIPSTwoLastCycle = PE_CodeIPSTwoLastCycle;
                this.PE_AntineoplasticDrugsLastCycle = PE_AntineoplasticDrugsLastCycle;
                this.PE_BleomycinLastCycle = PE_BleomycinLastCycle;
                this.PE_BusulfanLastCycle = PE_BusulfanLastCycle;
                this.PE_CapecitabineLastCycle = PE_CapecitabineLastCycle;
                this.PE_CarboplatinLastCycle = PE_CarboplatinLastCycle;
                this.PE_CyclophosphamideLastCycle = PE_CyclophosphamideLastCycle;
                this.PE_CiclosporinLastCycle = PE_CiclosporinLastCycle;
                this.PE_CisplatinLastCycle = PE_CisplatinLastCycle;
                this.PE_CytarabineLastCycle = PE_CytarabineLastCycle;
                this.PE_ChlorambucilLastCycle = PE_ChlorambucilLastCycle;
                this.PE_DacarbazineLastCycle = PE_DacarbazineLastCycle;
                this.PE_DoxorubicinLastCycle = PE_DoxorubicinLastCycle;
                this.PE_EtoposideLastCycle = PE_EtoposideLastCycle;
                this.PE_FluorouracilLastCycle = PE_FluorouracilLastCycle;
                this.PE_GemcitabineLastCycle = PE_GemcitabineLastCycle;
                this.PE_ImatinibLastCycle = PE_ImatinibLastCycle;
                this.PE_InterferonAlfaNaturalLastCycle = PE_InterferonAlfaNaturalLastCycle;
                this.PE_MelfalanLastCycle = PE_MelfalanLastCycle;
                this.PE_MercaptopurineLastCycle = PE_MercaptopurineLastCycle;
                this.PE_MethotrexateLastCycle = PE_MethotrexateLastCycle;
                this.PE_PaclitaxelLastCycle = PE_PaclitaxelLastCycle;
                this.PE_PegfilgrastimLastCycle = PE_PegfilgrastimLastCycle;
                this.PE_ProcarbazineLastCycle = PE_ProcarbazineLastCycle;
                this.PE_RituximabLastCycle = PE_RituximabLastCycle;
                this.PE_TamoxifenLastCycle = PE_TamoxifenLastCycle;
                this.PE_ThioguanineLastCycle = PE_ThioguanineLastCycle;
                this.PE_TrastuzumabLastCycle = PE_TrastuzumabLastCycle;
                this.PE_VinblastineLastCycle = PE_VinblastineLastCycle;
                this.PE_PrednisoneLastCycle = PE_PrednisoneLastCycle;
                this.PE_PrednisoloneLastCycle = PE_PrednisoloneLastCycle;
                this.PE_MethylprednisoloneLastCycle = PE_MethylprednisoloneLastCycle;
                this.PE_DexamethasoneLastCycle = PE_DexamethasoneLastCycle;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.PE_DrugPOSThreeLastCycle = PE_DrugPOSThreeLastCycle;
                this.PE_IntrathecalChemotherapyLastCycle = PE_IntrathecalChemotherapyLastCycle;
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                this.PE_ReasonEndingLastCycle = PE_ReasonEndingLastCycle;
                this.PE_VincristineLastCycle = PE_VincristineLastCycle;
                this.VC_CountPhaseChemotherapy = FUNC_VC_CountPhaseChemotherapy();
                this.VC_PrephaseChemotherapy = FUNC_VC_PrephaseChemotherapy();
                this.VC_InductionChemotherapy = FUNC_VC_InductionChemotherapy();
                this.VC_IntensificationChemotherapy = FUNC_VC_IntensificationChemotherapy();
                this.VC_ConsolidationChemotherapy = FUNC_VC_ConsolidationChemotherapy();
                this.VC_ReinductionChemotherapy = FUNC_VC_ReinductionChemotherapy();
                this.VC_MaintenanceChemotherapy = FUNC_VC_MaintenanceChemotherapy();
                this.VC_FinalMaintenanceChemotherapy = FUNC_VC_FinalMaintenanceChemotherapy();
                this.VC_OtherChemotherapy = FUNC_VC_OtherChemotherapy();
                this.VC_InitiatedCycles = FUNC_VC_InitiatedCycles();
                this.VC_UbicationFirstCycle = FUNC_VC_UbicationFirstCycle();
                this.VC_DateFirstCycle = FUNC_VC_DateFirstCycle();
                this.VC_IPSFirstCycle = FUNC_VC_IPSFirstCycle();
                this.VC_CodeIPSOneFirstCycle = FUNC_VC_CodeIPSOneFirstCycle();
                this.VC_CodeIPSTwoFirstCycle = FUNC_VC_CodeIPSTwoFirstCycle();
                this.VC_AntineoplasticDrugsFirstCycle = FUNC_VC_AntineoplasticDrugsFirstCycle();
                this.VC_BleomycinFirstCycle = FUNC_VC_BleomycinFirstCycle();
                this.VC_BusulfanFirstCycle = FUNC_VC_BusulfanFirstCycle();
                this.VC_CapecitabineFirstCycle = FUNC_VC_CapecitabineFirstCycle();
                this.VC_CarboplatinFirstCycle = FUNC_VC_CarboplatinFirstCycle();
                this.VC_CyclophosphamideFirstCycle = FUNC_VC_CyclophosphamideFirstCycle();
                this.VC_CiclosporinFirstCycle = FUNC_VC_CiclosporinFirstCycle();
                this.VC_CisplatinFirstCycle = FUNC_VC_CisplatinFirstCycle();
                this.VC_CytarabineFirstCycle = FUNC_VC_CytarabineFirstCycle();
                this.VC_ChlorambucilFirstCycle = FUNC_VC_ChlorambucilFirstCycle();
                this.VC_DacarbazineFirstCycle = FUNC_VC_DacarbazineFirstCycle();
                this.VC_DoxorubicinFirstCycle = FUNC_VC_DoxorubicinFirstCycle();
                this.VC_EtoposideFirstCycle = FUNC_VC_EtoposideFirstCycle();
                this.VC_FluorouracilFirstCycle = FUNC_VC_FluorouracilFirstCycle();
                this.VC_GemcitabineFirstCycle = FUNC_VC_GemcitabineFirstCycle();
                this.VC_ImatinibFirstCycle = FUNC_VC_ImatinibFirstCycle();
                this.VC_InterferonAlfaNaturalFirstCycle = FUNC_VC_InterferonAlfaNaturalFirstCycle();
                this.VC_MelfalanFirstCycle = FUNC_VC_MelfalanFirstCycle();
                this.VC_MercaptopurineFirstCycle = FUNC_VC_MercaptopurineFirstCycle();
                this.VC_MethotrexateFirstCycle = FUNC_VC_MethotrexateFirstCycle();
                this.VC_PaclitaxelFirstCycle = FUNC_VC_PaclitaxelFirstCycle();
                this.VC_PegfilgrastimFirstCycle = FUNC_VC_PegfilgrastimFirstCycle();
                this.VC_ProcarbazineFirstCycle = FUNC_VC_ProcarbazineFirstCycle();
                this.VC_RituximabFirstCycle = FUNC_VC_RituximabFirstCycle();
                this.VC_TamoxifenFirstCycle = FUNC_VC_TamoxifenFirstCycle();
                this.VC_ThioguanineFirstCycle = FUNC_VC_ThioguanineFirstCycle();
                this.VC_TrastuzumabFirstCycle = FUNC_VC_TrastuzumabFirstCycle();
                this.VC_VinblastineFirstCycle = FUNC_VC_VinblastineFirstCycle();
                this.VC_VincristineFirstCycle = FUNC_VC_VincristineFirstCycle();
                this.VC_PrednisoneFirstCycle = FUNC_VC_PrednisoneFirstCycle();
                this.VC_PrednisoloneFirstCycle = FUNC_VC_PrednisoloneFirstCycle();
                this.VC_MethylprednisoloneFirstCycle = FUNC_VC_MethylprednisoloneFirstCycle();
                this.VC_DexamethasoneFirstCycle = FUNC_VC_DexamethasoneFirstCycle();
                this.VC_DrugPOSOneFirstCycle = FUNC_VC_DrugPOSOneFirstCycle();
                this.VC_DrugPOSTwoFirstCycle = FUNC_VC_DrugPOSTwoFirstCycle();
                this.VC_DrugPOSThreeFirstCycle = FUNC_VC_DrugPOSThreeFirstCycle();
                this.VC_IntrathecalChemotherapyFirstCycle = FUNC_VC_IntrathecalChemotherapyFirstCycle();
                this.VC_EndDateFirstCycle = FUNC_VC_EndDateFirstCycle();
                this.VC_CurrentFeaturesFirstCycle = FUNC_VC_CurrentFeaturesFirstCycle();
                this.VC_ReasonEndingFirstCycle = FUNC_VC_ReasonEndingFirstCycle();
                this.VC_UTLastCycle = FUNC_VC_UTLastCycle();
                this.VC_InitalDateLastCycle = FUNC_VC_InitalDateLastCycle();
                this.VC_IPSLastCycle = FUNC_VC_IPSLastCycle();
                this.VC_CodeIPSOneLastCycle = FUNC_VC_CodeIPSOneLastCycle();
                this.VC_CodeIPSTwoLastCycle = FUNC_VC_CodeIPSTwoLastCycle();
                this.VC_AntineoplasticDrugsLastCycle = FUNC_VC_AntineoplasticDrugsLastCycle();
                this.VC_BleomycinLastCycle = FUNC_VC_BleomycinLastCycle();
                this.VC_BusulfanLastCycle = FUNC_VC_BusulfanLastCycle();
                this.VC_CapecitabineLastCycle = FUNC_VC_CapecitabineLastCycle();
                this.VC_CarboplatinLastCycle = FUNC_VC_CarboplatinLastCycle();
                this.VC_CyclophosphamideLastCycle = FUNC_VC_CyclophosphamideLastCycle();
                this.VC_CiclosporinLastCycle = FUNC_VC_CiclosporinLastCycle();
                this.VC_CisplatinLastCycle = FUNC_VC_CisplatinLastCycle();
                this.VC_CytarabineLastCycle = FUNC_VC_CytarabineLastCycle();
                this.VC_ChlorambucilLastCycle = FUNC_VC_ChlorambucilLastCycle();
                this.VC_DacarbazineLastCycle = FUNC_VC_DacarbazineLastCycle();
                this.VC_DoxorubicinLastCycle = FUNC_VC_DoxorubicinLastCycle();
                this.VC_EtoposideLastCycle = FUNC_VC_EtoposideLastCycle();
                this.VC_FluorouracilLastCycle = FUNC_VC_FluorouracilLastCycle();
                this.VC_GemcitabineLastCycle = FUNC_VC_GemcitabineLastCycle();
                this.VC_ImatinibLastCycle = FUNC_VC_ImatinibLastCycle();
                this.VC_InterferonAlfaNaturalLastCycle = FUNC_VC_InterferonAlfaNaturalLastCycle();
                this.VC_MelfalanLastCycle = FUNC_VC_MelfalanLastCycle();
                this.VC_MercaptopurineLastCycle = FUNC_VC_MercaptopurineLastCycle();
                this.VC_MethotrexateLastCycle = FUNC_VC_MethotrexateLastCycle();
                this.VC_PaclitaxelLastCycle = FUNC_VC_PaclitaxelLastCycle();
                this.VC_PegfilgrastimLastCycle = FUNC_VC_PegfilgrastimLastCycle();
                this.VC_ProcarbazineLastCycle = FUNC_VC_ProcarbazineLastCycle();
                this.VC_RituximabLastCycle = FUNC_VC_RituximabLastCycle();
                this.VC_TamoxifenLastCycle = FUNC_VC_TamoxifenLastCycle();
                this.VC_ThioguanineLastCycle = FUNC_VC_ThioguanineLastCycle();
                this.VC_TrastuzumabLastCycle = FUNC_VC_TrastuzumabLastCycle();
                this.VC_VinblastineLastCycle = FUNC_VC_VinblastineLastCycle();
                this.VC_VincristineLastCycle = FUNC_VC_VincristineLastCycle();
                this.VC_PrednisoneLastCycle = FUNC_VC_PrednisoneLastCycle();
                this.VC_PrednisoloneLastCycle = FUNC_VC_PrednisoloneLastCycle();
                this.VC_MethylprednisoloneLastCycle = FUNC_VC_MethylprednisoloneLastCycle();
                this.VC_DexamethasoneLastCycle = FUNC_VC_DexamethasoneLastCycle();
                this.VC_DrugPOSOneLastCycle = FUNC_VC_DrugPOSOneLastCycle();
                this.VC_DrugPOSTwoLastCycle = FUNC_VC_DrugPOSTwoLastCycle();
                this.VC_DrugPOSThreeLastCycle = FUNC_VC_DrugPOSThreeLastCycle();
                this.VC_IntrathecalChemotherapyLastCycle = FUNC_VC_IntrathecalChemotherapyLastCycle();
                this.VC_EndDateLastCycle = FUNC_VC_EndDateLastCycle();
                this.VC_CurrentFeaturesLastCycle = FUNC_VC_CurrentFeaturesLastCycle();
                this.VC_ReasonEndingLastCycle = FUNC_VC_ReasonEndingLastCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CountPhaseChemotherapy()
        {
            if (PE_CountPhaseChemotherapy == "98")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrephaseChemotherapy()
        {
            if (PE_PrephaseChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InductionChemotherapy()
        {
            if (PE_InductionChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IntensificationChemotherapy()
        {
            if (PE_IntensificationChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ConsolidationChemotherapy()
        {
            if (PE_ConsolidationChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ReinductionChemotherapy()
        {
            if (PE_ReinductionChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MaintenanceChemotherapy()
        {
            if (PE_MaintenanceChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_FinalMaintenanceChemotherapy()
        {
            if (PE_FinalMaintenanceChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_OtherChemotherapy()
        {
            if (PE_OtherChemotherapy == 97)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InitiatedCycles()
        {
            if (PE_InitiatedCycles == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_UbicationFirstCycle()
        {
            if (PE_UbicationFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstCycle()
        {
            if (PE_DateFirstCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IPSFirstCycle()
        {
            if (PE_IPSFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSOneFirstCycle()
        {
            if (PE_CodeIPSOneFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSTwoFirstCycle()
        {
            if (PE_CodeIPSTwoFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AntineoplasticDrugsFirstCycle()
        {
            if (PE_AntineoplasticDrugsFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BleomycinFirstCycle()
        {
            if (PE_BleomycinFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BusulfanFirstCycle()
        {
            if (PE_BusulfanFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CapecitabineFirstCycle()
        {
            if (PE_CapecitabineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CarboplatinFirstCycle()
        {
            if (PE_CarboplatinFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CyclophosphamideFirstCycle()
        {
            if (PE_CyclophosphamideFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CiclosporinFirstCycle()
        {
            if (PE_CiclosporinFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CisplatinFirstCycle()
        {
            if (PE_CisplatinFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CytarabineFirstCycle()
        {
            if (PE_CytarabineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ChlorambucilFirstCycle()
        {
            if (PE_ChlorambucilFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DacarbazineFirstCycle()
        {
            if (PE_DacarbazineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DoxorubicinFirstCycle()
        {
            if (PE_DoxorubicinFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EtoposideFirstCycle()
        {
            if (PE_EtoposideFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_FluorouracilFirstCycle()
        {
            if (PE_FluorouracilFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_GemcitabineFirstCycle()
        {
            if (PE_GemcitabineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ImatinibFirstCycle()
        {
            if (PE_ImatinibFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InterferonAlfaNaturalFirstCycle()
        {
            if (PE_InterferonAlfaNaturalFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MelfalanFirstCycle()
        {
            if (PE_MelfalanFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MercaptopurineFirstCycle()
        {
            if (PE_MercaptopurineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethotrexateFirstCycle()
        {
            if (PE_MethotrexateFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PaclitaxelFirstCycle()
        {
            if (PE_PaclitaxelFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PegfilgrastimFirstCycle()
        {
            if (PE_PegfilgrastimFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ProcarbazineFirstCycle()
        {
            if (PE_ProcarbazineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_RituximabFirstCycle()
        {
            if (PE_RituximabFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TamoxifenFirstCycle()
        {
            if (PE_TamoxifenFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ThioguanineFirstCycle()
        {
            if (PE_ThioguanineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TrastuzumabFirstCycle()
        {
            if (PE_TrastuzumabFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VinblastineFirstCycle()
        {
            if (PE_VinblastineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VincristineFirstCycle()
        {
            if (PE_VincristineFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoneFirstCycle()
        {
            if (PE_PrednisoneFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoloneFirstCycle()
        {
            if (PE_PrednisoloneFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethylprednisoloneFirstCycle()
        {
            if (PE_MethylprednisoloneFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DexamethasoneFirstCycle()
        {
            if (PE_DexamethasoneFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSOneFirstCycle()
        {
            if (PE_DrugPOSOneFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSTwoFirstCycle()
        {
            if (PE_DrugPOSTwoFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSThreeFirstCycle()
        {
            if (PE_DrugPOSThreeFirstCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IntrathecalChemotherapyFirstCycle()
        {
            if (PE_IntrathecalChemotherapyFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateFirstCycle()
        {
            if (PE_EndDateFirstCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CurrentFeaturesFirstCycle()
        {
            if (PE_CurrentFeaturesFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ReasonEndingFirstCycle()
        {
            if (PE_ReasonEndingFirstCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_UTLastCycle()
        {
            if (PE_UTLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InitalDateLastCycle()
        {
            if (PE_InitalDateLastCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IPSLastCycle()
        {
            if (PE_IPSLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSOneLastCycle()
        {
            if (PE_CodeIPSOneLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CodeIPSTwoLastCycle()
        {
            if (PE_CodeIPSTwoLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AntineoplasticDrugsLastCycle()
        {
            if (PE_AntineoplasticDrugsLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BleomycinLastCycle()
        {
            if (PE_BleomycinLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BusulfanLastCycle()
        {
            if (PE_BusulfanLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CapecitabineLastCycle()
        {
            if (PE_CapecitabineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CarboplatinLastCycle()
        {
            if (PE_CarboplatinLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CyclophosphamideLastCycle()
        {
            if (PE_CyclophosphamideLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CiclosporinLastCycle()
        {
            if (PE_CiclosporinLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CisplatinLastCycle()
        {
            if (PE_CisplatinLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CytarabineLastCycle()
        {
            if (PE_CytarabineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ChlorambucilLastCycle()
        {
            if (PE_ChlorambucilLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DacarbazineLastCycle()
        {
            if (PE_DacarbazineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DoxorubicinLastCycle()
        {
            if (PE_DoxorubicinLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EtoposideLastCycle()
        {
            if (PE_EtoposideLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_FluorouracilLastCycle()
        {
            if (PE_FluorouracilLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_GemcitabineLastCycle()
        {
            if (PE_GemcitabineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ImatinibLastCycle()
        {
            if (PE_ImatinibLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InterferonAlfaNaturalLastCycle()
        {
            if (PE_InterferonAlfaNaturalLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MelfalanLastCycle()
        {
            if (PE_MelfalanLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MercaptopurineLastCycle()
        {
            if (PE_MercaptopurineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethotrexateLastCycle()
        {
            if (PE_MethotrexateLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PaclitaxelLastCycle()
        {
            if (PE_PaclitaxelLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PegfilgrastimLastCycle()
        {
            if (PE_PegfilgrastimLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ProcarbazineLastCycle()
        {
            if (PE_ProcarbazineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_RituximabLastCycle()
        {
            if (PE_RituximabLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TamoxifenLastCycle()
        {
            if (PE_TamoxifenLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ThioguanineLastCycle()
        {
            if (PE_ThioguanineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_TrastuzumabLastCycle()
        {
            if (PE_TrastuzumabLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VinblastineLastCycle()
        {
            if (PE_VinblastineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_VincristineLastCycle()
        {
            if (PE_VincristineLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoneLastCycle()
        {
            if (PE_PrednisoneLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_PrednisoloneLastCycle()
        {
            if (PE_PrednisoloneLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_MethylprednisoloneLastCycle()
        {
            if (PE_MethylprednisoloneLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DexamethasoneLastCycle()
        {
            if (PE_DexamethasoneLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSOneLastCycle()
        {
            if (PE_DrugPOSOneLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSTwoLastCycle()
        {
            if (PE_DrugPOSTwoLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DrugPOSThreeLastCycle()
        {
            if (PE_DrugPOSThreeLastCycle == "98")
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_IntrathecalChemotherapyLastCycle()
        {
            if (PE_IntrathecalChemotherapyLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateLastCycle()
        {
            if (PE_EndDateLastCycle == Convert.ToDateTime("01/01/1845"))
            {
                return true;
            }
            else
            {
                return false;
            }


        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CurrentFeaturesLastCycle()
        {
            if (PE_CurrentFeaturesLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_ReasonEndingLastCycle()
        {
            if (PE_ReasonEndingLastCycle == 98)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_Chemotherapy == 98)) NonValidMessages.Add($"45| Error en variable 45. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual”? ");
            if (!(VC_CountPhaseChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica  debe registrar no aplica en la variable 46.");
            if (!(VC_PrephaseChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica  debe registrar no aplica en la variable 46.1");
            if (!(VC_InductionChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.2");
            if (!(VC_ReinductionChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.5");
            if (!(VC_OtherChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.8");
            if (!(VC_InitiatedCycles == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 47");
            if (!(VC_UbicationFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 48");
            if (!(VC_DateFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 49");
            if (!(VC_IPSFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 50");
            if (!(VC_CodeIPSOneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 51");
            if (!(VC_CodeIPSTwoFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 52");
            if (!(VC_BleomycinFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.1");
            if (!(VC_BusulfanFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.2");
            if (!(VC_CapecitabineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.3");
            if (!(VC_CarboplatinFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.4");
            if (!(VC_CiclosporinFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.6");
            if (!(VC_CisplatinFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.7");
            if (!(VC_CytarabineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.8");
            if (!(VC_ChlorambucilFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.9");
            if (!(VC_DacarbazineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.10");
            if (!(VC_DoxorubicinFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.11");
            if (!(VC_EtoposideFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.12");
            if (!(VC_FluorouracilFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.13");
            if (!(VC_GemcitabineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.14");
            if (!(VC_ImatinibFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.15");
            if (!(VC_MelfalanFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.17");
            if (!(VC_MercaptopurineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.18");
            if (!(VC_MethotrexateFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.19");
            if (!(VC_PaclitaxelFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.20");
            if (!(VC_PegfilgrastimFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.21");
            if (!(VC_ProcarbazineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.22");
            if (!(VC_RituximabFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.23");
            if (!(VC_TamoxifenFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.24");
            if (!(VC_ThioguanineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.25");
            if (!(VC_TrastuzumabFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.26");
            if (!(VC_VinblastineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.27");
            if (!(VC_VincristineFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.28");
            if (!(VC_PrednisoneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.29");
            if (!(VC_PrednisoloneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.30");
            if (!(VC_DexamethasoneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.32");
            if (!(VC_DrugPOSOneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 54");
            if (!(VC_DrugPOSTwoFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 55");
            if (!(VC_DrugPOSThreeFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 56");
            if (!(VC_EndDateFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 58");
            if (!(VC_CurrentFeaturesFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 59");
            if (!(VC_ReasonEndingFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 60");
            if (!(VC_UTLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 61");
            if (!(VC_InitalDateLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 62");
            if (!(VC_IPSLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 63");
            if (!(VC_CodeIPSOneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 64");
            if (!(VC_CodeIPSTwoLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 65");
            if (!(VC_BleomycinLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.1");
            if (!(VC_BusulfanLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.2");
            if (!(VC_CapecitabineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.3");
            if (!(VC_CarboplatinLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.4");
            if (!(VC_CiclosporinLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.6");
            if (!(VC_CisplatinLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.7");
            if (!(VC_CytarabineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.8");
            if (!(VC_ChlorambucilLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.9");
            if (!(VC_DacarbazineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.10");
            if (!(VC_DoxorubicinLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.11");
            if (!(VC_EtoposideLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.12");
            if (!(VC_FluorouracilLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.13");
            if (!(VC_GemcitabineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.14");
            if (!(VC_ImatinibLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.15");
            if (!(VC_MelfalanLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.17");
            if (!(VC_MethotrexateLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.19");
            if (!(VC_PaclitaxelLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.20");
            if (!(VC_PegfilgrastimLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.21");
            if (!(VC_ProcarbazineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.22");
            if (!(VC_RituximabLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.23");
            if (!(VC_TamoxifenLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.24");
            if (!(VC_ThioguanineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.25");
            if (!(VC_TrastuzumabLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.26");
            if (!(VC_VinblastineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.27");
            if (!(VC_VincristineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.28");
            if (!(VC_PrednisoneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.29");
            if (!(VC_PrednisoloneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.30");
            if (!(VC_DexamethasoneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.32");
            if (!(VC_DrugPOSOneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 67");
            if (!(VC_DrugPOSTwoLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 68");
            if (!(VC_DrugPOSThreeLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 69");
            if (!(VC_EndDateLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 71");
            if (!(VC_CurrentFeaturesLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 72");
            if (!(VC_ReasonEndingLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 73");
            if (!(VC_MethylprednisoloneLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.31");
            if (!(VC_MercaptopurineLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable66.18");
            if (!(VC_IntrathecalChemotherapyLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 70");
            if (!(VC_InterferonAlfaNaturalLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66.16");
            if (!(VC_CyclophosphamideLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable  66.5");
            if (!(VC_AntineoplasticDrugsLastCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 66");
            if (!(VC_MethylprednisoloneFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.31");
            if (!(VC_IntrathecalChemotherapyFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 57");
            if (!(VC_InterferonAlfaNaturalFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.16");
            if (!(VC_CyclophosphamideFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53.5");
            if (!(VC_AntineoplasticDrugsFirstCycle == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 53");
            if (!(VC_FinalMaintenanceChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.7");
            if (!(VC_MaintenanceChemotherapy == true)) NonValidMessages.Add($"no aplica, debe registrar no aplica en la variable 46.6");
            if (!(VC_ConsolidationChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.4");
            if (!(VC_IntensificationChemotherapy == true)) NonValidMessages.Add($"45| Error en variable 45. Si registra 98-no aplica, debe registrar no aplica en la variable 46.3");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
    /// </sumary> 
    public sealed class RUL_CAHEMOTHER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// 46.1
        /// </sumary>
        private long PE_PrephaseChemotherapy;
        /// <sumary>
        /// 46.2
        /// </sumary>
        private long PE_InductionChemotherapy;
        /// <sumary>
        /// 46.3
        /// </sumary>
        private long PE_IntensificationChemotherapy;
        /// <sumary>
        /// 46.4
        /// </sumary>
        private long PE_ConsolidationChemotherapy;
        /// <sumary>
        /// 46.5
        /// </sumary>
        private long PE_ReinductionChemotherapy;
        /// <sumary>
        /// 46.6
        /// </sumary>
        private long PE_MaintenanceChemotherapy;
        /// <sumary>
        /// 46.7
        /// </sumary>
        private long PE_FinalMaintenanceChemotherapy;
        /// <sumary>
        /// 46.8
        /// </sumary>
        private long PE_OtherChemotherapy;
        /// <sumary>
        /// 47
        /// </sumary>
        private string PE_InitiatedCycles;
        /// <sumary>
        /// 48
        /// </sumary>
        private long PE_UbicationFirstCycle;
        /// <sumary>
        /// 49
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// 50
        /// </sumary>
        private string PE_IPSFirstCycle;
        /// <sumary>
        /// 51
        /// </sumary>
        private string PE_CodeIPSOneFirstCycle;
        /// <sumary>
        /// 52
        /// </sumary>
        private string PE_CodeIPSTwoFirstCycle;
        /// <sumary>
        /// 53
        /// </sumary>
        private string PE_AntineoplasticDrugsFirstCycle;
        /// <sumary>
        /// 53.1
        /// </sumary>
        private long PE_BleomycinFirstCycle;
        /// <sumary>
        /// 53.2
        /// </sumary>
        private long PE_BusulfanFirstCycle;
        /// <sumary>
        /// 53.3
        /// </sumary>
        private long PE_CapecitabineFirstCycle;
        /// <sumary>
        /// 53.4
        /// </sumary>
        private long PE_CarboplatinFirstCycle;
        /// <sumary>
        /// 53.5
        /// </sumary>
        private long PE_CyclophosphamideFirstCycle;
        /// <sumary>
        /// 53.6
        /// </sumary>
        private long PE_CiclosporinFirstCycle;
        /// <sumary>
        /// 53.7
        /// </sumary>
        private long PE_CisplatinFirstCycle;
        /// <sumary>
        /// 53.8
        /// </sumary>
        private long PE_CytarabineFirstCycle;
        /// <sumary>
        /// 53.9
        /// </sumary>
        private long PE_ChlorambucilFirstCycle;
        /// <sumary>
        /// 53.10
        /// </sumary>
        private long PE_DacarbazineFirstCycle;
        /// <sumary>
        /// 53.11
        /// </sumary>
        private long PE_DoxorubicinFirstCycle;
        /// <sumary>
        /// 53.12
        /// </sumary>
        private long PE_EtoposideFirstCycle;
        /// <sumary>
        /// 53.13
        /// </sumary>
        private long PE_FluorouracilFirstCycle;
        /// <sumary>
        /// 53.14
        /// </sumary>
        private long PE_GemcitabineFirstCycle;
        /// <sumary>
        /// 53.15
        /// </sumary>
        private long PE_ImatinibFirstCycle;
        /// <sumary>
        /// 53.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalFirstCycle;
        /// <sumary>
        /// 53.17
        /// </sumary>
        private long PE_MelfalanFirstCycle;
        /// <sumary>
        /// 53.18
        /// </sumary>
        private long PE_MercaptopurineFirstCycle;
        /// <sumary>
        /// 53.19
        /// </sumary>
        private long PE_MethotrexateFirstCycle;
        /// <sumary>
        /// 53.20
        /// </sumary>
        private long PE_PaclitaxelFirstCycle;
        /// <sumary>
        /// 53.21
        /// </sumary>
        private long PE_PegfilgrastimFirstCycle;
        /// <sumary>
        /// 53.22
        /// </sumary>
        private long PE_ProcarbazineFirstCycle;
        /// <sumary>
        /// 53.23
        /// </sumary>
        private long PE_RituximabFirstCycle;
        /// <sumary>
        /// 53.24
        /// </sumary>
        private long PE_TamoxifenFirstCycle;
        /// <sumary>
        /// 53.25
        /// </sumary>
        private long PE_ThioguanineFirstCycle;
        /// <sumary>
        /// 53.26
        /// </sumary>
        private long PE_TrastuzumabFirstCycle;
        /// <sumary>
        /// 53.27
        /// </sumary>
        private long PE_VinblastineFirstCycle;
        /// <sumary>
        /// 53.29
        /// </sumary>
        private long PE_PrednisoneFirstCycle;
        /// <sumary>
        /// 53.30
        /// </sumary>
        private long PE_PrednisoloneFirstCycle;
        /// <sumary>
        /// 53.31
        /// </sumary>
        private long PE_MethylprednisoloneFirstCycle;
        /// <sumary>
        /// 53.32
        /// </sumary>
        private long PE_DexamethasoneFirstCycle;
        /// <sumary>
        /// 54
        /// </sumary>
        private string PE_DrugPOSOneFirstCycle;
        /// <sumary>
        /// 55
        /// </sumary>
        private string PE_DrugPOSTwoFirstCycle;
        /// <sumary>
        /// 56
        /// </sumary>
        private string PE_DrugPOSThreeFirstCycle;
        /// <sumary>
        /// 57
        /// </sumary>
        private long PE_IntrathecalChemotherapyFirstCycle;
        /// <sumary>
        /// 58
        /// </sumary>
        private DateTime PE_EndDateFirstCycle;
        /// <sumary>
        /// 59
        /// </sumary>
        private long PE_CurrentFeaturesFirstCycle;
        /// <sumary>
        /// 60
        /// </sumary>
        private long PE_ReasonEndingFirstCycle;
        /// <sumary>
        /// 61
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// 62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// 63
        /// </sumary>
        private string PE_IPSLastCycle;
        /// <sumary>
        /// 64
        /// </sumary>
        private string PE_CodeIPSOneLastCycle;
        /// <sumary>
        /// 65
        /// </sumary>
        private string PE_CodeIPSTwoLastCycle;
        /// <sumary>
        /// 66
        /// </sumary>
        private string PE_AntineoplasticDrugsLastCycle;
        /// <sumary>
        /// 66.1
        /// </sumary>
        private long PE_BleomycinLastCycle;
        /// <sumary>
        /// 66.2
        /// </sumary>
        private long PE_BusulfanLastCycle;
        /// <sumary>
        /// 66.3
        /// </sumary>
        private long PE_CapecitabineLastCycle;
        /// <sumary>
        /// 66.4
        /// </sumary>
        private long PE_CarboplatinLastCycle;
        /// <sumary>
        /// 66.5
        /// </sumary>
        private long PE_CyclophosphamideLastCycle;
        /// <sumary>
        /// 66.6
        /// </sumary>
        private long PE_CiclosporinLastCycle;
        /// <sumary>
        /// 66.7
        /// </sumary>
        private long PE_CisplatinLastCycle;
        /// <sumary>
        /// 66.8
        /// </sumary>
        private long PE_CytarabineLastCycle;
        /// <sumary>
        /// 66.9
        /// </sumary>
        private long PE_ChlorambucilLastCycle;
        /// <sumary>
        /// 66.10
        /// </sumary>
        private long PE_DacarbazineLastCycle;
        /// <sumary>
        /// 66.11
        /// </sumary>
        private long PE_DoxorubicinLastCycle;
        /// <sumary>
        /// 66.12
        /// </sumary>
        private long PE_EtoposideLastCycle;
        /// <sumary>
        /// 66.13
        /// </sumary>
        private long PE_FluorouracilLastCycle;
        /// <sumary>
        /// 66.14
        /// </sumary>
        private long PE_GemcitabineLastCycle;
        /// <sumary>
        /// 66.15
        /// </sumary>
        private long PE_ImatinibLastCycle;
        /// <sumary>
        /// 66.16
        /// </sumary>
        private long PE_InterferonAlfaNaturalLastCycle;
        /// <sumary>
        /// 66.17
        /// </sumary>
        private long PE_MelfalanLastCycle;
        /// <sumary>
        /// 66.18
        /// </sumary>
        private long PE_MercaptopurineLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_PaclitaxelLastCycle;
        /// <sumary>
        /// 66.20
        /// </sumary>
        private long PE_MethotrexateLastCycle;
        /// <sumary>
        /// 66.21
        /// </sumary>
        private long PE_PegfilgrastimLastCycle;
        /// <sumary>
        /// 66.22
        /// </sumary>
        private long PE_ProcarbazineLastCycle;
        /// <sumary>
        /// 66.23
        /// </sumary>
        private long PE_RituximabLastCycle;
        /// <sumary>
        /// 66.24
        /// </sumary>
        private long PE_TamoxifenLastCycle;
        /// <sumary>
        /// 66.25
        /// </sumary>
        private long PE_ThioguanineLastCycle;
        /// <sumary>
        /// 66.26
        /// </sumary>
        private long PE_TrastuzumabLastCycle;
        /// <sumary>
        /// 66.27
        /// </sumary>
        private long PE_VinblastineLastCycle;
        /// <sumary>
        /// 66.28
        /// </sumary>
        private long PE_VincristineLastCycle;
        /// <sumary>
        /// 66.29
        /// </sumary>
        private long PE_PrednisoneLastCycle;
        /// <sumary>
        /// 66.30
        /// </sumary>
        private long PE_PrednisoloneLastCycle;
        /// <sumary>
        /// 66.31
        /// </sumary>
        private long PE_MethylprednisoloneLastCycle;
        /// <sumary>
        /// 66.32
        /// </sumary>
        private long PE_DexamethasoneLastCycle;
        /// <sumary>
        /// 67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// 68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// 69
        /// </sumary>
        private string PE_DrugPOSThreeLastCycle;
        /// <sumary>
        /// 70
        /// </sumary>
        private long PE_IntrathecalChemotherapyLastCycle;
        /// <sumary>
        /// 71
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        /// <sumary>
        /// 73
        /// </sumary>
        private long PE_ReasonEndingLastCycle;
        /// <sumary>
        /// 53.28
        /// </sumary>
        private long PE_VincristineFirstCycle;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
        /// </sumary>
        private readonly RUL_CAHEMOTHER98 RUL_CAHEMOTHER98 = new RUL_CAHEMOTHER98();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAHEMOTHER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual? (Aclaración: en esta sección solo incluya ciclos iniciados en este corte. Por favor, no incluya el último ciclo informado como "actual" en el corte anterior, así se haya terminado en el periodo actual de reporte).
        /// </sumary>
        /// <param name="PE_Chemotherapy">Variable 45</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_CountPhaseChemotherapy">V46</param>
        /// <param name="PE_PrephaseChemotherapy">46.1</param>
        /// <param name="PE_InductionChemotherapy">46.2</param>
        /// <param name="PE_IntensificationChemotherapy">46.3</param>
        /// <param name="PE_ConsolidationChemotherapy">46.4</param>
        /// <param name="PE_ReinductionChemotherapy">46.5</param>
        /// <param name="PE_MaintenanceChemotherapy">46.6</param>
        /// <param name="PE_FinalMaintenanceChemotherapy">46.7</param>
        /// <param name="PE_OtherChemotherapy">46.8</param>
        /// <param name="PE_InitiatedCycles">47</param>
        /// <param name="PE_UbicationFirstCycle">48</param>
        /// <param name="PE_DateFirstCycle">49</param>
        /// <param name="PE_IPSFirstCycle">50</param>
        /// <param name="PE_CodeIPSOneFirstCycle">51</param>
        /// <param name="PE_CodeIPSTwoFirstCycle">52</param>
        /// <param name="PE_AntineoplasticDrugsFirstCycle">53</param>
        /// <param name="PE_BleomycinFirstCycle">53.1</param>
        /// <param name="PE_BusulfanFirstCycle">53.2</param>
        /// <param name="PE_CapecitabineFirstCycle">53.3</param>
        /// <param name="PE_CarboplatinFirstCycle">53.4</param>
        /// <param name="PE_CyclophosphamideFirstCycle">53.5</param>
        /// <param name="PE_CiclosporinFirstCycle">53.6</param>
        /// <param name="PE_CisplatinFirstCycle">53.7</param>
        /// <param name="PE_CytarabineFirstCycle">53.8</param>
        /// <param name="PE_ChlorambucilFirstCycle">53.9</param>
        /// <param name="PE_DacarbazineFirstCycle">53.10</param>
        /// <param name="PE_DoxorubicinFirstCycle">53.11</param>
        /// <param name="PE_EtoposideFirstCycle">53.12</param>
        /// <param name="PE_FluorouracilFirstCycle">53.13</param>
        /// <param name="PE_GemcitabineFirstCycle">53.14</param>
        /// <param name="PE_ImatinibFirstCycle">53.15</param>
        /// <param name="PE_InterferonAlfaNaturalFirstCycle">53.16</param>
        /// <param name="PE_MelfalanFirstCycle">53.17</param>
        /// <param name="PE_MercaptopurineFirstCycle">53.18</param>
        /// <param name="PE_MethotrexateFirstCycle">53.19</param>
        /// <param name="PE_PaclitaxelFirstCycle">53.20</param>
        /// <param name="PE_PegfilgrastimFirstCycle">53.21</param>
        /// <param name="PE_ProcarbazineFirstCycle">53.22</param>
        /// <param name="PE_RituximabFirstCycle">53.23</param>
        /// <param name="PE_TamoxifenFirstCycle">53.24</param>
        /// <param name="PE_ThioguanineFirstCycle">53.25</param>
        /// <param name="PE_TrastuzumabFirstCycle">53.26</param>
        /// <param name="PE_VinblastineFirstCycle">53.27</param>
        /// <param name="PE_PrednisoneFirstCycle">53.29</param>
        /// <param name="PE_PrednisoloneFirstCycle">53.30</param>
        /// <param name="PE_MethylprednisoloneFirstCycle">53.31</param>
        /// <param name="PE_DexamethasoneFirstCycle">53.32</param>
        /// <param name="PE_DrugPOSOneFirstCycle">54</param>
        /// <param name="PE_DrugPOSTwoFirstCycle">55</param>
        /// <param name="PE_DrugPOSThreeFirstCycle">56</param>
        /// <param name="PE_IntrathecalChemotherapyFirstCycle">57</param>
        /// <param name="PE_EndDateFirstCycle">58</param>
        /// <param name="PE_CurrentFeaturesFirstCycle">59</param>
        /// <param name="PE_ReasonEndingFirstCycle">60</param>
        /// <param name="PE_UTLastCycle">61</param>
        /// <param name="PE_InitalDateLastCycle">62</param>
        /// <param name="PE_IPSLastCycle">63</param>
        /// <param name="PE_CodeIPSOneLastCycle">64</param>
        /// <param name="PE_CodeIPSTwoLastCycle">65</param>
        /// <param name="PE_AntineoplasticDrugsLastCycle">66</param>
        /// <param name="PE_BleomycinLastCycle">66.1</param>
        /// <param name="PE_BusulfanLastCycle">66.2</param>
        /// <param name="PE_CapecitabineLastCycle">66.3</param>
        /// <param name="PE_CarboplatinLastCycle">66.4</param>
        /// <param name="PE_CyclophosphamideLastCycle">66.5</param>
        /// <param name="PE_CiclosporinLastCycle">66.6</param>
        /// <param name="PE_CisplatinLastCycle">66.7</param>
        /// <param name="PE_CytarabineLastCycle">66.8</param>
        /// <param name="PE_ChlorambucilLastCycle">66.9</param>
        /// <param name="PE_DacarbazineLastCycle">66.10</param>
        /// <param name="PE_DoxorubicinLastCycle">66.11</param>
        /// <param name="PE_EtoposideLastCycle">66.12</param>
        /// <param name="PE_FluorouracilLastCycle">66.13</param>
        /// <param name="PE_GemcitabineLastCycle">66.14</param>
        /// <param name="PE_ImatinibLastCycle">66.15</param>
        /// <param name="PE_InterferonAlfaNaturalLastCycle">66.16</param>
        /// <param name="PE_MelfalanLastCycle">66.17</param>
        /// <param name="PE_MercaptopurineLastCycle">66.18</param>
        /// <param name="PE_PaclitaxelLastCycle">66.20</param>
        /// <param name="PE_MethotrexateLastCycle">66.20</param>
        /// <param name="PE_PegfilgrastimLastCycle">66.21</param>
        /// <param name="PE_ProcarbazineLastCycle">66.22</param>
        /// <param name="PE_RituximabLastCycle">66.23</param>
        /// <param name="PE_TamoxifenLastCycle">66.24</param>
        /// <param name="PE_ThioguanineLastCycle">66.25</param>
        /// <param name="PE_TrastuzumabLastCycle">66.26</param>
        /// <param name="PE_VinblastineLastCycle">66.27</param>
        /// <param name="PE_VincristineLastCycle">66.28</param>
        /// <param name="PE_PrednisoneLastCycle">66.29</param>
        /// <param name="PE_PrednisoloneLastCycle">66.30</param>
        /// <param name="PE_MethylprednisoloneLastCycle">66.31</param>
        /// <param name="PE_DexamethasoneLastCycle">66.32</param>
        /// <param name="PE_DrugPOSOneLastCycle">67</param>
        /// <param name="PE_DrugPOSTwoLastCycle">68</param>
        /// <param name="PE_DrugPOSThreeLastCycle">69</param>
        /// <param name="PE_IntrathecalChemotherapyLastCycle">70</param>
        /// <param name="PE_EndDateLastCycle">71</param>
        /// <param name="PE_CurrentFeaturesLastCycle">72</param>
        /// <param name="PE_ReasonEndingLastCycle">73</param>
        /// <param name="PE_VincristineFirstCycle">53.28</param>
        public RuntimeResult<string> Execute(long PE_Chemotherapy, string PE_RegimeType, string PE_CountPhaseChemotherapy, long PE_PrephaseChemotherapy, long PE_InductionChemotherapy, long PE_IntensificationChemotherapy, long PE_ConsolidationChemotherapy, long PE_ReinductionChemotherapy, long PE_MaintenanceChemotherapy, long PE_FinalMaintenanceChemotherapy, long PE_OtherChemotherapy, string PE_InitiatedCycles, long PE_UbicationFirstCycle, DateTime PE_DateFirstCycle, string PE_IPSFirstCycle, string PE_CodeIPSOneFirstCycle, string PE_CodeIPSTwoFirstCycle, string PE_AntineoplasticDrugsFirstCycle, long PE_BleomycinFirstCycle, long PE_BusulfanFirstCycle, long PE_CapecitabineFirstCycle, long PE_CarboplatinFirstCycle, long PE_CyclophosphamideFirstCycle, long PE_CiclosporinFirstCycle, long PE_CisplatinFirstCycle, long PE_CytarabineFirstCycle, long PE_ChlorambucilFirstCycle, long PE_DacarbazineFirstCycle, long PE_DoxorubicinFirstCycle, long PE_EtoposideFirstCycle, long PE_FluorouracilFirstCycle, long PE_GemcitabineFirstCycle, long PE_ImatinibFirstCycle, long PE_InterferonAlfaNaturalFirstCycle, long PE_MelfalanFirstCycle, long PE_MercaptopurineFirstCycle, long PE_MethotrexateFirstCycle, long PE_PaclitaxelFirstCycle, long PE_PegfilgrastimFirstCycle, long PE_ProcarbazineFirstCycle, long PE_RituximabFirstCycle, long PE_TamoxifenFirstCycle, long PE_ThioguanineFirstCycle, long PE_TrastuzumabFirstCycle, long PE_VinblastineFirstCycle, long PE_PrednisoneFirstCycle, long PE_PrednisoloneFirstCycle, long PE_MethylprednisoloneFirstCycle, long PE_DexamethasoneFirstCycle, string PE_DrugPOSOneFirstCycle, string PE_DrugPOSTwoFirstCycle, string PE_DrugPOSThreeFirstCycle, long PE_IntrathecalChemotherapyFirstCycle, DateTime PE_EndDateFirstCycle, long PE_CurrentFeaturesFirstCycle, long PE_ReasonEndingFirstCycle, long PE_UTLastCycle, DateTime PE_InitalDateLastCycle, string PE_IPSLastCycle, string PE_CodeIPSOneLastCycle, string PE_CodeIPSTwoLastCycle, string PE_AntineoplasticDrugsLastCycle, long PE_BleomycinLastCycle, long PE_BusulfanLastCycle, long PE_CapecitabineLastCycle, long PE_CarboplatinLastCycle, long PE_CyclophosphamideLastCycle, long PE_CiclosporinLastCycle, long PE_CisplatinLastCycle, long PE_CytarabineLastCycle, long PE_ChlorambucilLastCycle, long PE_DacarbazineLastCycle, long PE_DoxorubicinLastCycle, long PE_EtoposideLastCycle, long PE_FluorouracilLastCycle, long PE_GemcitabineLastCycle, long PE_ImatinibLastCycle, long PE_InterferonAlfaNaturalLastCycle, long PE_MelfalanLastCycle, long PE_MercaptopurineLastCycle, long PE_PaclitaxelLastCycle, long PE_MethotrexateLastCycle, long PE_PegfilgrastimLastCycle, long PE_ProcarbazineLastCycle, long PE_RituximabLastCycle, long PE_TamoxifenLastCycle, long PE_ThioguanineLastCycle, long PE_TrastuzumabLastCycle, long PE_VinblastineLastCycle, long PE_VincristineLastCycle, long PE_PrednisoneLastCycle, long PE_PrednisoloneLastCycle, long PE_MethylprednisoloneLastCycle, long PE_DexamethasoneLastCycle, string PE_DrugPOSOneLastCycle, string PE_DrugPOSTwoLastCycle, string PE_DrugPOSThreeLastCycle, long PE_IntrathecalChemotherapyLastCycle, DateTime PE_EndDateLastCycle, long PE_CurrentFeaturesLastCycle, long PE_ReasonEndingLastCycle, long PE_VincristineFirstCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_PrephaseChemotherapy = PE_PrephaseChemotherapy;
                this.PE_InductionChemotherapy = PE_InductionChemotherapy;
                this.PE_IntensificationChemotherapy = PE_IntensificationChemotherapy;
                this.PE_ConsolidationChemotherapy = PE_ConsolidationChemotherapy;
                this.PE_ReinductionChemotherapy = PE_ReinductionChemotherapy;
                this.PE_MaintenanceChemotherapy = PE_MaintenanceChemotherapy;
                this.PE_FinalMaintenanceChemotherapy = PE_FinalMaintenanceChemotherapy;
                this.PE_OtherChemotherapy = PE_OtherChemotherapy;
                this.PE_InitiatedCycles = PE_InitiatedCycles;
                this.PE_UbicationFirstCycle = PE_UbicationFirstCycle;
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.PE_IPSFirstCycle = PE_IPSFirstCycle;
                this.PE_CodeIPSOneFirstCycle = PE_CodeIPSOneFirstCycle;
                this.PE_CodeIPSTwoFirstCycle = PE_CodeIPSTwoFirstCycle;
                this.PE_AntineoplasticDrugsFirstCycle = PE_AntineoplasticDrugsFirstCycle;
                this.PE_BleomycinFirstCycle = PE_BleomycinFirstCycle;
                this.PE_BusulfanFirstCycle = PE_BusulfanFirstCycle;
                this.PE_CapecitabineFirstCycle = PE_CapecitabineFirstCycle;
                this.PE_CarboplatinFirstCycle = PE_CarboplatinFirstCycle;
                this.PE_CyclophosphamideFirstCycle = PE_CyclophosphamideFirstCycle;
                this.PE_CiclosporinFirstCycle = PE_CiclosporinFirstCycle;
                this.PE_CisplatinFirstCycle = PE_CisplatinFirstCycle;
                this.PE_CytarabineFirstCycle = PE_CytarabineFirstCycle;
                this.PE_ChlorambucilFirstCycle = PE_ChlorambucilFirstCycle;
                this.PE_DacarbazineFirstCycle = PE_DacarbazineFirstCycle;
                this.PE_DoxorubicinFirstCycle = PE_DoxorubicinFirstCycle;
                this.PE_EtoposideFirstCycle = PE_EtoposideFirstCycle;
                this.PE_FluorouracilFirstCycle = PE_FluorouracilFirstCycle;
                this.PE_GemcitabineFirstCycle = PE_GemcitabineFirstCycle;
                this.PE_ImatinibFirstCycle = PE_ImatinibFirstCycle;
                this.PE_InterferonAlfaNaturalFirstCycle = PE_InterferonAlfaNaturalFirstCycle;
                this.PE_MelfalanFirstCycle = PE_MelfalanFirstCycle;
                this.PE_MercaptopurineFirstCycle = PE_MercaptopurineFirstCycle;
                this.PE_MethotrexateFirstCycle = PE_MethotrexateFirstCycle;
                this.PE_PaclitaxelFirstCycle = PE_PaclitaxelFirstCycle;
                this.PE_PegfilgrastimFirstCycle = PE_PegfilgrastimFirstCycle;
                this.PE_ProcarbazineFirstCycle = PE_ProcarbazineFirstCycle;
                this.PE_RituximabFirstCycle = PE_RituximabFirstCycle;
                this.PE_TamoxifenFirstCycle = PE_TamoxifenFirstCycle;
                this.PE_ThioguanineFirstCycle = PE_ThioguanineFirstCycle;
                this.PE_TrastuzumabFirstCycle = PE_TrastuzumabFirstCycle;
                this.PE_VinblastineFirstCycle = PE_VinblastineFirstCycle;
                this.PE_PrednisoneFirstCycle = PE_PrednisoneFirstCycle;
                this.PE_PrednisoloneFirstCycle = PE_PrednisoloneFirstCycle;
                this.PE_MethylprednisoloneFirstCycle = PE_MethylprednisoloneFirstCycle;
                this.PE_DexamethasoneFirstCycle = PE_DexamethasoneFirstCycle;
                this.PE_DrugPOSOneFirstCycle = PE_DrugPOSOneFirstCycle;
                this.PE_DrugPOSTwoFirstCycle = PE_DrugPOSTwoFirstCycle;
                this.PE_DrugPOSThreeFirstCycle = PE_DrugPOSThreeFirstCycle;
                this.PE_IntrathecalChemotherapyFirstCycle = PE_IntrathecalChemotherapyFirstCycle;
                this.PE_EndDateFirstCycle = PE_EndDateFirstCycle;
                this.PE_CurrentFeaturesFirstCycle = PE_CurrentFeaturesFirstCycle;
                this.PE_ReasonEndingFirstCycle = PE_ReasonEndingFirstCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_IPSLastCycle = PE_IPSLastCycle;
                this.PE_CodeIPSOneLastCycle = PE_CodeIPSOneLastCycle;
                this.PE_CodeIPSTwoLastCycle = PE_CodeIPSTwoLastCycle;
                this.PE_AntineoplasticDrugsLastCycle = PE_AntineoplasticDrugsLastCycle;
                this.PE_BleomycinLastCycle = PE_BleomycinLastCycle;
                this.PE_BusulfanLastCycle = PE_BusulfanLastCycle;
                this.PE_CapecitabineLastCycle = PE_CapecitabineLastCycle;
                this.PE_CarboplatinLastCycle = PE_CarboplatinLastCycle;
                this.PE_CyclophosphamideLastCycle = PE_CyclophosphamideLastCycle;
                this.PE_CiclosporinLastCycle = PE_CiclosporinLastCycle;
                this.PE_CisplatinLastCycle = PE_CisplatinLastCycle;
                this.PE_CytarabineLastCycle = PE_CytarabineLastCycle;
                this.PE_ChlorambucilLastCycle = PE_ChlorambucilLastCycle;
                this.PE_DacarbazineLastCycle = PE_DacarbazineLastCycle;
                this.PE_DoxorubicinLastCycle = PE_DoxorubicinLastCycle;
                this.PE_EtoposideLastCycle = PE_EtoposideLastCycle;
                this.PE_FluorouracilLastCycle = PE_FluorouracilLastCycle;
                this.PE_GemcitabineLastCycle = PE_GemcitabineLastCycle;
                this.PE_ImatinibLastCycle = PE_ImatinibLastCycle;
                this.PE_InterferonAlfaNaturalLastCycle = PE_InterferonAlfaNaturalLastCycle;
                this.PE_MelfalanLastCycle = PE_MelfalanLastCycle;
                this.PE_MercaptopurineLastCycle = PE_MercaptopurineLastCycle;
                this.PE_PaclitaxelLastCycle = PE_PaclitaxelLastCycle;
                this.PE_MethotrexateLastCycle = PE_MethotrexateLastCycle;
                this.PE_PegfilgrastimLastCycle = PE_PegfilgrastimLastCycle;
                this.PE_ProcarbazineLastCycle = PE_ProcarbazineLastCycle;
                this.PE_RituximabLastCycle = PE_RituximabLastCycle;
                this.PE_TamoxifenLastCycle = PE_TamoxifenLastCycle;
                this.PE_ThioguanineLastCycle = PE_ThioguanineLastCycle;
                this.PE_TrastuzumabLastCycle = PE_TrastuzumabLastCycle;
                this.PE_VinblastineLastCycle = PE_VinblastineLastCycle;
                this.PE_VincristineLastCycle = PE_VincristineLastCycle;
                this.PE_PrednisoneLastCycle = PE_PrednisoneLastCycle;
                this.PE_PrednisoloneLastCycle = PE_PrednisoloneLastCycle;
                this.PE_MethylprednisoloneLastCycle = PE_MethylprednisoloneLastCycle;
                this.PE_DexamethasoneLastCycle = PE_DexamethasoneLastCycle;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.PE_DrugPOSThreeLastCycle = PE_DrugPOSThreeLastCycle;
                this.PE_IntrathecalChemotherapyLastCycle = PE_IntrathecalChemotherapyLastCycle;
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                this.PE_ReasonEndingLastCycle = PE_ReasonEndingLastCycle;
                this.PE_VincristineFirstCycle = PE_VincristineFirstCycle;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_Chemotherapy) || PE_Chemotherapy == 55 || PE_Chemotherapy == 98)) NonValidMessages.Add($"45| Error en variable 45. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica (por ejemplo, hormonoterapia) dentro del periodo de corte actual”? ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"45| Error en variable 45. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"45| Error en variable 45. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAHEMOTHER98.Execute(
PE_Chemotherapy,
PE_CountPhaseChemotherapy,
PE_PrephaseChemotherapy,
PE_InductionChemotherapy,
PE_IntensificationChemotherapy,
PE_ConsolidationChemotherapy,
PE_ReinductionChemotherapy,
PE_MaintenanceChemotherapy,
PE_FinalMaintenanceChemotherapy,
PE_OtherChemotherapy,
PE_InitiatedCycles,
PE_UbicationFirstCycle,
PE_DateFirstCycle,
PE_IPSFirstCycle,
PE_CodeIPSOneFirstCycle,
PE_CodeIPSTwoFirstCycle,
PE_AntineoplasticDrugsFirstCycle,
PE_BleomycinFirstCycle,
PE_BusulfanFirstCycle,
PE_CapecitabineFirstCycle,
PE_CarboplatinFirstCycle,
PE_CyclophosphamideFirstCycle,
PE_CiclosporinFirstCycle,
PE_CisplatinFirstCycle,
PE_CytarabineFirstCycle,
PE_ChlorambucilFirstCycle,
PE_DacarbazineFirstCycle,
PE_DoxorubicinFirstCycle,
PE_EtoposideFirstCycle,
PE_FluorouracilFirstCycle,
PE_GemcitabineFirstCycle,
PE_ImatinibFirstCycle,
PE_InterferonAlfaNaturalFirstCycle,
PE_MelfalanFirstCycle,
PE_MercaptopurineFirstCycle,
PE_MethotrexateFirstCycle,
PE_PaclitaxelFirstCycle,
PE_PegfilgrastimFirstCycle,
PE_ProcarbazineFirstCycle,
PE_RituximabFirstCycle,
PE_TamoxifenFirstCycle,
PE_ThioguanineFirstCycle,
PE_TrastuzumabFirstCycle,
PE_VinblastineFirstCycle,
PE_VincristineFirstCycle,
PE_PrednisoneFirstCycle,
PE_PrednisoloneFirstCycle,
PE_MethylprednisoloneFirstCycle,
PE_DexamethasoneFirstCycle,
PE_DrugPOSOneFirstCycle,
PE_DrugPOSTwoFirstCycle,
PE_DrugPOSThreeFirstCycle,
PE_IntrathecalChemotherapyFirstCycle,
PE_EndDateFirstCycle,
PE_CurrentFeaturesFirstCycle,
PE_ReasonEndingFirstCycle,
PE_UTLastCycle,
PE_InitalDateLastCycle,
PE_IPSLastCycle,
PE_CodeIPSOneLastCycle,
PE_CodeIPSTwoLastCycle,
PE_AntineoplasticDrugsLastCycle,
PE_BleomycinLastCycle,
PE_BusulfanLastCycle,
PE_CapecitabineLastCycle,
PE_CarboplatinLastCycle,
PE_CyclophosphamideLastCycle,
PE_CiclosporinLastCycle,
PE_CisplatinLastCycle,
PE_CytarabineLastCycle,
PE_ChlorambucilLastCycle,
PE_DacarbazineLastCycle,
PE_DoxorubicinLastCycle,
PE_EtoposideLastCycle,
PE_FluorouracilLastCycle,
PE_GemcitabineLastCycle,
PE_ImatinibLastCycle,
PE_InterferonAlfaNaturalLastCycle,
PE_MelfalanLastCycle,
PE_MercaptopurineLastCycle,
PE_MethotrexateLastCycle,
PE_PaclitaxelLastCycle,
PE_PegfilgrastimLastCycle,
PE_ProcarbazineLastCycle,
PE_RituximabLastCycle,
PE_TamoxifenLastCycle,
PE_ThioguanineLastCycle,
PE_TrastuzumabLastCycle,
PE_VinblastineLastCycle,
PE_PrednisoneLastCycle,
PE_PrednisoloneLastCycle,
PE_MethylprednisoloneLastCycle,
PE_DexamethasoneLastCycle,
PE_DrugPOSOneLastCycle,
PE_DrugPOSTwoLastCycle,
PE_DrugPOSThreeLastCycle,
PE_IntrathecalChemotherapyLastCycle,
PE_EndDateLastCycle,
PE_CurrentFeaturesLastCycle,
PE_ReasonEndingLastCycle,
PE_VincristineLastCycle
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAHEMOTHER98.Execute(
PE_Chemotherapy,
PE_CountPhaseChemotherapy,
PE_PrephaseChemotherapy,
PE_InductionChemotherapy,
PE_IntensificationChemotherapy,
PE_ConsolidationChemotherapy,
PE_ReinductionChemotherapy,
PE_MaintenanceChemotherapy,
PE_FinalMaintenanceChemotherapy,
PE_OtherChemotherapy,
PE_InitiatedCycles,
PE_UbicationFirstCycle,
PE_DateFirstCycle,
PE_IPSFirstCycle,
PE_CodeIPSOneFirstCycle,
PE_CodeIPSTwoFirstCycle,
PE_AntineoplasticDrugsFirstCycle,
PE_BleomycinFirstCycle,
PE_BusulfanFirstCycle,
PE_CapecitabineFirstCycle,
PE_CarboplatinFirstCycle,
PE_CyclophosphamideFirstCycle,
PE_CiclosporinFirstCycle,
PE_CisplatinFirstCycle,
PE_CytarabineFirstCycle,
PE_ChlorambucilFirstCycle,
PE_DacarbazineFirstCycle,
PE_DoxorubicinFirstCycle,
PE_EtoposideFirstCycle,
PE_FluorouracilFirstCycle,
PE_GemcitabineFirstCycle,
PE_ImatinibFirstCycle,
PE_InterferonAlfaNaturalFirstCycle,
PE_MelfalanFirstCycle,
PE_MercaptopurineFirstCycle,
PE_MethotrexateFirstCycle,
PE_PaclitaxelFirstCycle,
PE_PegfilgrastimFirstCycle,
PE_ProcarbazineFirstCycle,
PE_RituximabFirstCycle,
PE_TamoxifenFirstCycle,
PE_ThioguanineFirstCycle,
PE_TrastuzumabFirstCycle,
PE_VinblastineFirstCycle,
PE_VincristineFirstCycle,
PE_PrednisoneFirstCycle,
PE_PrednisoloneFirstCycle,
PE_MethylprednisoloneFirstCycle,
PE_DexamethasoneFirstCycle,
PE_DrugPOSOneFirstCycle,
PE_DrugPOSTwoFirstCycle,
PE_DrugPOSThreeFirstCycle,
PE_IntrathecalChemotherapyFirstCycle,
PE_EndDateFirstCycle,
PE_CurrentFeaturesFirstCycle,
PE_ReasonEndingFirstCycle,
PE_UTLastCycle,
PE_InitalDateLastCycle,
PE_IPSLastCycle,
PE_CodeIPSOneLastCycle,
PE_CodeIPSTwoLastCycle,
PE_AntineoplasticDrugsLastCycle,
PE_BleomycinLastCycle,
PE_BusulfanLastCycle,
PE_CapecitabineLastCycle,
PE_CarboplatinLastCycle,
PE_CyclophosphamideLastCycle,
PE_CiclosporinLastCycle,
PE_CisplatinLastCycle,
PE_CytarabineLastCycle,
PE_ChlorambucilLastCycle,
PE_DacarbazineLastCycle,
PE_DoxorubicinLastCycle,
PE_EtoposideLastCycle,
PE_FluorouracilLastCycle,
PE_GemcitabineLastCycle,
PE_ImatinibLastCycle,
PE_InterferonAlfaNaturalLastCycle,
PE_MelfalanLastCycle,
PE_MercaptopurineLastCycle,
PE_MethotrexateLastCycle,
PE_PaclitaxelLastCycle,
PE_PegfilgrastimLastCycle,
PE_ProcarbazineLastCycle,
PE_RituximabLastCycle,
PE_TamoxifenLastCycle,
PE_ThioguanineLastCycle,
PE_TrastuzumabLastCycle,
PE_VinblastineLastCycle,
PE_PrednisoneLastCycle,
PE_PrednisoloneLastCycle,
PE_MethylprednisoloneLastCycle,
PE_DexamethasoneLastCycle,
PE_DrugPOSOneLastCycle,
PE_DrugPOSTwoLastCycle,
PE_DrugPOSThreeLastCycle,
PE_IntrathecalChemotherapyLastCycle,
PE_EndDateLastCycle,
PE_CurrentFeaturesLastCycle,
PE_ReasonEndingLastCycle,
PE_VincristineLastCycle
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica
    /// </sumary> 
    public sealed class RUL_CAHACODIAG
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica
        /// </sumary>
        private string PE_HabilitationCodeDiagnostic;
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private long PE_TypeTest;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18 Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAHACODIAG() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica
        /// </sumary>
        /// <param name="PE_HabilitationCodeDiagnostic">Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica</param>
        /// <param name="PE_TypeTest">Tipo de estudio con el que se realizó el diagnóstico de cáncer</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        /// <param name="PE_DIAGNOSISDATE">V18 Fecha de Diagnóstico del Cancer reportado</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCodeDiagnostic, long PE_TypeTest, string PE_RegimeType, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCodeDiagnostic = PE_HabilitationCodeDiagnostic;
                this.PE_TypeTest = PE_TypeTest;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_HabilitationCodeDiagnostic.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == 12 || LenghtHabilitation != 12)) NonValidMessages.Add($"25| Error en variable 25. Valor no valido en Codigo valido de habilitacion de la IPS donde se realiza la confirmacion diagnostica. ");
            if (!(PE_HabilitationCodeDiagnostic == "96" || PE_HabilitationCodeDiagnostic == "98" || !(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic)) || PE_HabilitationCodeDiagnostic == "55" || PE_HabilitationCodeDiagnostic == "99")) NonValidMessages.Add($"25| Error en variable 25. Valor no valido en Codigo valido de habilitacion de la IPS donde se realiza la confirmacion diagnostica. ");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"25| Error en variable 25. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer.variable 21.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"25| Error en variable 25. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"25|Error en variable 25. La opcion 99 es valida en caso de diagnostico antes de 2015-01-01. Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "96") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. Si registra codigo de habilitacion de la IPS 98 debe registrar 7 en la variable 21Tipo de estudio con el que se realizó el diagnóstico de cáncer.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. Si registra codigo de habilitacion de la IPS 98 debe registrar 7 en la variable 21Tipo de estudio con el que se realizó el diagnóstico de cáncer.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. Si registra codigo de habilitacion de la IPS 98 debe registrar 7 en la variable 21Tipo de estudio con el que se realizó el diagnóstico de cáncer.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "98") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. Si registra codigo de habilitacion de la IPS 98 debe registrar 7 en la variable 21Tipo de estudio con el que se realizó el diagnóstico de cáncer.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (!(new string[] { "55", "96", "98", "99" }.Contains(PE_HabilitationCodeDiagnostic))) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica”. ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "55") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25| Error en variable 25. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && (PE_TypeTest == 7) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCodeDiagnostic == "99") && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"25|Error en variable 25. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Gemcitabina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAGEMCITAB
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.14
        /// </sumary>
        private long PE_GemcitabineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAGEMCITAB() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Gemcitabina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_GemcitabineLastCycle">variable 66.14</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_GemcitabineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_GemcitabineLastCycle = PE_GemcitabineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineLastCycle) || PE_GemcitabineLastCycle == 55 || PE_GemcitabineLastCycle == 98)) NonValidMessages.Add($"120| Error en variable 66.14. Valor no valido en “En este último esquema el usuario recibió Gemcitabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"120| Error en variable 66.14. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GemcitabineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GemcitabineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"120| Error en variable 66.14. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_GemcitabineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Gemcitabina 
    /// </sumary> 
    public sealed class RUL_CAGEMCIFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_GemcitabineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAGEMCIFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Gemcitabina 
        /// </sumary>
        /// <param name="PE_GemcitabineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_GemcitabineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_GemcitabineFirstCycle = PE_GemcitabineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineFirstCycle) || PE_GemcitabineFirstCycle == 98 || PE_GemcitabineFirstCycle == 55)) NonValidMessages.Add($"75| Error en variable 53.14. Valor no valido en “En este primer o único esquema el usuario recibió Gemcitabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"75| Error en variable 53.14. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_GemcitabineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_GemcitabineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_GemcitabineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_GemcitabineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"75| Error en variable 53.14. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Fluorouracilo (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CAFLUOROUR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.13
        /// </sumary>
        private long PE_FluorouracilLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFLUOROUR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Fluorouracilo (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_FluorouracilLastCycle">variable 66.13</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_FluorouracilLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FluorouracilLastCycle = PE_FluorouracilLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilLastCycle) || PE_FluorouracilLastCycle == 55 || PE_FluorouracilLastCycle == 98)) NonValidMessages.Add($"119| Error en variable 66.13. Valor no valido en “En este último esquema el usuario recibió Fluorouracilo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"119| Error en variable 66.13. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FluorouracilLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FluorouracilLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"119| Error en variable 66.13. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_FluorouracilLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Fluorouracilo 
    /// </sumary> 
    public sealed class RUL_CAFLUOFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_FluorouracilFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFLUOFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Fluorouracilo 
        /// </sumary>
        /// <param name="PE_FluorouracilFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_FluorouracilFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FluorouracilFirstCycle = PE_FluorouracilFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilFirstCycle) || PE_FluorouracilFirstCycle == 98 || PE_FluorouracilFirstCycle == 55)) NonValidMessages.Add($"74| Error en variable 53.13. Valor no valido en “En este primer o único esquema el usuario recibió Fluorouracilo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"74| Error en variable 53.13. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_FluorouracilFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_FluorouracilFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_FluorouracilFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_FluorouracilFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"74| Error en variable 53.13. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo de la finalización (prematura) de este primer ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
    /// </sumary> 
    public sealed class RUL_CAFIRSTCYC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 60
        /// </sumary>
        private long PE_ReasonEndingFirstCycle;
        /// <sumary>
        /// V59
        /// </sumary>
        private long PE_CurrentFeaturesFirstCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFIRSTCYC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo de la finalización (prematura) de este primer ciclo (Aplica si registró la opción 2 de la pregunta anterior) Selecciona un sólo número (lo que primero ocurrió).
        /// </sumary>
        /// <param name="PE_ReasonEndingFirstCycle">variable 60</param>
        /// <param name="PE_CurrentFeaturesFirstCycle">V59</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ReasonEndingFirstCycle, long PE_CurrentFeaturesFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ReasonEndingFirstCycle = PE_ReasonEndingFirstCycle;
                this.PE_CurrentFeaturesFirstCycle = PE_CurrentFeaturesFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_ReasonEndingFirstCycle) || PE_ReasonEndingFirstCycle == 55 || PE_ReasonEndingFirstCycle == 98)) NonValidMessages.Add($"100| Error en variable 60. Valor no valido en “Motivo de la finalización (prematura) de este primer o único esquema”.");
            if (!(PE_CurrentFeaturesFirstCycle == 2 || (new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle))) NonValidMessages.Add($"100| Error en variable 60. Valor no valido en “Características actuales del primer o único esquema de este periodo de reporte” variable 59.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"100| Error en variable 60. Valor no valido en “Características actuales del primer ciclo de este corte” variable 59.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_ReasonEndingFirstCycle)) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_ReasonEndingFirstCycle)) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_ReasonEndingFirstCycle)) && ((new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8 }).Contains(PE_ReasonEndingFirstCycle)) && ((new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 55) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ReasonEndingFirstCycle == 55) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 55) && ((new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 55) && ((new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 98) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 98) && (PE_CurrentFeaturesFirstCycle == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"100| Error en variable 60. El “Motivo de la finalización (prematura) de este primer o único esquema” Aplica si registró la opción 2 de la variable 59.", this.FileName);
            }
            else if ((PE_ReasonEndingFirstCycle == 98) && ((new long[] { 1, 3, 55, 98 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Primer Nombre
    /// </sumary> 
    public sealed class RUL_CAFIRSNAME
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Valida el primer nombre
        /// </sumary>
        private string CAFIRSNAME;
        /// <sumary>
        /// Validad Longitud Primer nombre
        /// </sumary>
        private long VC_FirstName;
        /// <sumary>
        /// Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFIRSNAME() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Primer Nombre
        /// </sumary>
        /// <param name="CAFIRSNAME">Valida el primer nombre</param>
        public RuntimeResult<string> Execute(string CAFIRSNAME)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.CAFIRSNAME = CAFIRSNAME;
                this.VC_FirstName = FUNC_VC_FirstName();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                this.VC_Mayus = FUNC_VC_Mayus();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_FirstName()
        {
            return CAFIRSNAME.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(CAFIRSNAME);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (CAFIRSNAME == CAFIRSNAME.ToUpper());
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_FirstName >= 1 && VC_FirstName <= 20)) NonValidMessages.Add($"1| Error en variable 1. Valor no valido en Primer nombre del usuario Debe ser menor a 20 caracteres o No debe venir vacio.");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"1| Error en variable 1. Valor no valido en Primer nombre del usuario No debe tener caracteres Especiales.");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"1| Error en variable 1.Valor no valido en Primer nombre del usuario  debe ser en mayusculas");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento largo o final (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CAFINALMAI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.7
        /// </sumary>
        private long PE_FinalMaintenanceChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFINALMAI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Mantenimiento largo o final (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_FinalMaintenanceChemotherapy">variable 46.7</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_FinalMaintenanceChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FinalMaintenanceChemotherapy = PE_FinalMaintenanceChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_FinalMaintenanceChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.7",
    "53"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"53|Valor no valido en 46.7 'El usuario recibió en este periodo la fase de quimioterapia denominada Mantenimiento largo o final (aplica solo para leucemia linfoide o mieloide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Primer apellido
    /// </sumary> 
    public sealed class RUL_CAFILASNAM
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private string PE_FirstLastName;
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private bool VC_FirstLastName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// PE_FirstLastName  Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFILASNAM() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        /// <param name="PE_FirstLastName">Primer apellido</param>
        public RuntimeResult<string> Execute(string PE_FirstLastName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FirstLastName = PE_FirstLastName;
                this.VC_FirstLastName = FUNC_VC_FirstLastName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_FirstLastName()
        {
            int Length = PE_FirstLastName.ToString().Length;
            return (Length >= 1) && (Length <= 20);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_FirstLastName == PE_FirstLastName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_FirstLastName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_FirstLastName == true)) NonValidMessages.Add($"3|Error en variable 3. Valor no valido en Primer apellido del usuario. maximo 20 caracteres  o No debe venir vacio.");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"3|Error en variable 3. Valor no valido en Primer apellido del usuario. Debe ser en mayuscula");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"3|Error en variable 3. Valor no valido en Primer apellido del usuario. No debe contener caracteres especiales");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de afiliación a la EAPB que reporta
    /// </sumary> 
    public sealed class RUL_CAFFILDATE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de afiliación a la EAPB que reporta
        /// </sumary>
        private DateTime PE_AffiliationDate;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// AFFILIATIONDATE>BIRTHDATE
        /// </sumary>
        private bool VC_AFFILIATIONDATEBIRTHDATE;
        /// <sumary>
        /// v134 corte
        /// </sumary>
        private bool VC_corte;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFFILDATE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de afiliación a la EAPB que reporta
        /// </sumary>
        /// <param name="PE_AffiliationDate">Fecha de afiliación a la EAPB que reporta</param>
        /// <param name="PE_BirthDate">Fecha de Nacimiento</param>
        /// <param name="PE_CUTDATE">Fecha de corte</param>
        public RuntimeResult<string> Execute(DateTime PE_AffiliationDate, DateTime PE_BirthDate, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AffiliationDate = PE_AffiliationDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_AFFILIATIONDATEBIRTHDATE = FUNC_VC_AFFILIATIONDATEBIRTHDATE();
                this.VC_corte = FUNC_VC_corte();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AFFILIATIONDATEBIRTHDATE()
        {
            return (PE_AffiliationDate >= PE_BirthDate) && (PE_AffiliationDate <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_corte()
        {
            return (PE_AffiliationDate <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_AffiliationDate > new DateTime(1900, 01, 01))) NonValidMessages.Add($"16| Error en variable 16. Valor no valido en Fecha de afiliacion a la EAPB que reporta");
            if (!(VC_AFFILIATIONDATEBIRTHDATE == true || VC_AFFILIATIONDATEBIRTHDATE != true)) NonValidMessages.Add($"16|Error en variable 16. La fecha de Nacimiento no debe ser mayor a Fecha de afiliacion a la EAPB que reporta. Variable 7.");
            if (!(VC_corte == true || VC_corte != true)) NonValidMessages.Add($"16|Error en variable 16. Es posterior a la fecha de Corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_AffiliationDate > new DateTime(1900, 01, 01)) && (VC_AFFILIATIONDATEBIRTHDATE == true) && (VC_corte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AffiliationDate > new DateTime(1900, 01, 01)) && (VC_AFFILIATIONDATEBIRTHDATE == true) && (VC_corte != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"16|Error en variable 16. Es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_AffiliationDate > new DateTime(1900, 01, 01)) && (VC_AFFILIATIONDATEBIRTHDATE != true) && (VC_corte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"16|Error en variable 16. La fecha de Nacimiento no debe ser mayor a “Fecha de afiliación a la EAPB que reporta”. Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"16|Error en variable 16. La fecha de Nacimiento no debe ser mayor a “Fecha de afiliación a la EAPB que reporta”. Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Características actuales del primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CAFEATURES
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CurrentFeaturesFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFEATURES() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Características actuales del primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_CurrentFeaturesFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_CurrentFeaturesFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CurrentFeaturesFirstCycle = PE_CurrentFeaturesFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesFirstCycle) || PE_CurrentFeaturesFirstCycle == 98 || PE_CurrentFeaturesFirstCycle == 55)) NonValidMessages.Add($"99| Error en variable 59. Valor no valido en “Características actuales del primer o único esquema de este periodo de reporte”.");
            if (!((new long[] { 2, 98 }).Contains(PE_Chemotherapy) || (new long[] { 1, 55 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"99| Error en variable 59. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"99| Error en variable 59. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesFirstCycle)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CurrentFeaturesFirstCycle == 98) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CurrentFeaturesFirstCycle == 98) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CurrentFeaturesFirstCycle == 98) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"99| Error en variable 59. Si registra 98 en la variable 59 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_CurrentFeaturesFirstCycle == 98) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"99| Error en variable 59. Si registra 98 en la variable 59 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_CurrentFeaturesFirstCycle == 55) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CurrentFeaturesFirstCycle == 55) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"99| Error en variable 59. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_CurrentFeaturesFirstCycle == 55) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"99| Error en variable 59. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Características actuales de este último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAFEATRADI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 104
        /// </sumary>
        private long PE_CurrentFeaturesLastRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFEATRADI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Características actuales de este último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_CurrentFeaturesLastRadiotherapy">variable 104</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_CurrentFeaturesLastRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CurrentFeaturesLastRadiotherapy = PE_CurrentFeaturesLastRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CurrentFeaturesLastRadiotherapy >= 1 && PE_CurrentFeaturesLastRadiotherapy <= 3 || PE_CurrentFeaturesLastRadiotherapy == 55 || PE_CurrentFeaturesLastRadiotherapy == 98)) NonValidMessages.Add($"176| Error en variable 104. Valor no valido en “Características actuales de este último esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"176| Error en variable 104. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"176| Error en variable 104. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CurrentFeaturesLastRadiotherapy >= 1 && PE_CurrentFeaturesLastRadiotherapy <= 3) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy >= 1 && PE_CurrentFeaturesLastRadiotherapy <= 3) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy >= 1 && PE_CurrentFeaturesLastRadiotherapy <= 3) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy >= 1 && PE_CurrentFeaturesLastRadiotherapy <= 3) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"176| Error en variable 104. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"176| Error en variable 104. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"176|Error en variable 104. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
            else if ((PE_CurrentFeaturesLastRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"176|Error en variable 104. Si registro 98 debe registrar opción 98 en variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de nacimiento del usuario
    /// </sumary> 
    public sealed class RUL_CAFCHNACIM
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAFCHNACIM() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de nacimiento del usuario
        /// </sumary>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">Fecha de Corte</param>
        public RuntimeResult<string> Execute(DateTime PE_BirthDate, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_CUTDATE >= PE_BirthDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_BirthDate > new DateTime(1900, 01, 01))) NonValidMessages.Add($"7|Error en variable 7. Valor no valido en Fecha de nacimiento.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"7|Error en variable 7. Valor no valido en Fecha de nacimiento.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_BirthDate > new DateTime(1900, 01, 01)) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"7|Error en variable 7. Valor no valido en “Fecha de nacimiento”. No debe ser mayor a fecha de corte en variable 134.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Etopósido 
    /// </sumary> 
    public sealed class RUL_CAETOPOSID
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.12
        /// </sumary>
        private long PE_EtoposideLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAETOPOSID() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Etopósido 
        /// </sumary>
        /// <param name="PE_EtoposideLastCycle">variable 66.12</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_EtoposideLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EtoposideLastCycle = PE_EtoposideLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_EtoposideLastCycle) || PE_EtoposideLastCycle == 55 || PE_EtoposideLastCycle == 98)) NonValidMessages.Add($"118| Error en variable 66.12. Valor no valido en “En este último esquema el usuario recibió Etopósido”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"118| Error en variable 66.12. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_EtoposideLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_EtoposideLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_EtoposideLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_EtoposideLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"118| Error en variable 66.12. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_EtoposideLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Etopósido
    /// </sumary> 
    public sealed class RUL_CAETOPFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_EtoposideFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAETOPFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Etopósido
        /// </sumary>
        /// <param name="PE_EtoposideFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_EtoposideFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EtoposideFirstCycle = PE_EtoposideFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_EtoposideFirstCycle) || PE_EtoposideFirstCycle == 98 || PE_EtoposideFirstCycle == 55)) NonValidMessages.Add($"73| Error en variable 53.12. Valor no valido en “En este primer o único esquema el usuario recibió Etopósido”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"73| Error en variable 53.12. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_EtoposideFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_EtoposideFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_EtoposideFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_EtoposideFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_EtoposideFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"73| Error en variable 53.12. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
    /// </sumary> 
    public sealed class RUL_CAENTRDATE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EntryDate;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V19
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAENTRDATE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
        /// </sumary>
        /// <param name="PE_EntryDate">Fecha</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(DateTime PE_EntryDate, DateTime PE_DateRemission, DateTime PE_BirthDate, string PE_RegimeType, DateTime PE_CUTDATE, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EntryDate = PE_EntryDate;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_EntryDate >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_EntryDate >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_EntryDate <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_EntryDate <= PE_DIAGNOSISDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EntryDate > new DateTime(1900, 01, 01) || PE_EntryDate == new DateTime(1800, 01, 01) || PE_EntryDate == new DateTime(1846, 01, 01))) NonValidMessages.Add($"20| Error en variable 20. Valor no valido en Fecha de ingreso a la institucion que realizo el diagnostico luego de la remision. ");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"20|Error en variable 20. Valor no valido en la fecha, debe ser mayor a la Fecha de la nota de remision del medico o institucion general hacia la institucion que hizo el diagnostico. Variable 19.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable 7.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"20| Error en variable 20. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"20|Error en variable 20. La fecha de Diagnostic-Variable 18.");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"20|Error en variable 20. La fecha de Diagnostic-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha de Diagnostico debe ser mayor a “Fecha de ingreso a la institución que realizó el diagnóstico” -Variable (18).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha de Diagnostico debe ser mayor a “Fecha de ingreso a la institución que realizó el diagnóstico” -Variable (18).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha de Diagnostico debe ser mayor a “Fecha de ingreso a la institución que realizó el diagnóstico” -Variable (18).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha de Diagnostico debe ser mayor a “Fecha de ingreso a la institución que realizó el diagnóstico” -Variable (18).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20|Error en variable 20. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EntryDate == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_BirthDate != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_DIAGNOSISDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"20| Error en variable 20. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de fiscalización de primer o único esquema de radioterapia
    /// </sumary> 
    public sealed class RUL_CAENDDATER
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateRadiotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha Radioterapia
        /// </sumary>
        private DateTime PE_DateRadiotherapy;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Regimen
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Radioterapia
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// variable que calcula que la fecha de nacimiento sea menor 
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// Variable que calcula que la fecha de radioterapia sea menor
        /// </sumary>
        private bool VC_DateRadiotherapy;
        /// <sumary>
        /// Variable que valida que la fecha de corte sea mayor 
        /// </sumary>
        private bool VC_CutDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAENDDATER() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de fiscalización de primer o único esquema de radioterapia
        /// </sumary>
        /// <param name="PE_EndDateRadiotherapy">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateRadiotherapy">Fecha Radioterapia</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_RegimeType">Regimen</param>
        /// <param name="PE_Radiotherapy">Radioterapia</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateRadiotherapy, DateTime PE_BirthDate, DateTime PE_DateRadiotherapy, DateTime PE_CutDate, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateRadiotherapy = PE_EndDateRadiotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateRadiotherapy = PE_DateRadiotherapy;
                this.PE_CutDate = PE_CutDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DateRadiotherapy = FUNC_VC_DateRadiotherapy();
                this.VC_CutDate = FUNC_VC_CutDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_EndDateRadiotherapy >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRadiotherapy()
        {
            return (PE_EndDateRadiotherapy >= PE_DateRadiotherapy);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutDate()
        {
            return (PE_EndDateRadiotherapy <= PE_CutDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateRadiotherapy > new DateTime(1900, 01, 01) || PE_EndDateRadiotherapy == new DateTime(1800, 01, 01) || PE_EndDateRadiotherapy == new DateTime(1845, 01, 01) || PE_EndDateRadiotherapy == new DateTime(1846, 01, 01))) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “Fecha de finalización de primer o único esquema de radioterapia”.");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “Fecha de finalización de primer o único esquema de radioterapia”.");
            if (!(VC_DateRadiotherapy == true || VC_DateRadiotherapy != true)) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “Fecha de finalización de primer o único esquema de radioterapia”.");
            if (!(VC_CutDate == true || VC_CutDate != true)) NonValidMessages.Add($"166| Error en variable 94. Valor no valido en “Fecha de finalización de primer o único esquema de radioterapia”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual, variable 88", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual, variable 88", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual, variable 88", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual, variable 88", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. La Fecha de finalización de primer o único esquema de radioterapia debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && (PE_Radiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_DateRadiotherapy != true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy == true) && (VC_CutDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_EndDateRadiotherapy == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_DateRadiotherapy != true) && (VC_CutDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"166|Error en variable 94. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAENDDATEL1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateLastRadiotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V97
        /// </sumary>
        private DateTime PE_InitalDateLastRadiotherapy;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V97
        /// </sumary>
        private bool VC_InitalDateLastRadiotherapy;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAENDDATEL1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_EndDateLastRadiotherapy">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_InitalDateLastRadiotherapy">V97</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateLastRadiotherapy, DateTime PE_BirthDate, DateTime PE_InitalDateLastRadiotherapy, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateLastRadiotherapy = PE_EndDateLastRadiotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_InitalDateLastRadiotherapy = PE_InitalDateLastRadiotherapy;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_InitalDateLastRadiotherapy = FUNC_VC_InitalDateLastRadiotherapy();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_EndDateLastRadiotherapy >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InitalDateLastRadiotherapy()
        {
            return (PE_EndDateLastRadiotherapy >= PE_InitalDateLastRadiotherapy);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_EndDateLastRadiotherapy <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01))) NonValidMessages.Add($"175| Error en variable 103. Valor no valido en “Fecha de finalización del último esquema de radioterapia suministrado en el corte actual.”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"175|Error en variable 103. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_InitalDateLastRadiotherapy == true || VC_InitalDateLastRadiotherapy != true)) NonValidMessages.Add($"175| Error en variable 103. Valor no valido en “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”. Variable 97.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"175|Error en variable 103. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_InitalDateLastRadiotherapy == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_InitalDateLastRadiotherapy == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_InitalDateLastRadiotherapy != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175| Error en variable 103. La “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”. Debe ser menor a “Fecha de finalización del último esquema de radioterapia suministrado en el corte actual”. Variable 97.", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_InitalDateLastRadiotherapy != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175| Error en variable 103. La “Fecha de inicio del último esquema de radioterapia suministrado en el corte actual”. Debe ser menor a “Fecha de finalización del último esquema de radioterapia suministrado en el corte actual”. Variable 97.", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_InitalDateLastRadiotherapy == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_InitalDateLastRadiotherapy == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_InitalDateLastRadiotherapy != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CAENDDATEL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateLastRadiotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V97
        /// </sumary>
        private DateTime PE_InitalDateLastRadiotherapy;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        private readonly RUL_CAENDDATEL1 RUL_CAENDDATEL1 = new RUL_CAENDDATEL1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAENDDATEL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del último esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_EndDateLastRadiotherapy">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_InitalDateLastRadiotherapy">V97</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateLastRadiotherapy, DateTime PE_BirthDate, DateTime PE_InitalDateLastRadiotherapy, DateTime PE_CUTDATE, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateLastRadiotherapy = PE_EndDateLastRadiotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_InitalDateLastRadiotherapy = PE_InitalDateLastRadiotherapy;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01) || PE_EndDateLastRadiotherapy == new DateTime(1845, 01, 01) || PE_EndDateLastRadiotherapy == new DateTime(1846, 01, 01) || PE_EndDateLastRadiotherapy == new DateTime(1800, 01, 01))) NonValidMessages.Add($"175| Error en variable 103. Valor no valido en “Fecha de finalización del último esquema de radioterapia suministrado en el corte actual.”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"175| Error en variable 103. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"175|Error en variable 103. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?:” -Variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAENDDATEL1.Execute(
PE_EndDateLastRadiotherapy,
PE_BirthDate,
PE_InitalDateLastRadiotherapy,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAENDDATEL1.Execute(
PE_EndDateLastRadiotherapy,
PE_BirthDate,
PE_InitalDateLastRadiotherapy,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAENDDATEL1.Execute(
PE_EndDateLastRadiotherapy,
PE_BirthDate,
PE_InitalDateLastRadiotherapy,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CAENDDATEL1.Execute(
PE_EndDateLastRadiotherapy,
PE_BirthDate,
PE_InitalDateLastRadiotherapy,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. Si registra 1845-01-01en la variable 103 debe registrar 98 en la variable (86).", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175|Error en variable 103. Si registra 1845-01-01en la variable 103 debe registrar 98 en la variable (86).", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175| Error en variable 103. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"175| Error en variable 103. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastRadiotherapy == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Procarbazina
    /// </sumary> 
    public sealed class RUL_CAEBAZFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_ProcarbazineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CAEBAZFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Procarbazina
        /// </sumary>
        /// <param name="PE_ProcarbazineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ProcarbazineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ProcarbazineFirstCycle = PE_ProcarbazineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineFirstCycle) || PE_ProcarbazineFirstCycle == 98 || PE_ProcarbazineFirstCycle == 55)) NonValidMessages.Add($"83| Error en variable 53.22. Valor no valido en “En este primer o único esquema el usuario recibió Procarbazina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"83| Error en variable 53.22. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ProcarbazineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ProcarbazineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ProcarbazineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ProcarbazineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"83| Error en variable 53.22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CADRUNEOPF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_AntineoplasticDrugsFirstCycle;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool VC_AntineoplasticDrugsFirstCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUNEOPF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Cuantos medicamentos antineoplásicos, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_AntineoplasticDrugsFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">variable 10</param>
        public RuntimeResult<string> Execute(string PE_AntineoplasticDrugsFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AntineoplasticDrugsFirstCycle = PE_AntineoplasticDrugsFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_AntineoplasticDrugsFirstCycle = FUNC_VC_AntineoplasticDrugsFirstCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AntineoplasticDrugsFirstCycle()
        {
            return PE_AntineoplasticDrugsFirstCycle.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_AntineoplasticDrugsFirstCycle == true || VC_AntineoplasticDrugsFirstCycle != true)) NonValidMessages.Add($"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” ");
            if (!(PE_AntineoplasticDrugsFirstCycle == "55" || PE_AntineoplasticDrugsFirstCycle == "98" || !(new string[] { "55", "98" }.Contains(PE_AntineoplasticDrugsFirstCycle)))) NonValidMessages.Add($"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"61| Error en variable 53. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_AntineoplasticDrugsFirstCycle == true) && (PE_AntineoplasticDrugsFirstCycle == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsFirstCycle == true) && (PE_AntineoplasticDrugsFirstCycle == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsFirstCycle == true) && (PE_AntineoplasticDrugsFirstCycle == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsFirstCycle == true) && (PE_AntineoplasticDrugsFirstCycle == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((VC_AntineoplasticDrugsFirstCycle == true) && (!(new string[] { "55", "98" }.Contains(PE_AntineoplasticDrugsFirstCycle))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsFirstCycle == true) && (!(new string[] { "55", "98" }.Contains(PE_AntineoplasticDrugsFirstCycle))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_AntineoplasticDrugsFirstCycle != true) && (PE_AntineoplasticDrugsFirstCycle == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsFirstCycle != true) && (PE_AntineoplasticDrugsFirstCycle == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsFirstCycle != true) && (PE_AntineoplasticDrugsFirstCycle == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsFirstCycle != true) && (PE_AntineoplasticDrugsFirstCycle == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
            else if ((VC_AntineoplasticDrugsFirstCycle != true) && (!(new string[] { "55", "98" }.Contains(PE_AntineoplasticDrugsFirstCycle))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"61| Error en variable 53. Valor no valido en “Cuantos medicamentos antineoplásicos o terapia hormonal, el (los) especialista(s) tratante(s) del cáncer propusieron como manejo en el primer o único esquema de quimioterapia o terapia sistémica de este periodo de reporte” Máximo 2 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 2 administrado al usuario- último ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGTWOL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS Y  67
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGTWOL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 2 administrado al usuario- último ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSTwoLastCycle">variable 68</param>
        /// <param name="PE_UTLastCycle">Ubicación temporal del último ciclo de este corte en relación al manejo oncológico</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_DrugPOSOneLastCycle">V67</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSTwoLastCycle, long PE_UTLastCycle, string PE_RegimeType, string PE_DrugPOSOneLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSTwoLastCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return (listCums.Contains(PE_DrugPOSTwoLastCycle) || (PE_DrugPOSTwoLastCycle == PE_DrugPOSOneLastCycle));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"140| Error en variable 68. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 2”.");
            if (!(PE_DrugPOSTwoLastCycle == "97" || PE_DrugPOSTwoLastCycle == "98" || PE_DrugPOSTwoLastCycle == "55" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle)))) NonValidMessages.Add($"140| Error en variable 68. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 2”.");
            if (!(PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10 || (new long[] { 97, 98 }).Contains(PE_UTLastCycle) || PE_UTLastCycle == 55)) NonValidMessages.Add($"140| Error en variable 68. Valor no valido en “Ubicación temporal del último ciclo de este corte en relación al manejo oncológico”. Variable 61.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"140| Error en variable 68.Valor no valido en “Código de medicamento-CUMS”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 97 en la variable 68 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Si registra 98 en la variable 68 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"140| Error en variable 68. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 2 administrado al usuario- primer ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGTWOF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_DrugPOSTwoFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V54
        /// </sumary>
        private string PE_DrugPOSOneFirstCycle;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS Y  54
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGTWOF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 2 administrado al usuario- primer ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSTwoFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_DrugPOSOneFirstCycle">V54</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSTwoFirstCycle, long PE_Chemotherapy, string PE_RegimeType, string PE_DrugPOSOneFirstCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSTwoFirstCycle = PE_DrugPOSTwoFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DrugPOSOneFirstCycle = PE_DrugPOSOneFirstCycle;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSTwoFirstCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return (listCums.Contains(PE_DrugPOSTwoFirstCycle) || (PE_DrugPOSTwoFirstCycle == PE_DrugPOSOneFirstCycle));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"95| Error en variable 55. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 55 - 1 administrado al usuario-Medicamento no POS 2 administrado al usuario”.Debe ser  maximo 20 caracteres.");
            if (!(PE_DrugPOSTwoFirstCycle == "55" || PE_DrugPOSTwoFirstCycle == "98" || PE_DrugPOSTwoFirstCycle == "97" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle)))) NonValidMessages.Add($"95| Error en variable 55. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 55 - 1 administrado al usuario-Medicamento no POS 2 administrado al usuario”.");
            if (!((new long[] { 1, 2 }).Contains(PE_Chemotherapy) || (new long[] { 55, 98 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"95| Error en variable 55. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"95| Error en variable 55. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"95| Error en variable 55. Valor no valido en “Código de medicamento-CUMS”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Si registra 97 en la variable 55 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.y diferente al de la variable 54.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Si registra 97 en la variable 55 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.y diferente al de la variable 54.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Si registra 97 en la variable 55 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.y diferente al de la variable 54.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSTwoFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. Si registra 97 en la variable 55 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.y diferente al de la variable 54.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y 54", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y 54", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y 54", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSTwoFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"95| Error en variable 55. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y 54", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 3 administrado al usuario- primer ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGTHRE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_DrugPOSThreeFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// 54
        /// </sumary>
        private string PE_DrugPOSOneFirstCycle;
        /// <sumary>
        /// V56
        /// </sumary>
        private string PE_DrugPOSTwoFirstCycle;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS Y 54 Y 55
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGTHRE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 3 administrado al usuario- primer ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSThreeFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_DrugPOSOneFirstCycle">54</param>
        /// <param name="PE_DrugPOSTwoFirstCycle">V56</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSThreeFirstCycle, long PE_Chemotherapy, string PE_RegimeType, string PE_DrugPOSOneFirstCycle, string PE_DrugPOSTwoFirstCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSThreeFirstCycle = PE_DrugPOSThreeFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DrugPOSOneFirstCycle = PE_DrugPOSOneFirstCycle;
                this.PE_DrugPOSTwoFirstCycle = PE_DrugPOSTwoFirstCycle;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSThreeFirstCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return (listCums.Contains(PE_DrugPOSThreeFirstCycle) || (PE_DrugPOSThreeFirstCycle == PE_DrugPOSTwoFirstCycle) || (PE_DrugPOSThreeFirstCycle == PE_DrugPOSOneFirstCycle));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"96| Error en variable 56. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 56 - 1 administrado al usuario-Medicamento no POS 3 administrado al usuario”.");
            if (!(PE_DrugPOSThreeFirstCycle == "55" || PE_DrugPOSThreeFirstCycle == "98" || PE_DrugPOSThreeFirstCycle == "97" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle)))) NonValidMessages.Add($"96| Error en variable 56. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 56 - 1 administrado al usuario-Medicamento no POS 3 administrado al usuario”.");
            if (!((new long[] { 1, 2 }).Contains(PE_Chemotherapy) || (new long[] { 55, 98 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"96| Error en variable 56. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"96| Error en variable 56. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"96| Error en variable 56. Valor no valido en “Código de medicamento-CUMS”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Si registra 97 en la variable 56 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Si registra 97 en la variable 56 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32. ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Si registra 97 en la variable 56 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32. ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. Si registra 97 en la variable 56 debe registrar 1 O 2 en la variable 45 Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32. ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y variable 54 y 55", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y variable 54 y 55", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y variable 54 y 55", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"96| Error en variable 56. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32. Y variable 54 y 55", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 3 administrado al usuario- último ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGPOST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 69
        /// </sumary>
        private string PE_DrugPOSThreeLastCycle;
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// V68
        /// </sumary>
        private string PE_DrugPOSTwoLastCycle;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS Y  67-68
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGPOST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 3 administrado al usuario- último ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSThreeLastCycle">variable 69</param>
        /// <param name="PE_UTLastCycle">Ubicación temporal del último ciclo de este corte en relación al manejo oncológico</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_DrugPOSOneLastCycle">V67</param>
        /// <param name="PE_DrugPOSTwoLastCycle">V68</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSThreeLastCycle, long PE_UTLastCycle, string PE_RegimeType, string PE_DrugPOSOneLastCycle, string PE_DrugPOSTwoLastCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSThreeLastCycle = PE_DrugPOSThreeLastCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_DrugPOSTwoLastCycle = PE_DrugPOSTwoLastCycle;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSThreeLastCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return (listCums.Contains(PE_DrugPOSThreeLastCycle) || (PE_DrugPOSThreeLastCycle == PE_DrugPOSTwoLastCycle) || (PE_DrugPOSThreeLastCycle == PE_DrugPOSOneLastCycle));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"141| Error en variable 69. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 3”.");
            if (!(PE_DrugPOSThreeLastCycle == "97" || PE_DrugPOSThreeLastCycle == "98" || PE_DrugPOSThreeLastCycle == "55" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle)))) NonValidMessages.Add($"141| Error en variable 69. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 3”.");
            if (!(PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10 || (new long[] { 97, 98 }).Contains(PE_UTLastCycle) || PE_UTLastCycle == 55)) NonValidMessages.Add($"141| Error en variable 69. Valor no valido en “Ubicación temporal del último ciclo de este corte en relación al manejo oncológico”. Variable 61.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"141| Error en variable 69. Valor no valido en “Código de medicamento-CUMS”");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 97 en la variable 69 debe registrar un valor de 1 a 10  en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Si registra 98 en la variable 69 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSThreeLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSThreeLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"141| Error en variable 69.  El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32  y diferente a registrado en la variable 67 Y 68”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 1 administrado al usuario- último ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGONEL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 67
        /// </sumary>
        private string PE_DrugPOSOneLastCycle;
        /// <sumary>
        /// Ubicación temporal del último ciclo de este corte en relación al manejo oncológico
        /// </sumary>
        private long PE_UTLastCycle;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGONEL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 1 administrado al usuario- último ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSOneLastCycle">variable 67</param>
        /// <param name="PE_UTLastCycle">Ubicación temporal del último ciclo de este corte en relación al manejo oncológico</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSOneLastCycle, long PE_UTLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSOneLastCycle = PE_DrugPOSOneLastCycle;
                this.PE_UTLastCycle = PE_UTLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSOneLastCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return (listCums.Contains(PE_DrugPOSOneLastCycle));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"139| Error en variable 67. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 1”.");
            if (!(PE_DrugPOSOneLastCycle == "97" || PE_DrugPOSOneLastCycle == "98" || PE_DrugPOSOneLastCycle == "55" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle)))) NonValidMessages.Add($"139| Error en variable 67. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para cáncer, pero no enunciado en variables 66.1 a 66.32 -1- No pos 1”.");
            if (!(PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10 || (new long[] { 97, 98 }).Contains(PE_UTLastCycle) || PE_UTLastCycle == 55)) NonValidMessages.Add($"139| Error en variable 67. Valor no valido, validar variable 61");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"139| Error en variable 67. Valor no valido en “Código de medicamento-CUMS”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "97") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 97 en la variable 67 debe registrar un valor de 1 a 10 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "98") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Si registra 98 en la variable 67 debe registrar 97 o 98 en la variable 61.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneLastCycle == "55") && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle >= 1 && PE_UTLastCycle <= 10) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && ((new long[] { 97, 98 }).Contains(PE_UTLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneLastCycle))) && (PE_UTLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"139| Error en variable 67. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables  66.1 a 66.32 -1- No pos 1”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Medicamento no POS 1 administrado al usuario- primer ciclo
    /// </sumary> 
    public sealed class RUL_CADRUGONEF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_DrugPOSOneFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        /// <sumary>
        /// validacion de los 32 codigos CUMS
        /// </sumary>
        private bool Cums32;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADRUGONEF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Medicamento no POS 1 administrado al usuario- primer ciclo
        /// </sumary>
        /// <param name="PE_DrugPOSOneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_DrugPOSOneFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DrugPOSOneFirstCycle = PE_DrugPOSOneFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.Cums32 = FUNC_Cums32();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            int Length = PE_DrugPOSOneFirstCycle.ToString().Length;
            return (Length >= 1) && (Length <= 20);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_Cums32()
        {
            List<string> listCums = new List<string>
{
"20116817-5","36070-17","19937980-3","20066786-7","202576-1","20099302-13","34501-8","20128952-4","19937980-2","19945093-5","20116817-1","19939440-2","34501-10","19961319-4","19939438-4","20095993-9","20095993-15","20098317-2","19959949-1","19944708-13","20021508-13","20098318-4","19959949-19","46144-8","46144-4","20090359-2","20021508-7","36070-29","20095988-1","202576-1","19959949-6","36070-22","19946123-2","36070-13","19953438-8","20067760-35","19959949-22","20067211-1","20064994-1","36070-21","53896-1","20067760-16","19944708-1","20067760-1","20142329-1","20067760-26","20096412-3","20067760-8","226777-3","20067760-12","20109362-5","20077036-4","36070-3","19952097-3","20007753-4","19959949-11","20067760-16","20100562-1","19959949-8","20025937-3","19939438-8","20096412-5","19953438-5","20067040-9","19936934-3","20067760-30","20013777-2","20098322-1","20067040-24","19942777-5","20067760-22","36070-27","34501-14","20066786-5","19953438-1","19903070-1","46144-16","35448-3","19959949-20","20092037-1","20063469-1","19954446-8","20097927-1","20116817-1","19952097-3","20067040-11","19950351-1","19959949-20","20067760-24","19967974-1","19959949-2","20088786-5","20072744-1","36070-14","20029777-4","20077036-6","19952099-1","20007753-8","20097800-3","34501-14","20097888-3","19944708-12","20008046-3","19950351-2","19942777-1","19954445-3","20067760-7","20090481-1","19942777-2","19939438-7","20062272-4","20095993-1","20109362-4","20083480-1","19959949-15","20083476-1","20083480-3","20098318-5","34501-10","20067760-3","19959949-3","20014765-1","20109103-2","20096414-2","19939440-6","19950351-2","20095993-4","19939440-9","20099302-10","20096414-2","34501-9","19959519-6","20063485-1","20099302-3","34501-6","36070-7","20097927-2","19959519-3","20083480-1","20096413-2","20098318-1","20004387-1","19944708-5","20014597-3","19959949-13","34501-4","20071241-7","20067760-17","20066786-7","34501-2","20067760-27","19960016-3","20007753-2","20107499-2","34501-13","21531-2","20104162-2","20067760-28","20097894-3","20104162-1","19946485-1","20029778-2","20077036-2","36070-5","46144-10","20077036-4","20029777-8","19959949-1","20098317-2","20096413-2","20067760-14","19959949-4","36070-3","20122749-1","20029777-2","20019105-7","19903070-1","20007753-2","20005641-1","19936934-2","20067040-34","20010934-1","19959949-1","19982071-1","20016861-1","20109362-3","36070-26","20098318-3","20093582-2","20107415-1","20018483-1","20100049-2","20116728-1","20010363-1","20128952-5","20067040-16","20098318-2","20006244-2","20100562-2","20095993-17","20096412-1","20008398-1","53896-4","20098318-1","19954445-9","20098318-5","20007753-1","20060323-10","19959949-16","20014778-5","20064440-1","20067760-31","20095988-1","19967591-2","20060323-9","20029777-2","20080049-1","20067760-31","19959949-14","20099302-10","34501-5","20107496-3","46265-1","20088786-4","20077036-6","20006244-1","20008398-1","20098318-3","20067760-24","19967591-1","19939440-5","20060323-4","20100562-1","20025937-1","19954445-6","20067760-10","36070-27","20096777-1","19954446-7","19939440-5","20089956-1","19942777-8","19959949-20","19953438-4","19941539-1","20071695-1","19953438-7","36070-13","19942777-7","34501-16","36070-25","19935953-1","20067760-13","20013832-1","19945093-1","20067760-5","20055046-1","20067211-1","20020276-1","20067760-20","20060323-15","20096413-4","19944708-2","20067760-33","19939440-1","20067760-19","20099302-14","20067760-36","20071695-1","34501-5","19952099-2","19935953-2","20071691-1","20008046-3","20066786-13","36070-21","20083480-3","21535-1","19906237-1","34501-13","20088786-4","20093650-2","216264-3","20064440-1","20054781-1","19959949-1","19946123-3","19946485-2","20071241-2","20037727-1","34501-18","20067040-3","24092-1","19944149-1","19945093-5","20128952-2","34501-17","46144-12","20092153-1","36070-1","20066789-1","20014778-2","35448-6","19936934-1","20128952-3","20067760-15","20100562-2","20010927-1","34501-11","53896-3","20010928-1","20062852-1","19946485-6","20014778-7","20090481-1","20118914-1","19959949-10","19905209-1","20067760-2","19959949-18","20019105-3","20097927-3","20098318-4","20067760-7","36070-11","34501-19","19959519-3","19944708-10","36070-7","36070-2","20007753-1","20067760-9","19959949-21","19935954-1","20067040-36","20098317-2","20014778-2","20083476-5","20064116-1","20099302-1","36070-13","36070-24","20020276-3","20096413-1","20020276-3","36070-4","20055046-2","20019105-3","20095993-28","20067760-18","20142329-1","19936934-2","20095988-3","19954446-18","34501-4","20014778-10","19967208-1","20067760-25","20103747-1","201175-3","20095993-8","20067760-15","20093582-1","20067760-6","20103436-1","46264-1","20118914-2","20010927-1","20093650-2","19959949-1","19946123-3","20071503-1","19954446-6","46264-1","20067760-14","20095988-2","20128952-1","20104162-3","53896-7","46144-20","19968594-1","19903070-1","20088786-1","19939440-4","19959949-11","20010363-1","19967591-2","20142329-1","34501-15","20095990-1","20067760-19","20097894-3","20095993-10","20080268-1","20095993-4","20136180-18","19942777-4","226777-3","20143914-3","20095993-3","19953438-2","20067760-29","20100562-2","19959949-19","20062272-3","20136274-9","20060323-2","53896-6","20064994-1","20067760-4","19959949-4","20067760-11","20136180-20","19950351-3","20100562-2","20078381-1","20097894-1","20067760-32","20136180-22","20088786-2","46144-20","20067760-34","20025387-4","20083476-3","35448-2","20021508-6","19939440-8","20008046-1","36070-27","20143914-3","20084373-1","20014765-1","20064440-1","19954445-3","20067760-23","20010928-1","34501-3","36070-18","20099302-3","20136274-14","20077036-7","20111735-1","19954445-10","20109807-1","20098318-2","20136274-2","20060323-1","53896-5","20098317-2","19935951-1","20095993-18","20077036-5","34501-9","20008046-5","19939438-7","20136180-10","20109362-3","19954445-8","20136180-1","20014765-1","201175-2","20067040-18","20029778-1","20006244-1","19939440-6","20010363-1","20067760-21","20136274-12","20143914-4","20136274-11","19967591-2","20007753-8","20014772-1","20010363-1","20067760-33","20029777-1","20143914-1","19941538-1","19951646-1","20064605-1","20071241-8","20060323-11","20136180-14","19959949-12","34501-18","36070-7","20136274-7","19950351-3","20098317-1","20083480-2","20098317-2","20067760-4","19939438-1","20095993-26","20095993-27","19952099-3","20136180-5","20006244-1","20013834-1","46144-3","20095993-27","19953438-6","20136180-16","20099302-15","19959949-14","20064605-2","20103747-8","216264-1","20007753-4","20025935-2","20016861-2","20095993-22","20060323-5","20118477-1","19964018-8","20143914-4","19950351-3","34501-7","20008046-2","20095993-5","19959949-17","20062272-3","20071241-3","20143914-3","20121175-2","20121175-1","20136180-12","20093582-2","19950351-2","53896-8","20136180-9","20066788-1","19959949-21","34501-8","229745-1","20014778-6","20014765-1","20136180-13","20025387-2","20100557-1","20093650-1","20067040-21","20096412-4","20143914-1","20143914-1","20136274-21","36070-9","19937677-2","20136274-13","19936933-1","20060323-4","19946485-5","20067760-6","19959519-1","36070-23","46144-15","20098317-2","20013777-1","20011001-1","20014765-2","20100049-1","20099302-11","46144-18","19959519-2","20066786-8","19939440-3","20136274-8","19942777-6","34501-17","35448-2","19954446-1","20136274-20","53896-2","20096412-5","20095993-6","20078383-1","20099302-16","20054781-1","20143914-2","20136180-2","46262-1","20080049-1","202576-2","20007753-3","19952099-3","20093650-1","20143914-1","20136274-6","20109807-1","20029777-5","20136180-4","19951646-1","19959949-10","21534-1","20095993-26","20093650-2","20136274-16","20095993-13","19945093-1","20014765-3","19954445-4","20116817-9","20143914-4","19959949-9","20107420-1","20067040-17","20064605-1","19954445-2","20097894-1","20136180-19","20107415-1","19954445-11","19952099-3","34501-2","20066786-4","20095993-19","19945093-2","36070-6","20096777-1","20025387-2","19935952-1","19935953-2","20067040-32","34501-3","20095990-1","35442-2","19959949-18","20093582-2","19942777-5","20096413-4","19968594-1","20136274-19","20021508-5","20019105-6","19954445-5","20143914-3","20029777-9","53896-5","20143914-4","20136180-17","20029778-2","20066786-4","19959949-20","20067040-19","20011827-1","19952099-4","20055046-2","20143914-1","20029777-5","20064605-2","36070-24","229745-1","20006179-1","20143914-3","19939440-7","20143914-2","20066786-13","19906237-4","20025387-3","20109103-1","20143914-1","19959949-3","19936934-1","20066786-15","20117027-1","20093582-1","20096414-3","19944708-1","34501-16","20071241-1","34501-19","20003837-1","20099302-13","19959949-13","19903070-1","20088786-2","20143914-4","20136180-11","20143914-2","20066786-14","20063469-2","20095072-1","20093650-1","19959949-6","20007753-5","19959949-4","20094214-1","20093582-1","20097800-1","19954445-5","36070-8","226777-3","20060323-5","20093650-2","20019105-7","20029778-3","20143914-3","20067760-32","20096413-1","36070-5","20133414-1","19964018-1","19959519-4","20117027-1","34501-15","20014778-8","20014765-1","34501-12","20006244-2","20116817-6","20099302-2","19942777-2","20107499-2","20136274-3","20133414-1","20060323-8","19959949-10","35442-2","20136180-15","46144-8","20071241-4","19954445-6","202576-2","20096412-2","20095993-7","20096413-4","19949455-1","20067040-25","19968594-1","20007753-1","19949455-2","20067040-28","20010927-1","20107499-1","20067760-25","46144-3","19954446-17","20060323-7","19944708-6","20143914-4","20029778-7","19959949-3","36070-11","20066789-1","19959949-5","19952099-1","20019105-6","19952099-4","226777-1","20014778-1","46144-9","20007753-5","19959949-13","24092-1","20125230-2","20125230-1","20066786-12","20125230-1","19959519-4","19959949-21","19942777-9","20116728-1","19954445-12",
"20063469-2","19959949-5","19954445-14","19939440-10","19952099-2","36070-2","46144-9","36070-4","20109103-1","20067040-12","19906237-2","19959949-5","19959949-9","20071241-11","20066786-9","19941539-1","226777-2","20136274-15","20095990-1","20099302-4","19960016-2","20125230-2","36070-18","19952097-2","20095993-5","19952099-1","20136180-8","35442-1","20014597-2","20060323-15","20020276-1","36070-17","34501-6","36070-24","20096412-5","19954445-16","19959949-21","19944708-15","20083476-3","20107496-4","20096413-1","20013777-3","202576-2","20066786-14","20029778-10","19967591-2","53896-8","34501-1","19950351-1","20136274-4","20096413-3","20096413-3","19903070-1","20007753-5","20006838-1","19959949-19","20100557-1","20025937-2","20103747-6","20067040-10","21534-1","34501-1","20063485-1","20018484-1","20097888-1","19952099-1","36070-1","20025937-3","20060323-9","20029777-10","34501-11","19942777-8","20066786-4","20067040-20","20095993-24","20096413-3","20109362-6","20136274-17","36070-22","20143914-1","19942777-6","20037727-3","20100562-2","20116817-2","19952099-4","20136180-3","36070-10","20014778-3","20143914-4","20095988-5","19952099-2","20019105-10","19944708-6","20012772-1","20021508-4","34501-12","20067760-18","19946485-4","19964018-6","46263-1","19953438-3","46144-18","20012769-1","19937980-3","20067760-34","20007753-6","20011828-1","19952099-4","20100049-2","19950351-1","20097888-2","20014778-6","19939440-9","20067760-17","20097800-4","20067040-31","20071691-1","20143914-2","36070-20","53896-3","19942777-12","19952099-2","34501-7","20014765-2","20013777-2","20143914-2","19959519-1","19937395-1","19962041-1","20095210-1","20067040-23","20029778-1","20021508-2","19954445-7","19959949-13","226777-1","20136180-7","20092037-1","20093582-1","20029778-10","36070-26","36070-22","20098317-1","19944149-1","20143914-4","20096417-4","20007753-6","19954445-16","20060323-2","20097894-2","20083476-4","20091316-1","20136274-10","19954446-11","20067760-12","20099893-3","20136274-18","19944708-14","46263-1","20136274-1","46144-14","20136180-21","20080268-1","19942777-12","20067760-5","20066786-14","20067040-14","19959949-4","19959949-7","20109362-2","20092153-1","20095988-3","19939438-5","19942777-3","19959949-7","36070-28","20067040-2","20066786-5","19942777-11","19936933-2","20097888-3","20096417-4","20025935-1","20083480-4","46144-19","20136180-6","20096417-1","20006179-1","20095993-16","20007753-3","19961319-1","226777-3","20037727-2","20066786-6","19939438-4","20066786-1","20029778-8","19942777-1","19942777-1","19942777-7","20109807-1","19959949-18","20121175-1","20107496-1","20095993-2","19959949-22","20136274-5","20103747-3","20096412-1","19942777-10","20014765-3","20116817-8","20143914-1","19964018-7","20029777-8","20067040-29","19945093-3","19959949-12","20029777-1","19959949-1","20067760-22","20007753-7","19952099-3","20143914-2","19952099-1","19959949-5","20096777-1","20116817-4","19959949-7","20143914-3","20143914-2","20121175-2","20096413-5","20109362-5","20010363-1","19954446-3","20104162-2","35448-6","20096417-1","19935954-1","19959949-3","20025935-3","19959519-4","20143914-3","19939440-10","20096417-2","20143914-2","20062273-1","20021508-3","19954445-1","19997625-5","226777-2","20067760-8","19997625-3","19935954-1","20011084-1","53896-5","19939440-7","20116817-2","19959949-19","20071241-12","19967591-1","20099302-8","226777-3","20018483-1","20103747-4","19997625-5","20088786-3","20066786-6","20021508-11","20066786-10","19959949-8","19952099-3","20029778-9","20100563-1","20083480-5","19959949-12","46144-11","19959764-4","20029777-10","19959949-22","20100562-1","19942777-3","36070-4","20014765-2","20095993-16","20092037-1","20066786-7","20134950-1","36070-9","19959764-6","20062273-1","19944708-14","19905209-1","20096413-2","20098317-1","19952099-4","20020276-2","19950351-1","19959764-7","19959949-3","202576-1","20006838-2","20104162-1","201175-1","20134950-1","53896-7","20006838-3","19942777-2","20072744-1","36070-15","20096417-1","20077036-2","20107499-1","19942777-8","36070-26","19959764-5","19959764-2","20021508-1","46144-13","20007753-6","20060323-3","20109103-2","20096417-3","20111735-1","20067760-27","20066786-12","20089956-1","20095993-2","36070-12","20066850-1","19997625-2","20096412-2","20095993-20","20099302-7","46144-15","20011827-1","20095990-2","33037-1","20088786-5","53896-2","20107496-2","36070-28","19959764-1","20060323-8","20078381-1","19939440-2","20012260-1","20095993-23","19959949-6","19959764-9","53896-1","20062272-4","20094214-1","19959764-3","19959949-2","36070-29","20014765-3","20066786-3","19960016-1","20096777-1","20060323-3","19961319-2","20096417-4","36070-25","20011084-3","20067040-8","19937677-1","19944708-9","20067760-28","46144-6","20011084-5","20010934-1","20008046-5","19959764-11","19997625-4","20010927-1","20141904-1","19962041-2","201175-2","19959764-10","20116817-3","20067760-36","20077036-5","20067760-35","20066786-11","19942777-13","19997625-1","19944149-1","20103606-7","20011084-2","20096417-2","20093650-1","19959764-8","19997625-1","19954445-15","19954446-4","19959949-18","19967591-2","53896-3","20071241-9","19959949-18","53896-2","20071241-5","19941539-1","19960016-3","20025935-2","36070-16","19959949-13","19997625-3","20096417-2","19946485-6","20071241-13","19946485-2","20019105-8","20011084-7","20093582-2","20014765-2","19942777-11","20104404-1","19997625-2","19959764-5","36070-6","20099893-2","19944708-7","20007753-6","20141904-1","19935951-1","19967591-2","20090359-1","20066786-3","36070-16","20014778-4","20067760-21","20007753-2","19959949-21","20060323-14","19959764-8","46144-17","19997625-4","19997625-6","36070-9","20134950-1","20116817-3","20012772-1","19941539-1","20019105-2","20098317-1","20103606-1","20103747-7","36070-18","20092037-1","20134950-1","20100563-1","20006838-3","19937677-3","20095988-3","19959764-9","19954446-5","19959949-20","19954445-12","19942777-10","19952097-1","20025935-3","19959764-6","33037-1","20098317-2","20029777-3","20067760-3","46144-16","20066788-1","19961319-1","19959764-7","20096412-4","20067040-4","20083480-2","20095988-4","20066786-6","19997625-7","33038-1","19959764-2","19959949-15","20011084-6","20067040-13","20116817-4","20103606-6","20095993-23","20011084-4","19959764-3","19942777-12","20066786-10","19959764-1","19942777-3","19959764-11","19997625-6","35448-1","20062272-2","19997625-7","20097888-2","20096412-3","33038-1","20018484-1","20099893-3","19959764-4","20007753-3","19954445-10","19959764-10","19950351-3","20095988-4","19952099-2","20019105-4","19954445-7","20103606-8","19942777-12","19952097-4","20084373-4","20098317-1","20084373-5","20007753-8","20095210-1","19937395-1","20062852-1","20096414-1","46144-17","20010932-1","19941538-1","20007753-5","19959949-7","20100563-1","20019105-1","20014778-9","20014778-5","19960016-1","19959519-1","19937677-1","19954446-2","20098317-2","19942777-2","19954446-14","19959949-11","19939440-8","20003837-1","20037727-1","19944708-8","19954445-2","19959519-5","36070-16","19959949-6","19939440-2","20095993-19","35442-3","46144-19","19936933-1","20011002-1","20098317-2","19959949-4","20103606-2","19949455-2","20097927-1","19952097-4","19954445-14","19959949-21","19937980-1","19959519-5","19959949-2","20060323-7","19939440-3","19964018-4","19967591-1","20066786-2","19954446-12","20067040-15","20071503-1","19982071-1","20029777-6","20095988-2","20067760-26","19959949-9","20077036-1","19959949-11","19939438-8","53896-1","19939440-9","19967936-1","19967974-1","19944708-2","19954445-11","20066786-10","20007753-8","36070-10","19939438-6","19944708-10","19959519-2","20019105-9","19937677-3","19950351-2","20077036-3","19942777-5","19954445-15","20095993-18","20012769-1","20100562-2","20096412-3","20095993-25","20098317-1","20067040-5","19939440-6","46144-7","20095993-13","20067760-2","19959519-3","20019105-9","20014765-2","19959949-15","36070-11","20095993-9","20116817-7","20095993-7","20098317-2","19959949-17","35448-4","20066786-5","20095993-22","21531-2","19959519-2","36070-8","20066786-15","19944708-13","20011002-1","20098322-1","19936933-1","53896-4","19946123-2","20064994-1","21531-2","20089956-1","20100562-1","19959949-16","20014778-3","36070-19","20099302-14","20066786-11","20062272-4","19936933-2","19946123-1","20095072-2","226777-1","20019105-5","20098317-1","20066786-2","20060323-6","53896-1","36070-17","36070-10","20083476-2","21531-1","20077036-1","20090359-3","19959949-12","20098317-1","19942777-5","20083476-5","20116817-10","20096414-2","36070-15","20062272-1","20099893-1","20084373-2","20066786-1","20037727-2","20095993-17","20029778-6","20095993-11","19959949-7","36070-3","19936933-2","53896-4","53896-7","19944708-15","19936933-2","36070-28","20099302-6","20037727-2","19964018-5","20019105-5","19952099-3","20011828-1","19964018-2","19952097-4","226777-2","19959949-15","19939438-1","19954445-13","20099302-12","20099302-15","20062338-1","36070-23","20060323-10","20096777-1","20007753-4","35448-5","20099302-2","20066786-12","53896-6","19954445-4","19939440-1","20092037-1","19942777-7","20019105-8","20067760-1","20014765-3","19959949-10","19937980-4","20109362-1","19959949-11","20095993-21","19959949-17","19959949-3","19937980-1","19959949-16","19964018-3","20021508-9","19939440-10","20088786-1","20008398-1","19942777-9","20103747-2","20099302-9","20025387-3","20096417-3","20060323-1","20083476-2","20011001-1","226777-2","20098317-1","53896-4","46144-2","19952097-1","36070-12","20062272-2","20104331-1","20095993-10","20096413-5","19935954-1","19959949-2","19959949-16","19944149-1","20097894-2","20014597-1","19950351-2","20067040-33","20016861-2","20095072-2","20092037-1","20100562-1","19959949-10","19959949-9","19960016-2","20095993-11",
"20104331-1","20103606-5","20070206-1","36070-21","46263-1","19936934-3","20060323-12","19942777-13","20104404-1","20060323-6","20067760-10","20097800-5","19941538-1","20062273-1","19959949-15","19967591-2","20071695-1","20095993-24","20013777-1","20099302-8","19967208-1","19954446-9","20099302-5","20067040-6","19959949-9","20014778-4","20116817-6","19959949-22","19939440-3","20090678-1","20095072-1","20091316-1","53896-7","19967591-1","19959949-14","20060323-11","20029778-5","21531-1","36070-25","20099302-5","20080054-1","20066786-1","20025935-1","20067040-30","19961319-2","20096414-1","20096777-1","19942777-13","20029778-5","20021508-14","20062338-1","19942777-3","20090359-4","20099302-9","20014772-1","19959949-14","20014597-4","19959949-5","19939438-2","20109362-1","20095993-3","20088786-3","36070-2","19939440-8","20062272-3","19952097-2","20029778-6","20020276-2","20008046-4","53896-6","20008398-1","20014778-9","20067760-20","19959949-17","21531-1","19944708-11","20100557-1","19946123-1","19954445-13","19906237-3","20095993-12","20012260-1","19939438-5","226777-1","20067760-9","19959949-22","46144-11","20100562-1","20008398-1","46144-6","19937980-2","46265-1","20014765-2","20098317-1","19961319-4","19942777-4","19937677-2","20095993-25","53896-5","20029777-6","20097894-1","20071691-1","20100049-1","20067040-1","19939438-2","20019105-10","20066786-13","19935952-1","19959519-6","20010934-1","20083476-1","35448-4","20060323-14","19959949-19","20018482-1","20097888-2","20064604-1","20078383-1","20008398-1","19939440-4","226777-2","20066786-2","20007753-7","36070-14","20021508-10","36070-19","19952097-1","20037727-1","35448-5","20066786-15","20109362-2","19942777-10","19952097-3","20097927-3","20103606-4","20116817-7","20103606-3","19959949-10","19946485-1","20107496-5","20096414-3","36070-20","20103606-10","35442-1","20100562-2","20029777-7","19967591-1","20099302-4","20007753-2","36070-5","19944708-12","19941538-1","20005641-1","20104404-1","46265-1","20067040-22","36070-6","20029778-8","20083480-4","19936933-1","19942777-4","20095990-2","20029778-9","20070206-1","19946485-3","46144-12","20029778-4","20071695-1","20007753-7","19959949-5","20100562-1","53896-6","35448-1","19942777-4","20083480-5","19959949-14","19959949-6","19944708-5","20096417-3","46144-21","19935953-1","20100562-2","19944708-11","19946485-3","20071241-6","20094214-1","36070-8","19942777-11","20014778-10","20029777-4","53896-3","19954446-15","19949455-1","20016861-1","201175-3","20095993-12","19944708-4","20063469-1","19954445-9","20014778-1","20095993-1","36070-1","46262-1","19939438-3","36070-19","20007753-4","20010932-1","19942777-11","20095988-5","20014777-1","20096414-1","20100562-1","20089956-1","19942777-10","19959519-6","20062272-2","19939438-3","20116817-8","19959949-16","20097888-1","20013834-1","20025387-1","20097888-1","19945093-4","20095988-2","20014765-3","20014778-7","36070-20","19959949-12","20025937-1","20095988-5","53896-2","19944708-7","20029777-9","20096413-5","20007753-1","20099302-6","19959949-8","20064604-1","20066786-11","20116817-5","19939438-6","20029778-3","19935952-1","201175-1","20066786-3","20067760-23","19959949-11","19959949-13","19952099-4","20116817-10","19959949-17","19942777-7","20067760-29","20095993-14","20071241-10","19939440-1","20096412-1","19959949-22","20095993-28","20099893-2","20097927-2","20067760-11","20066786-9","19942777-9","20008046-2","20064116-1","20019105-4","19954445-8","20021508-12","19959949-8","20067211-1","20100562-1","20104331-1","46144-2","19967591-1","46262-1","20060323-13","20067040-27","20103436-1","46144-1","19939440-7","20116817-9","19959949-16","19944708-9","36070-29","46144-13","20060323-13","21535-1","20099893-1","19959949-18","19944149-1","19959949-20","20095990-2","226777-1","46144-1","20067040-26","20097894-2","19942777-9","20103747-5","19954446-13","20095993-6","19945093-2","20066786-8","20037727-3","20064994-1","20067040-7","19959949-17","20103606-9","19950351-3","19967936-1","19945093-3","20006244-2","20025937-2","20100562-2","19954446-16","20091316-1","20096412-2","19942777-13","19942777-6","19950351-3","20096414-3","20109362-6","20029778-4","53896-8","20003837-1","20066786-8","19959519-5","19967591-2","20006838-1","20099302-1","20007753-7","20062272-1","19959949-8","19937980-4","19942777-1","20019105-2","20084373-6","20019105-1","20077036-3","19959949-2","20092153-1","20060323-12","19939440-5","20007753-3","20095993-8","20029778-7","19954446-10","20098317-2","19959949-6","20014777-1","46264-1","19967591-1","19950351-1","20095993-15","35448-3","19952097-2","20098317-1","19906237-5","19954445-1","19952099-1","20095988-4","20013777-3","46144-7","20090678-1","20066850-1","20067211-1","20062272-1","19959949-14","19944708-3","19942777-8","20067040-35","19946485-5","19959949-19","202576-1","19944708-4","19942777-6","20066786-9","20095993-21","20109362-4","20006838-2","20010932-1","19950351-2","20063485-1","19959949-2","36070-12","20118477-1","20104162-3","20098317-1","20099302-11","20025387-1","20098317-2","20080054-1","36070-23","20008046-1","20067760-13","20029777-3","216264-2","20029777-7","19959949-8","20055046-1","19945093-4","20095988-1","20014778-8","20107420-1","19946485-4","20096412-4","19944708-8","19944708-3","20014765-1","20099302-7","20037727-3","19967591-1","20067760-30","46144-21","20025387-4","20097888-3","20021508-8","19959949-12","20008046-4","19944149-1","20014765-3","36070-15","19959949-9","20077036-7","19959949-7","20099302-16","46144-14","202576-2","53896-8","20099302-12","19959949-4","35442-3","19959949-15","20084373-3","46144-10","20095993-20","19950351-1","20097894-3","20003837-1","20097800-2","19939440-4","46144-4","20095993-14","20018482-1","19952099-2","36070-14","20013832-1","20083476-4","19954445-6","20119731-2","215183-1","19954445-11","19954445-7","19954445-5","19954445-5","19954445-10","19954446-4","19954445-8","19954445-4","20118394-1","19954445-14","19954445-6","19954446-9","19954445-7","19954446-14","19954445-2","19954445-3","20121471-1","19954445-12","20118394-1","19954446-6","19954445-1","19954446-13","19954445-14","19954445-16","215183-2","19954445-15","19954445-2","215183-1","19954446-10","19954445-13","19954445-11","19954445-4","19954445-9","19954445-16","19954445-12","215183-2","19954445-13","19954445-8","19954446-3","19954446-1","19954445-9","19954445-15","19954446-5","19954445-10","19954446-2","19954446-11","215183-1","19954446-12","20119731-2","215183-2","19954446-18","19954446-7","19954446-17","19954445-3","19954446-8","19954446-15","20121471-1","19954446-16","19954445-1","20092577-1","19927243-1","20092577-1","20121468-1","20121468-1","19927243-2","19927243-2","20011067-1","20011067-1","19927243-1"};
            return listCums.Contains(PE_DrugPOSOneFirstCycle);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true)) NonValidMessages.Add($"94| Error en variable 54. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 54 - 1 administrado al usuario- Medicamento no POS 1 administrado al usuario”, Debe ser  maximo 20 caracteres.");
            if (!(PE_DrugPOSOneFirstCycle == "55" || PE_DrugPOSOneFirstCycle == "98" || PE_DrugPOSOneFirstCycle == "97" || !(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle)))) NonValidMessages.Add($"94| Error en variable 54. Valor no valido en “Medicamento Antineoplásico o terapia hormonal para el cáncer no enunciado en las variables 53.1 a 54 - 1 administrado al usuario- Medicamento no POS 1 administrado al usuario”.");
            if (!((new long[] { 1, 2 }).Contains(PE_Chemotherapy) || (new long[] { 55, 98 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"94| Error en variable 54. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"94| Error en variable 54. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(Cums32 == true || Cums32 != true)) NonValidMessages.Add($"94| Error en variable 54. Valor no valido en “Código de medicamento-CUMS”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "55") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "98") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Si registra 97 en la variable 54, debe registrar 1 O 2 en la variable 45 '¿Recibió el usuario quimioterapia u otra terapia sistémica  dentro del periodo de corte actual? ' Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Si registra 97 en la variable 54, debe registrar 1 O 2 en la variable 45 '¿Recibió el usuario quimioterapia u otra terapia sistémica  dentro del periodo de corte actual? ' Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Si registra 97 en la variable 54, debe registrar 1 O 2 en la variable 45 '¿Recibió el usuario quimioterapia u otra terapia sistémica  dentro del periodo de corte actual? ' Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_DrugPOSOneFirstCycle == "97") && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. Si registra 97 en la variable 54, debe registrar 1 O 2 en la variable 45 '¿Recibió el usuario quimioterapia u otra terapia sistémica  dentro del periodo de corte actual? ' Y No recibir medicamentos diferentes a los enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 1, 2 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (Cums32 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "97", "98", "55" }.Contains(PE_DrugPOSOneFirstCycle))) && ((new long[] { 55, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (Cums32 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"94| Error en variable 54. El codigo del medicamento registrado debe ser diferentes a los medicamentos enunciados en las variables 53.1 a la 53.32.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Doxorubicina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CADOXORUBI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.11
        /// </sumary>
        private long PE_DoxorubicinLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADOXORUBI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Doxorubicina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_DoxorubicinLastCycle">variable 66.11</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_DoxorubicinLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DoxorubicinLastCycle = PE_DoxorubicinLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinLastCycle) || PE_DoxorubicinLastCycle == 55 || PE_DoxorubicinLastCycle == 98)) NonValidMessages.Add($"117| Error en variable 66.11. Valor no valido en “En este último esquema el usuario recibió Doxorubicina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"117| Error en variable 66.11. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DoxorubicinLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DoxorubicinLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"117| Error en variable 66.11. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DoxorubicinLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Doxorubicina
    /// </sumary> 
    public sealed class RUL_CADOXOFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_DoxorubicinFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADOXOFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Doxorubicina
        /// </sumary>
        /// <param name="PE_DoxorubicinFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_DoxorubicinFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DoxorubicinFirstCycle = PE_DoxorubicinFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinFirstCycle) || PE_DoxorubicinFirstCycle == 98 || PE_DoxorubicinFirstCycle == 55)) NonValidMessages.Add($"72| Error en variable 53.11. Valor no valido en “En este primer o único esquema el usuario recibió Doxorubicina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"72| Error en variable 53.11. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DoxorubicinFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DoxorubicinFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DoxorubicinFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DoxorubicinFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"72| Error en variable 53.11. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Novedad ADMINISTRATIVA del usuario respecto al reporte anterior
    /// </sumary> 
    public sealed class RUL_CADMINOVEL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 128
        /// </sumary>
        private long PE_AdministrativeNovelty;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimenType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADMINOVEL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Novedad ADMINISTRATIVA del usuario respecto al reporte anterior
        /// </sumary>
        /// <param name="PE_AdministrativeNovelty">variable 128</param>
        /// <param name="PE_RegimenType">V10</param>
        public RuntimeResult<string> Execute(long PE_AdministrativeNovelty, string PE_RegimenType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AdministrativeNovelty = PE_AdministrativeNovelty;
                this.PE_RegimenType = PE_RegimenType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15 }).Contains(PE_AdministrativeNovelty) || PE_AdministrativeNovelty == 14)) NonValidMessages.Add($"206| Error en variable 128. Valor no valido en “Novedad ADMINISTRATIVA del usuario respecto al reporte anterior”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimenType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimenType))) NonValidMessages.Add($"206| Error en variable 128. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15 }).Contains(PE_AdministrativeNovelty)) && ((new string[] { "C", "S" }).Contains(PE_RegimenType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15 }).Contains(PE_AdministrativeNovelty)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimenType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AdministrativeNovelty == 14) && ((new string[] { "C", "S" }).Contains(PE_RegimenType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"206| Error en variable 128. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de desafiliación de la EPS
    /// </sumary> 
    public sealed class RUL_CADISCLAIM
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DisclaimerDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// V7
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V7
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADISCLAIM() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de desafiliación de la EPS
        /// </sumary>
        /// <param name="PE_DisclaimerDate">Fecha</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        /// <param name="PE_BirthDate">V7</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DisclaimerDate, string Pe_RegimeType, DateTime PE_BirthDate, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DisclaimerDate = PE_DisclaimerDate;
                this.Pe_RegimeType = Pe_RegimeType;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DisclaimerDate >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DisclaimerDate <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DisclaimerDate > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate) || PE_DisclaimerDate == new DateTime(1846, 01, 01))) NonValidMessages.Add($"208| Error en variable 130. Valor no valido en “Fecha de desafiliación de la EPS”. ");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"208| Error en variable 130. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"208|Error en variable 130. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"208|Error en variable 130. La fecha es posterior a la fecha de Corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DisclaimerDate > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208|Error en variable 130. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DisclaimerDate)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208| Error en variable 130. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208| Error en variable 130. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DisclaimerDate == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208| Error en variable 130. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"208| Error en variable 130. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Motivo por el cual el usuario no tuvo diagnóstico por histopatología a la fecha de corte (aplica para registros con respuesta igual a 7 en la variable anterior)
    /// </sumary> 
    public sealed class RUL_CADIAGHIST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Motivo por el cual el usuario no tuvo diagnóstico por histopatología a la fecha de corte (aplica para registros con respuesta igual a 7 en la variable anterior)
        /// </sumary>
        private long PE_DiagnosticHistopathology;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// v18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// v21
        /// </sumary>
        private long PE_TypeTest;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADIAGHIST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Motivo por el cual el usuario no tuvo diagnóstico por histopatología a la fecha de corte (aplica para registros con respuesta igual a 7 en la variable anterior)
        /// </sumary>
        /// <param name="PE_DiagnosticHistopathology">Motivo por el cual el usuario no tuvo diagnóstico por histopatología a la fecha de corte (aplica para registros con respuesta igual a 7 en la variable anterior)</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">v18</param>
        /// <param name="PE_TypeTest">v21</param>
        public RuntimeResult<string> Execute(long PE_DiagnosticHistopathology, string PE_RegimeType, DateTime PE_DIAGNOSISDATE, long PE_TypeTest)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DiagnosticHistopathology = PE_DiagnosticHistopathology;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_TypeTest = PE_TypeTest;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology) || PE_DiagnosticHistopathology == 55 || PE_DiagnosticHistopathology == 98 || PE_DiagnosticHistopathology == 99)) NonValidMessages.Add($"22| Error en variable 22. Valor no valido en Motivo por el cual el usuario no tuvo diagnostico por histopatologia a la fecha de corte. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"22| Error en variable 22. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"22|Error en variable 22. La opcion 99 es valida en caso de diagnostico antes de 2015-01-01. Variable 18.");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"22| Error en variable 22. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5 }).Contains(PE_DiagnosticHistopathology)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22.Si digita 98 no debe registra 7 en la variable 21.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22.Si digita 98 no debe registra 7 en la variable 21.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22.Si digita 98 no debe registra 7 en la variable 21.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22.Si digita 98 no debe registra 7 en la variable 21.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22.Debe registra 7 en la variable 21 'Tipo de estudio con el que se realizó el diagnóstico de cáncer'", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22|Error en variable 22. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DiagnosticHistopathology == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TypeTest == 7))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"22| Error en variable 22. Valor no valido en “Tipo de estudio con el que se realizó el diagnóstico de cáncer”.variable 21, Debio registrar la opcion 7.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de Diagnóstico del Cancer reportado
    /// </sumary> 
    public sealed class RUL_CADIAGDATE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Fecha de afiliacion
        /// </sumary>
        private DateTime PE_AffiliationDate;
        /// <sumary>
        /// Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// Variable calculada
        /// </sumary>
        private bool VC_CutOffDate;
        /// <sumary>
        /// Fecha de afiliacion
        /// </sumary>
        private bool VC_AffiliationDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADIAGDATE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        /// <param name="PE_DIAGNOSISDATE">Fecha de Diagnóstico del Cancer reportado</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_CUTDATE">Fecha de Corte</param>
        /// <param name="PE_AffiliationDate">Fecha de afiliacion</param>
        public RuntimeResult<string> Execute(DateTime PE_DIAGNOSISDATE, DateTime PE_BirthDate, string PE_RegimeType, DateTime PE_CUTDATE, DateTime PE_AffiliationDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_AffiliationDate = PE_AffiliationDate;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CutOffDate = FUNC_VC_CutOffDate();
                this.VC_AffiliationDate = FUNC_VC_AffiliationDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DIAGNOSISDATE >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutOffDate()
        {
            return (PE_DIAGNOSISDATE <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_AffiliationDate()
        {
            return (PE_DIAGNOSISDATE >= PE_AffiliationDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DIAGNOSISDATE > new DateTime(1900, 01, 01) || PE_DIAGNOSISDATE == new DateTime(1800, 01, 01) || PE_DIAGNOSISDATE == new DateTime(1846, 01, 01))) NonValidMessages.Add($"18| Error en variable 18. Valor no valido en Fecha de Diagnostico del Cancer reportado. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"18| Error en variable 18. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable 7.");
            if (!(VC_CutOffDate == true || VC_CutOffDate != true)) NonValidMessages.Add($"18|Error en variable 18. La fecha es posterior a la fecha de Corte. Variable 184.");
            if (!(VC_AffiliationDate == true || VC_AffiliationDate != true)) NonValidMessages.Add($"18|Error en variable 18, La Fecha de Diagnostico del Cancer reportado debe ser mayor o igual   a Fecha de afiliacion a la EAPB-variable 16.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18, La “Fecha de Diagnóstico del Cáncer reportado” debe ser mayor o igual   a “Fecha de afiliación a la EAPB”-variable 16.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18, La “Fecha de Diagnóstico del Cáncer reportado” debe ser mayor o igual   a “Fecha de afiliación a la EAPB”-variable 16.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18|Error en variable 18. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1800, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate == true) && (VC_CutOffDate != true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate == true) && (VC_AffiliationDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if ((PE_DIAGNOSISDATE == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_BirthDate != true) && (VC_CutOffDate != true) && (VC_AffiliationDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"18| Error en variable 18. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último esquema el usuario recibió Dexametasona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
    /// </sumary> 
    public sealed class RUL_CADEXAMETH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.32
        /// </sumary>
        private long PE_DexamethasoneLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADEXAMETH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último esquema el usuario recibió Dexametasona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        /// <param name="PE_DexamethasoneLastCycle">variable 66.32</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_DexamethasoneLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DexamethasoneLastCycle = PE_DexamethasoneLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneLastCycle) || PE_DexamethasoneLastCycle == 98 || PE_DexamethasoneLastCycle == 55)) NonValidMessages.Add($"138| Error en variable 66.32. Valor no valido en “En este último esquema el usuario recibió Dexametasona (- En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"138| Error en variable 66.32. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DexamethasoneLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DexamethasoneLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DexamethasoneLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"138| Error en variable 66.32. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Dexametasona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
    /// </sumary> 
    public sealed class RUL_CADEXAFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_DexamethasoneFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADEXAFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Dexametasona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)
        /// </sumary>
        /// <param name="PE_DexamethasoneFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_DexamethasoneFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DexamethasoneFirstCycle = PE_DexamethasoneFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneFirstCycle) || PE_DexamethasoneFirstCycle == 98 || PE_DexamethasoneFirstCycle == 55)) NonValidMessages.Add($"93| Error en variable 53.32. Valor no valido en “En este primer o único esquema el usuario recibió Dexametasona (En uso intratecal o manejo exclusivo de hematolinfáticos contabilizar como antineoplásico)”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"93| Error en variable 53.32. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DexamethasoneFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DexamethasoneFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DexamethasoneFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DexamethasoneFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"93| Error en variable 53.32. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de muerte
    /// </sumary> 
    public sealed class RUL_CADEATHDAT
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DeathDate;
        /// <sumary>
        /// F134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V7
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// V7
        /// </sumary>
        private bool VC_BirthDate;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private readonly RUL_CUTDATE1 RUL_CUTDATE1 = new RUL_CUTDATE1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADEATHDAT() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de muerte
        /// </sumary>
        /// <param name="PE_DeathDate">Fecha</param>
        /// <param name="PE_CUTDATE">F134</param>
        /// <param name="PE_BirthDate">V7</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(DateTime PE_DeathDate, DateTime PE_CUTDATE, DateTime PE_BirthDate, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DeathDate = PE_DeathDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.Pe_RegimeType = Pe_RegimeType;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DeathDate >= PE_BirthDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DeathDate > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DeathDate) || PE_DeathDate == new DateTime(1846, 01, 01))) NonValidMessages.Add($"209| Error en variable 131. Valor no valido en “Fecha de muerte” ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"209|Error en variable 131. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"209| Error en variable 131. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DeathDate > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    return RUL_CUTDATE1.Execute(
PE_CUTDATE,
PE_DeathDate

).Result;
                }, $"");
            }
            else if ((PE_DeathDate > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    return RUL_CUTDATE1.Execute(
PE_CUTDATE,
PE_DeathDate

).Result;
                }, $"");
            }
            else if ((PE_DeathDate > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"209|Error en variable 131. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DeathDate > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"209|Error en variable 131. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DeathDate)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DeathDate)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DeathDate)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01) }).Contains(PE_DeathDate)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DeathDate == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DeathDate == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"209| Error en variable 131. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DeathDate == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"209| Error en variable 131. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Causa de muerte
    /// </sumary> 
    public sealed class RUL_CADEATHCAU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 132
        /// </sumary>
        private long PE_DeathCause;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADEATHCAU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Causa de muerte
        /// </sumary>
        /// <param name="PE_DeathCause">variable 132</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_DeathCause, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DeathCause = PE_DeathCause;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_DeathCause) || PE_DeathCause == 55)) NonValidMessages.Add($"210| Error en variable 132. Valor no valido en “Causa de muerte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"210| Error en variable 132. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_DeathCause)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 98 }).Contains(PE_DeathCause)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DeathCause == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"210| Error en variable 132. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de inicio del primer ciclo de quimioterapia de este corte
    /// </sumary> 
    public sealed class RUL_CADATFIRST1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATFIRST1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de inicio del primer ciclo de quimioterapia de este corte
        /// </sumary>
        /// <param name="PE_DateFirstCycle">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstCycle, DateTime PE_BirthDate, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateFirstCycle >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateFirstCycle >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateFirstCycle <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFirstCycle > new DateTime(1900, 01, 01))) NonValidMessages.Add($"57| Error en variable 49. Valor no valido en “Fecha de inicio del primer o único esquema de quimioterapia o terapia sistémica que recibió en este periodo”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"57|Error en variable 49. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"57|Error en variable 49. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"57|Error en variable 49. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la “Fecha de inicio del primer o único esquema de quimioterapia o terapia sistémica”. Variable 18.", this.FileName);
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la “Fecha de inicio del primer o único esquema de quimioterapia o terapia sistémica”. Variable 18.", this.FileName);
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57|Error en variable 49. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de inicio del primer ciclo de quimioterapia de este corte
    /// </sumary> 
    public sealed class RUL_CADATFIRST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// V45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de inicio del primer ciclo de quimioterapia de este corte
        /// </sumary>
        private readonly RUL_CADATFIRST1 RUL_CADATFIRST1 = new RUL_CADATFIRST1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATFIRST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de inicio del primer ciclo de quimioterapia de este corte
        /// </sumary>
        /// <param name="PE_DateFirstCycle">Fecha</param>
        /// <param name="PE_Chemotherapy">V45</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstCycle, long PE_Chemotherapy, DateTime PE_BirthDate, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFirstCycle > new DateTime(1900, 01, 01) || PE_DateFirstCycle == new DateTime(1845, 01, 01) || PE_DateFirstCycle == new DateTime(1846, 01, 01))) NonValidMessages.Add($"57| Error en variable 49. Valor no valido en “Fecha de inicio del primer o único esquema de quimioterapia o terapia sistémica que recibió en este periodo”.");
            if (!((new long[] { 2, 98 }).Contains(PE_Chemotherapy) || (new long[] { 1, 55 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"57| Error en variable 49. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"57| Error en variable 49. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATFIRST1.Execute(
PE_DateFirstCycle,
PE_BirthDate,
PE_DIAGNOSISDATE,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATFIRST1.Execute(
PE_DateFirstCycle,
PE_BirthDate,
PE_DIAGNOSISDATE,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATFIRST1.Execute(
PE_DateFirstCycle,
PE_BirthDate,
PE_DIAGNOSISDATE,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATFIRST1.Execute(
PE_DateFirstCycle,
PE_BirthDate,
PE_DIAGNOSISDATE,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57| Error en variable 49. Si registro 1845-01-01 en la variable 49 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_DateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57| Error en variable 49. Si registro 1845-01-01 en la variable 49 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_DateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57| Error en variable 49. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"57| Error en variable 49. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de trasplante
    /// </sumary> 
    public sealed class RUL_CADATETRAN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateTransplant;
        /// <sumary>
        /// variable 106
        /// </sumary>
        private long PE_TransplantProgenitorCells;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATETRAN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de trasplante
        /// </sumary>
        /// <param name="PE_DateTransplant">Fecha</param>
        /// <param name="PE_TransplantProgenitorCells">variable 106</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTransplant, long PE_TransplantProgenitorCells, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTransplant = PE_DateTransplant;
                this.PE_TransplantProgenitorCells = PE_TransplantProgenitorCells;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateTransplant >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateTransplant <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTransplant > new DateTime(1900, 01, 01) || PE_DateTransplant == new DateTime(1845, 01, 01) || PE_DateTransplant == new DateTime(1846, 01, 01))) NonValidMessages.Add($"181| Error en variable 109. Valor no valido en “Fecha de trasplante” ");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"181|Error en variable 109. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"181|Error en variable 109. Valor no valido en fecha de corte. Variable 134.");
            if (!(PE_TransplantProgenitorCells == 98 || (new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells))) NonValidMessages.Add($"181|Error en variable 109. Valor no valido en “¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?”. Variable 106");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181|Error en variable 109. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de trasplante”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"109|Error en variable 109. Si registro 1845-01-01 debe registrar la opción 98 en variable 106.", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && (PE_TransplantProgenitorCells == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTransplant == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new long[] { 1, 2, 55 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"181| Error en variable 109. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha en que se realizó esta estadificación
    /// </sumary> 
    public sealed class RUL_CADATESTAG
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha en que se realizó esta especificación
        /// </sumary>
        private DateTime PE_DateStaging;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V29
        /// </sumary>
        private long PE_SolidTumorStaging;
        /// <sumary>
        /// V19
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// v18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// Resultado variable 29
        /// </sumary>
        private bool VC_SolidTumorStaging;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESTAG() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha en que se realizó esta estadificación
        /// </sumary>
        /// <param name="PE_DateStaging">Fecha en que se realizó esta especificación</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_SolidTumorStaging">V29</param>
        public RuntimeResult<string> Execute(DateTime PE_DateStaging, DateTime PE_DateRemission, DateTime PE_CUTDATE, DateTime PE_DIAGNOSISDATE, string PE_RegimeType, long PE_SolidTumorStaging)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateStaging = PE_DateStaging;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_SolidTumorStaging = PE_SolidTumorStaging;
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_SolidTumorStaging = FUNC_VC_SolidTumorStaging();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_DateStaging >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateStaging <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DIAGNOSISDATE <= Convert.ToDateTime("01/01/2015"));
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_SolidTumorStaging()
        {
            return (PE_SolidTumorStaging == 93);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateStaging > new DateTime(1900, 01, 01) || PE_DateStaging == new DateTime(1800, 01, 01) || PE_DateStaging == new DateTime(1845, 01, 01) || PE_DateStaging == new DateTime(1846, 01, 01))) NonValidMessages.Add($"30| Error en variable 30. Valor no valido en Fecha en que se realizo esta estadificacion ");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"30|Error en variable 30. Valor no valido en Fecha de la nota de remision del medico o institucion general hacia la institucion que hizo el diagnostico. Variable 19.");
            if (!(VC_CUTDATE == true)) NonValidMessages.Add($"30|Error en variable 30. la Fecha en que se realizo esta estadificacion variable 30 es mayor a la  fecha de corte. Variable 134.");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"30|Error en variable 30. Valor no valido. En la fecha de Diagnostic-Variable 18.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"30| Error en variable 30. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_SolidTumorStaging == true || VC_SolidTumorStaging != true)) NonValidMessages.Add($"30|Error en variable 30. La opcion 1845-01-01 es valida en caso de que marco en la variable 29  Si es tumor solido, cual fue la primera estadificacion basada en TNM, FIGO, u otras compatibles con esta numeracion segun tumor.  la opcion 93");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1800, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1845, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30|Error en variable 30. La opción 1845-01-01 es válida en caso de que marcó en la variable 29 'Si es tumor sólido, cuál fue la primera estadificación basada en TNM, FIGO, u otras compatibles con esta numeración según tumor.' la opción 93", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateStaging == new DateTime(1846, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_SolidTumorStaging == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"30| Error en variable 30. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha en que se realizó la estadificación de Dukes
    /// </sumary> 
    public sealed class RUL_CADATESCOL1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateTestColorectalCancer;
        /// <sumary>
        /// v18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// v7
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESCOL1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha en que se realizó la estadificación de Dukes
        /// </sumary>
        /// <param name="PE_DateTestColorectalCancer">Fecha</param>
        /// <param name="PE_DIAGNOSISDATE">v18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTestColorectalCancer, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTestColorectalCancer = PE_DateTestColorectalCancer;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateTestColorectalCancer >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateTestColorectalCancer >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateTestColorectalCancer <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTestColorectalCancer > new DateTime(1900, 01, 01))) NonValidMessages.Add($"35| Error en variable 35. Valor no valido en “Fecha en que se realizó la estadificación de Dukes”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"35|Error en variable 35. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"35|Error en variable 35. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"35|Error en variable 35. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha en que se realizó la estadificación de Dukes”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha en que se realizó la estadificación de Dukes”. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7). ", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35|Error en variable 35. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha en que se realizó la estadificación de Dukes
    /// </sumary> 
    public sealed class RUL_CADATESCOL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateTestColorectalCancer;
        /// <sumary>
        /// v17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// v18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V34
        /// </sumary>
        private long PE_TestColorectalCancer;
        /// <sumary>
        /// v17
        /// </sumary>
        private bool VC_NameNeoplasia;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha en que se realizó la estadificación de Dukes
        /// </sumary>
        private readonly RUL_CADATESCOL1 RUL_CADATESCOL1 = new RUL_CADATESCOL1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESCOL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha en que se realizó la estadificación de Dukes
        /// </sumary>
        /// <param name="PE_DateTestColorectalCancer">Fecha</param>
        /// <param name="PE_NameNeoplasia">v17</param>
        /// <param name="PE_DIAGNOSISDATE">v18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_TestColorectalCancer">V34</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTestColorectalCancer, string PE_NameNeoplasia, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, DateTime PE_BirthDate, string PE_RegimeType, long PE_TestColorectalCancer)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTestColorectalCancer = PE_DateTestColorectalCancer;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_TestColorectalCancer = PE_TestColorectalCancer;
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia()
        {
            List<string> listNaneoPlasia = new List<string>
{
  "C180",
   "C181",
   "C182",
    "C183",
    "C184",
    "C185",
    "C186",
    "C187",
    "C188",
    "C189",
    "C20X",
   "C210",
    "C211",
    "C212",
    "C218",
    "C19X",
    "D010",
    "D011",
    "D012",
     "D013"


  };
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTestColorectalCancer > new DateTime(1900, 01, 01) || PE_DateTestColorectalCancer == new DateTime(1845, 01, 01) || PE_DateTestColorectalCancer == new DateTime(1846, 01, 01))) NonValidMessages.Add($"35| Error en variable 35. Valor no valido en Fecha en que se realizo la estadificacion de Dukes. ");
            if (!(VC_NameNeoplasia == true || VC_NameNeoplasia != true)) NonValidMessages.Add($"35| Error en variable 35. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"35| Error en variable 35. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_TestColorectalCancer == 99 || (new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer))) NonValidMessages.Add($"35| Error en variable 35. Valor no valido en Para cancer colorrectal, estadificacion de Dukes. Variable 34.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESCOL1.Execute(
PE_DateTestColorectalCancer,
PE_DIAGNOSISDATE,
PE_CUTDATE,
PE_BirthDate
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Si registro 1845-01-01 debe (no ser cáncer colorrectal (Variable 17) o haber registrado 99 en la variable 34).", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Si registro 1845-01-01 debe (no ser cáncer colorrectal (Variable 17) o haber registrado 99 en la variable 34).", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 3, 4, 55, 98 }).Contains(PE_TestColorectalCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateTestColorectalCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_TestColorectalCancer == 99))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"35| Error en variable 35. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
    /// </sumary> 
    public sealed class RUL_CADATESBRE10
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private DateTime PE_DateTestBreastCancer;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESBRE10() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        /// <param name="PE_DateTestBreastCancer">Para cáncer de mama, fecha de realización de la primera o única prueba HER2</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTestBreastCancer, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTestBreastCancer = PE_DateTestBreastCancer;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTestBreastCancer == new DateTime(1846, 01, 01))) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en “Para cáncer de mama, fecha de realización de la primera o única prueba HER2”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
    /// </sumary> 
    public sealed class RUL_CADATESBRE1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private DateTime PE_DateTestBreastCancer;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V19
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESBRE1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        /// <param name="PE_DateTestBreastCancer">Para cáncer de mama, fecha de realización de la primera o única prueba HER2</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTestBreastCancer, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTestBreastCancer = PE_DateTestBreastCancer;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_DateTestBreastCancer >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateTestBreastCancer <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTestBreastCancer > new DateTime(1900, 01, 01))) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en “Para cáncer de mama, fecha de realización de la primera o única prueba HER2”.");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"32|Error en variable 32. Valor no valido en “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"32|Error en variable 32. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
    /// </sumary> 
    public sealed class RUL_CADATESBRE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private DateTime PE_DateTestBreastCancer;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// variable 31
        /// </sumary>
        private long PE_TestBreastCancer;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia1;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia2;
        #endregion

        #region Members
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private readonly RUL_CADATESBRE10 RUL_CADATESBRE10 = new RUL_CADATESBRE10();
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        private readonly RUL_CADATESBRE1 RUL_CADATESBRE1 = new RUL_CADATESBRE1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATESBRE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Para cáncer de mama, fecha de realización de la primera o única prueba HER2
        /// </sumary>
        /// <param name="PE_DateTestBreastCancer">Para cáncer de mama, fecha de realización de la primera o única prueba HER2</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_TestBreastCancer">variable 31</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateTestBreastCancer, DateTime PE_DateRemission, DateTime PE_CUTDATE, string PE_NameNeoplasia, DateTime PE_DIAGNOSISDATE, long PE_TestBreastCancer, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateTestBreastCancer = PE_DateTestBreastCancer;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_TestBreastCancer = PE_TestBreastCancer;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_NameNeoplasia1 = FUNC_VC_NameNeoplasia1();
                this.VC_NameNeoplasia2 = FUNC_VC_NameNeoplasia2();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia1()
        {
            List<string> listNaneoPlasia = new List<string>
{
 "D050",
 "D051",
 "D057",
 "D059"};
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia2()
        {
            List<string> listNaneoPlasia = new List<string>
{
 "C500",
 "C501",
 "C502",
 "C503",
 "C504",
 "C505",
 "C506",
 "C508",
 "C509",
 "D050",
 "D051",
 "D057",
 "D059"
 };
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateTestBreastCancer > new DateTime(1900, 01, 01) || PE_DateTestBreastCancer == new DateTime(1800, 01, 01) || PE_DateTestBreastCancer == new DateTime(1840, 01, 01) || PE_DateTestBreastCancer == new DateTime(1845, 01, 01) || PE_DateTestBreastCancer == new DateTime(1846, 01, 01))) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en Para cancer de mama, fecha de realizacion de la primera o unica prueba HER2.");
            if (!(VC_NameNeoplasia1 == true || VC_NameNeoplasia1 != true)) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");
            if (!(VC_NameNeoplasia2 == true || VC_NameNeoplasia2 != true)) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"32|Error en variable 32. Valor no valido en Fecha de diagnostico del cancer reportado-Variable 18.");
            if (!(PE_TestBreastCancer == 2 || (new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer))) NonValidMessages.Add($"32| Error en variable 32. Valor no valido en Para cancer de mama, se le realizo a este usuario la prueba HER2 (llamado tambien receptor 2 del factor de crecimiento epidermico humano, tambien llamado erb-B2) antes del inicio del tratamiento?. Variable 31.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer > new DateTime(1900, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE1.Execute(
PE_DateTestBreastCancer,
PE_DateRemission,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1800, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32|Error en variable 32. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1840, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1840-01-01 debe ser cáncer de mama in situ.Variable 17.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1845-01-01 es porque (no es cáncer de mama) (Variable 17) o marcó la variable 31 con la opción 2.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1845-01-01 es porque (no es cáncer de mama) (Variable 17) o marcó la variable 31 con la opción 2.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1845-01-01 es porque (no es cáncer de mama) (Variable 17) o marcó la variable 31 con la opción 2.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"32| Error en variable 32. Si registro 1845-01-01 es porque (no es cáncer de mama) (Variable 17) o marcó la variable 31 con la opción 2.", this.FileName);
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1845, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 == true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new long[] { 1, 55, 97, 98, 99 }).Contains(PE_TestBreastCancer)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else if ((PE_DateTestBreastCancer == new DateTime(1846, 01, 01)) && (VC_NameNeoplasia1 != true) && (VC_NameNeoplasia2 != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (PE_TestBreastCancer == 2))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATESBRE10.Execute(
PE_DateTestBreastCancer,
PE_RegimeType
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
    /// </sumary> 
    public sealed class RUL_CADATEREMI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// Variable 18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Variable 134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// parámetro de entrada de plantilla
        /// </sumary>
        private DateTime PE_EntryDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// v18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// v134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// variable 20
        /// </sumary>
        private bool VC_EntryDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEREMI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico
        /// </sumary>
        /// <param name="PE_DateRemission">Fecha</param>
        /// <param name="PE_DIAGNOSISDATE">Variable 18</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">Variable 134</param>
        /// <param name="PE_EntryDate">parámetro de entrada de plantilla</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(DateTime PE_DateRemission, DateTime PE_DIAGNOSISDATE, DateTime PE_BirthDate, DateTime PE_CUTDATE, DateTime PE_EntryDate, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateRemission = PE_DateRemission;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_EntryDate = PE_EntryDate;
                this.Pe_RegimeType = Pe_RegimeType;
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_EntryDate = FUNC_VC_EntryDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateRemission <= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateRemission >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateRemission <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EntryDate()
        {
            return (PE_DateRemission <= PE_EntryDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateRemission > new DateTime(1900, 01, 01) || PE_DateRemission == new DateTime(1800, 01, 01) || PE_DateRemission == new DateTime(1846, 01, 01))) NonValidMessages.Add($"19| Error en variable 19. Valor no valido en Fecha de la nota de remision del medico o institucion general hacia la institucion que hizo el diagnostico. ");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable 18.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable 7.");
            if (!(VC_EntryDate == true || VC_EntryDate != true)) NonValidMessages.Add($"19| Error en variable 19. La fecha de remision no puede ser mayor a la fecha de ingreso a la institucion luego del diagnostico. variable 20.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"19| Error en variable 19. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"19|Error en variable 19. La fecha es posterior a la fecha de Corte. Variable 134.");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. La fecha de remisión no puede ser mayor a la fecha de ingreso a la institución luego del diagnóstico. variable (20).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La fecha de Diagnostico debe ser mayor-Variable (18).", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19|Error en variable 19. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate == true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE == true) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else if ((PE_DateRemission == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_BirthDate != true) && (VC_EntryDate != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)) && (VC_CUTDATE != true) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"19| Error en variable 19. Si registra 01-01-3546, no debe registrar N o P o E en la variable 10 Tipo de régimen. ﻿", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de la cirugía
    /// </sumary> 
    public sealed class RUL_CADATERECO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateReconstructiveSurgery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATERECO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de la cirugía
        /// </sumary>
        /// <param name="PE_DateReconstructiveSurgery">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateReconstructiveSurgery, DateTime PE_BirthDate, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateReconstructiveSurgery = PE_DateReconstructiveSurgery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateReconstructiveSurgery >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateReconstructiveSurgery >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateReconstructiveSurgery <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01) || PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01) || PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01))) NonValidMessages.Add($"184| Error en variable 112. Valor no valido en “Fecha de la cirugía reconstructiva:” ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"184|Error en variable 112. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"184|Error en variable 112. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"184|Error en variable 112. Valor no valido en fecha de corte. Variable 134.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"112|Error en variable 112. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"112|Error en variable 112. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de cirugía”. Variable 18.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de cirugía”. Variable 18.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de cirugía”. Variable 18.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la fecha de cirugía”. Variable 18.", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184|Error en variable 112. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateReconstructiveSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"184| Error en variable 112. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual
    /// </sumary> 
    public sealed class RUL_CADATERADI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateRadiotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Fecha de Diagnóstico del Cancer reportado
        /// </sumary>
        private DateTime PE_DiagnosisDate;
        /// <sumary>
        /// Regimen
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// ¿Recibió el usuario algún tipo de radioterapia en el corte actual?
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_DateRadiotherapy;
        /// <sumary>
        /// Valida que la fecha sea menor a la fecha de corte
        /// </sumary>
        private bool VC_CutDate;
        /// <sumary>
        /// valida que la fecha sea mayor a la fecha de diagnostico
        /// </sumary>
        private bool VC_DiagnosisDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATERADI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual
        /// </sumary>
        /// <param name="PE_DateRadiotherapy">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_DiagnosisDate">Fecha de Diagnóstico del Cancer reportado</param>
        /// <param name="PE_RegimeType">Regimen</param>
        /// <param name="PE_Radiotherapy">¿Recibió el usuario algún tipo de radioterapia en el corte actual?</param>
        public RuntimeResult<string> Execute(DateTime PE_DateRadiotherapy, DateTime PE_BirthDate, DateTime PE_CutDate, DateTime PE_DiagnosisDate, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateRadiotherapy = PE_DateRadiotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutDate = PE_CutDate;
                this.PE_DiagnosisDate = PE_DiagnosisDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.VC_DateRadiotherapy = FUNC_VC_DateRadiotherapy();
                this.VC_CutDate = FUNC_VC_CutDate();
                this.VC_DiagnosisDate = FUNC_VC_DiagnosisDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRadiotherapy()
        {
            return (PE_DateRadiotherapy >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutDate()
        {
            return (PE_DateRadiotherapy <= PE_CutDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DiagnosisDate()
        {
            return (PE_DateRadiotherapy >= PE_DiagnosisDate);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateRadiotherapy > new DateTime(1900, 01, 01) || PE_DateRadiotherapy == new DateTime(1845, 01, 01) || PE_DateRadiotherapy == new DateTime(1846, 01, 01))) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");
            if (!(VC_DateRadiotherapy == true || VC_DateRadiotherapy != true)) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual”.");
            if (!(VC_CutDate == true || VC_CutDate != true)) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual”.");
            if (!(VC_DiagnosisDate == true || VC_DiagnosisDate != true)) NonValidMessages.Add($"160| Error en variable 88. Valor no valido en “Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento. variable  7 y 159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado. Variable 18.", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la Fecha de Diagnóstico del Cancer reportado", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser mayor a la fecha de nacimiento", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. La Fecha de inicio de primer o único esquema de radioterapia suministrado en el corte actual debe ser menor a la fecha de corte", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1845-01-01 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy == true) && (VC_CutDate != true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate == true) && (VC_DiagnosisDate != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_DateRadiotherapy == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)) && (VC_DateRadiotherapy != true) && (VC_CutDate != true) && (VC_DiagnosisDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 88. Si registro 1846-01-01 debe registrar opcion C o S en variable 10", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de primera consulta con el servicio de psiquiatría (para todos los usuarios) en este corte
    /// </sumary> 
    public sealed class RUL_CADATEPSYC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DatePsychiatry;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEPSYC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de primera consulta con el servicio de psiquiatría (para todos los usuarios) en este corte
        /// </sumary>
        /// <param name="PE_DatePsychiatry">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DatePsychiatry, DateTime PE_BirthDate, string Pe_RegimeType, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DatePsychiatry = PE_DatePsychiatry;
                this.PE_BirthDate = PE_BirthDate;
                this.Pe_RegimeType = Pe_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DatePsychiatry >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DatePsychiatry >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DatePsychiatry <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DatePsychiatry > new DateTime(1900, 01, 01) || PE_DatePsychiatry == new DateTime(1845, 01, 01) || PE_DatePsychiatry == new DateTime(1846, 01, 01))) NonValidMessages.Add($"196| Error en variable 118. Valor no valido en “Fecha de primera consulta con el servicio de psiquiatría en este corte”. ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"196|Error en variable 118. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"196|Error en variable 118. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"196|Error en variable 118. Valor no valido en fecha de corte. Variable 134.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196|Error en variable 118. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DatePsychiatry == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"196| Error en variable 118. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de inicio del último ciclo de quimioterapia de este corte
    /// </sumary> 
    public sealed class RUL_CADATELAST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// variable 51
        /// </sumary>
        private DateTime PE_EndDateFirstCycle;
        /// <sumary>
        /// Regimen
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private bool VC_CutDate;
        /// <sumary>
        /// variable 58
        /// </sumary>
        private bool VC_EndDateFirstCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATELAST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de inicio del último ciclo de quimioterapia de este corte
        /// </sumary>
        /// <param name="PE_InitalDateLastCycle">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_EndDateFirstCycle">variable 51</param>
        /// <param name="PE_RegimeType">Regimen</param>
        public RuntimeResult<string> Execute(DateTime PE_InitalDateLastCycle, DateTime PE_BirthDate, DateTime PE_CutDate, DateTime PE_EndDateFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutDate = PE_CutDate;
                this.PE_EndDateFirstCycle = PE_EndDateFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CutDate = FUNC_VC_CutDate();
                this.VC_EndDateFirstCycle = FUNC_VC_EndDateFirstCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_InitalDateLastCycle >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutDate()
        {
            return (PE_InitalDateLastCycle <= PE_CutDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateFirstCycle()
        {
            return (PE_InitalDateLastCycle >= PE_EndDateFirstCycle);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_InitalDateLastCycle > new DateTime(1900, 01, 01) || PE_InitalDateLastCycle == new DateTime(1845, 01, 01) || PE_InitalDateLastCycle == new DateTime(1846, 01, 01))) NonValidMessages.Add($"'102| Error en variable 62. Valor no valido en “Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte. Si es hormonoterapia reporte la fecha de inicio del tratamiento actual, así haya sido iniciada previo al reporte actual:”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"'102| Error en variable 62. Valor no valido en “Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte. Si es hormonoterapia reporte la fecha de inicio del tratamiento actual, así haya sido iniciada previo al reporte actual:”.");
            if (!(VC_CutDate == true || VC_CutDate != true)) NonValidMessages.Add($"'102| Error en variable 62. Valor no valido en “Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte. Si es hormonoterapia reporte la fecha de inicio del tratamiento actual, así haya sido iniciada previo al reporte actual:”.");
            if (!(VC_EndDateFirstCycle == true || VC_EndDateFirstCycle != true)) NonValidMessages.Add($"'102| Error en variable 62. Valor no valido en “Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte. Si es hormonoterapia reporte la fecha de inicio del tratamiento actual, así haya sido iniciada previo al reporte actual:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"102| Error en variable 62. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62.La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es menor a la Fecha de finalización del primer o único esquema de este periodo de reporte, validar contra variable 58", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62.La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es menor a la Fecha de finalización del primer o único esquema de este periodo de reporte, validar contra variable 58", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es mayor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es mayor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es mayor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. La Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte es mayor a la fecha de corte", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'102|Error en variable 62. La fecha de nacimiento es mayor que la  Fecha de inicio del último esquema de quimioterapia o terapia sistémica de este periodo de reporte.'", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate == true) && (VC_EndDateFirstCycle != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_InitalDateLastCycle == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_CutDate != true) && (VC_EndDateFirstCycle != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"102|Error en variable 62. Si registra 1846-01-01 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de recolección de muestra para estudio histopatológico
    /// </sumary> 
    public sealed class RUL_CADATEHIST1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateHistopathological;
        /// <sumary>
        /// V7
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V7
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V19
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEHIST1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de recolección de muestra para estudio histopatológico
        /// </sumary>
        /// <param name="PE_DateHistopathological">Fecha</param>
        /// <param name="PE_BirthDate">V7</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHistopathological, DateTime PE_BirthDate, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHistopathological = PE_DateHistopathological;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateHistopathological >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_DateHistopathological >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateHistopathological <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateHistopathological > new DateTime(1900, 01, 01))) NonValidMessages.Add($"23| Error en variable 23. Valor no valido en “Fecha de recolección de muestra para estudio histopatológico”. ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"23|Error en variable 23. Valor no valido en fecha de nacimiento. -Variable (7).");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"23|Error en variable 23. Valor no valido en “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"23|Error en variable 23. La fecha es posterior a la fecha de Corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de recolección de muestra para estudio histopatológico
    /// </sumary> 
    public sealed class RUL_CADATEHIST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateHistopathological;
        /// <sumary>
        /// V7
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V21 Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private long PE_TypeTest;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de recolección de muestra para estudio histopatológico
        /// </sumary>
        private readonly RUL_CADATEHIST1 RUL_CADATEHIST1 = new RUL_CADATEHIST1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEHIST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de recolección de muestra para estudio histopatológico
        /// </sumary>
        /// <param name="PE_DateHistopathological">Fecha</param>
        /// <param name="PE_BirthDate">V7</param>
        /// <param name="PE_TypeTest">V21 Tipo de estudio con el que se realizó el diagnóstico de cáncer</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHistopathological, DateTime PE_BirthDate, long PE_TypeTest, string PE_RegimeType, DateTime PE_DIAGNOSISDATE, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHistopathological = PE_DateHistopathological;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_TypeTest = PE_TypeTest;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateHistopathological > new DateTime(1900, 01, 01) || PE_DateHistopathological == new DateTime(1800, 01, 01) || PE_DateHistopathological == new DateTime(1845, 01, 01) || PE_DateHistopathological == new DateTime(1846, 01, 01))) NonValidMessages.Add($"23| Error en variable 23. Valor no valido en Fecha de recoleccion de muestra para estudio histopatologico. ");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"23| Error en variable 23. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer. variable 21.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"23| Error en variable 23. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"23|Error en variable 23. Valor no valido en Fecha de diagnostico del cancer reportado-Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEHIST1.Execute(
PE_DateHistopathological,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23|Error en variable 23. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23| Error en variable 23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23| Error en variable 23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23| Error en variable 23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"23| Error en variable 23. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CADATEFIRS1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateFirstCycle;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V49
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// V49
        /// </sumary>
        private bool VC_DateFirstCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEFIRS1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_EndDateFirstCycle">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DateFirstCycle">V49</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateFirstCycle, DateTime PE_BirthDate, DateTime PE_CUTDATE, DateTime PE_DateFirstCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateFirstCycle = PE_EndDateFirstCycle;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_DateFirstCycle = FUNC_VC_DateFirstCycle();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_EndDateFirstCycle >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_EndDateFirstCycle <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstCycle()
        {
            return (PE_EndDateFirstCycle >= PE_DateFirstCycle);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateFirstCycle > new DateTime(1900, 01, 01))) NonValidMessages.Add($"98| Error en variable 58. Valor no valido en “Fecha de finalización del primer o único esquema de este periodo de reporte.”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"98|Error en variable 58. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"98|Error en variable 58. Valor no valido en fecha de corte. Variable 134.");
            if (!(VC_DateFirstCycle == true || VC_DateFirstCycle != true)) NonValidMessages.Add($"98| Error en variable 58. Valor no valido en “Fecha de inicio del primer ciclo de quimioterapia de este corte”. Variable 49.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE == true) && (VC_DateFirstCycle == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE == true) && (VC_DateFirstCycle != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98| Error en variable 58. La “Fecha de inicio del primer ciclo de quimioterapia de este corte” variable 49 debe ser menor a la “Fecha de finalización del primer o único esquema de este periodo de reporte” variable 58.", this.FileName);
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE != true) && (VC_DateFirstCycle == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE != true) && (VC_DateFirstCycle != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CUTDATE == true) && (VC_DateFirstCycle == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CUTDATE == true) && (VC_DateFirstCycle != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CUTDATE != true) && (VC_DateFirstCycle == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98|Error en variable 58. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CADATEFIRS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateFirstCycle;
        /// <sumary>
        /// V45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V49
        /// </sumary>
        private DateTime PE_DateFirstCycle;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de finalización del primer ciclo de este corte
        /// </sumary>
        private readonly RUL_CADATEFIRS1 RUL_CADATEFIRS1 = new RUL_CADATEFIRS1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEFIRS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_EndDateFirstCycle">Fecha</param>
        /// <param name="PE_Chemotherapy">V45</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DateFirstCycle">V49</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateFirstCycle, long PE_Chemotherapy, DateTime PE_BirthDate, DateTime PE_CUTDATE, DateTime PE_DateFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateFirstCycle = PE_EndDateFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DateFirstCycle = PE_DateFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateFirstCycle > new DateTime(1900, 01, 01) || PE_EndDateFirstCycle == new DateTime(1845, 01, 01) || PE_EndDateFirstCycle == new DateTime(1846, 01, 01) || PE_EndDateFirstCycle == new DateTime(1800, 01, 01))) NonValidMessages.Add($"98| Error en variable 58. Valor no valido en “Fecha de finalización del primer o único esquema de este periodo de reporte.”.");
            if (!((new long[] { 2, 98 }).Contains(PE_Chemotherapy) || (new long[] { 1, 55 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"98| Error en variable 58. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual? - variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"98| Error en variable 58. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEFIRS1.Execute(
PE_EndDateFirstCycle,
PE_BirthDate,
PE_CUTDATE,
PE_DateFirstCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEFIRS1.Execute(
PE_EndDateFirstCycle,
PE_BirthDate,
PE_CUTDATE,
PE_DateFirstCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEFIRS1.Execute(
PE_EndDateFirstCycle,
PE_BirthDate,
PE_CUTDATE,
PE_DateFirstCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateFirstCycle > new DateTime(1900, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEFIRS1.Execute(
PE_EndDateFirstCycle,
PE_BirthDate,
PE_CUTDATE,
PE_DateFirstCycle
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98| Error en variable 58. Si registro 1845-01-01 en la variable 58 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1845, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98| Error en variable 58. Si registro 1845-01-01 en la variable 58 debe registrar 2 o 98 en la variable 45.", this.FileName);
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98| Error en variable 58. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1846, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"98| Error en variable 58. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1800, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1800, 01, 01)) && ((new long[] { 2, 98 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateFirstCycle == new DateTime(1800, 01, 01)) && ((new long[] { 1, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del último ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CADATEENDC1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// v62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_InitalDateLastCycle;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEENDC1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del último ciclo de este corte
        /// </sumary>
        /// <param name="PE_EndDateLastCycle">Fecha</param>
        /// <param name="PE_InitalDateLastCycle">v62</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateLastCycle, DateTime PE_InitalDateLastCycle, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_InitalDateLastCycle = FUNC_VC_InitalDateLastCycle();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_InitalDateLastCycle()
        {
            return (PE_EndDateLastCycle >= PE_InitalDateLastCycle);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_EndDateLastCycle <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateLastCycle > new DateTime(1900, 01, 01))) NonValidMessages.Add($"143| Error en variable 71. Valor no valido en “Fecha de finalización del último esquema de quimioterapia o terapia sistémica este periodo de reporte.”.");
            if (!(VC_InitalDateLastCycle == true || VC_InitalDateLastCycle != true)) NonValidMessages.Add($"143| Error en variable 71. Valor no valido en “Fecha de inicio del último ciclo de quimioterapia de este corte”. Variable 62.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"143|Error en variable 71. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateLastCycle > new DateTime(1900, 01, 01)) && (VC_InitalDateLastCycle == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastCycle > new DateTime(1900, 01, 01)) && (VC_InitalDateLastCycle == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"143|Error en variable 71. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_EndDateLastCycle > new DateTime(1900, 01, 01)) && (VC_InitalDateLastCycle != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"143| Error en variable 71. La Fecha de finalización del último esquema de quimioterapia o terapia sistémica no puede ser menor a la fecha en que inicio del primer ciclo de quimioterapia. Variable 62.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"143| Error en variable 71. La Fecha de finalización del último esquema de quimioterapia o terapia sistémica no puede ser menor a la fecha en que inicio del primer ciclo de quimioterapia. Variable 62.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de finalización del último ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CADATEENDC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_EndDateLastCycle;
        /// <sumary>
        /// v62
        /// </sumary>
        private DateTime PE_InitalDateLastCycle;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de finalización del último ciclo de este corte
        /// </sumary>
        private readonly RUL_CADATEENDC1 RUL_CADATEENDC1 = new RUL_CADATEENDC1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATEENDC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de finalización del último ciclo de este corte
        /// </sumary>
        /// <param name="PE_EndDateLastCycle">Fecha</param>
        /// <param name="PE_InitalDateLastCycle">v62</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateLastCycle, DateTime PE_InitalDateLastCycle, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateLastCycle = PE_EndDateLastCycle;
                this.PE_InitalDateLastCycle = PE_InitalDateLastCycle;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_EndDateLastCycle > new DateTime(1900, 01, 01) || PE_EndDateLastCycle == new DateTime(1846, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1800, 01, 01) }).Contains(PE_EndDateLastCycle))) NonValidMessages.Add($"143| Error en variable 71. Valor no valido en “Fecha de finalización del último esquema de quimioterapia o terapia sistémica este periodo de reporte.”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"143| Error en variable 71. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_EndDateLastCycle > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEENDC1.Execute(
PE_EndDateLastCycle,
PE_InitalDateLastCycle,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastCycle > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATEENDC1.Execute(
PE_EndDateLastCycle,
PE_InitalDateLastCycle,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_EndDateLastCycle == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_EndDateLastCycle == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"143| Error en variable 71. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1800, 01, 01) }).Contains(PE_EndDateLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de primera consulta o procedimiento de cuidado paliativo en este corte
    /// </sumary> 
    public sealed class RUL_CADATECOPA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateConsultationPalliativeCare;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATECOPA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de primera consulta o procedimiento de cuidado paliativo en este corte
        /// </sumary>
        /// <param name="PE_DateConsultationPalliativeCare">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateConsultationPalliativeCare, DateTime PE_BirthDate, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateConsultationPalliativeCare = PE_DateConsultationPalliativeCare;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateConsultationPalliativeCare > PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateConsultationPalliativeCare >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateConsultationPalliativeCare <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01) || PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01) || PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01))) NonValidMessages.Add($"193| Error en variable 115. Valor no valido en “Fecha de primera consulta o procedimiento de cuidado paliativo en este corte”. ");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"193|Error en variable 115. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"193|Error en variable 115. Valor no valido en “Fecha de Diagnóstico del Cáncer reportado”. Variable 18.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"193|Error en variable 115. Valor no valido en fecha de corte. Variable 134.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la de consulta”. Variable 18.", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193|Error en variable 115. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE == true) && (VC_CUTDATE != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateConsultationPalliativeCare == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && (VC_DIAGNOSISDATE != true) && (VC_CUTDATE != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"193| Error en variable 115. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de primera consulta con médico tratante de la enfermedad maligna
    /// </sumary> 
    public sealed class RUL_CADATECONS1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateFirstConsultation;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// v19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V7
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V19
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATECONS1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de primera consulta con médico tratante de la enfermedad maligna
        /// </sumary>
        /// <param name="PE_DateFirstConsultation">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateRemission">v19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstConsultation, DateTime PE_BirthDate, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstConsultation = PE_DateFirstConsultation;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateFirstConsultation >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_DateFirstConsultation >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateFirstConsultation <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFirstConsultation > new DateTime(1900, 01, 01))) NonValidMessages.Add($"26| Error en variable 26. Valor no valido en “Fecha de primera consulta con médico tratante de la enfermedad maligna”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"26|Error en variable 26. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"26|Error en variable 26. Valor no valido en “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"26|Error en variable 26. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_DateRemission != true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de primera consulta con médico tratante de la enfermedad maligna
    /// </sumary> 
    public sealed class RUL_CADATECONS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// V26
        /// </sumary>
        private DateTime PE_DateFirstConsultation;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V7
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de primera consulta con médico tratante de la enfermedad maligna
        /// </sumary>
        private readonly RUL_CADATECONS1 RUL_CADATECONS1 = new RUL_CADATECONS1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADATECONS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de primera consulta con médico tratante de la enfermedad maligna
        /// </sumary>
        /// <param name="PE_DateFirstConsultation">V26</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_BirthDate">V7</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstConsultation, DateTime PE_DIAGNOSISDATE, string PE_RegimeType, DateTime PE_BirthDate, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstConsultation = PE_DateFirstConsultation;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFirstConsultation > new DateTime(1900, 01, 01) || PE_DateFirstConsultation == new DateTime(1800, 01, 01) || PE_DateFirstConsultation == new DateTime(1846, 01, 01))) NonValidMessages.Add($"26| Error en variable 26. Valor no valido en Fecha de primera consulta con medico tratante de la enfermedad maligna.");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"26|Error en variable 26. Valor no valido en Fecha de Diagnostico del Cancer reportado. Variable 18.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"26| Error en variable 26. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATECONS1.Execute(
PE_DateFirstConsultation,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATECONS1.Execute(
PE_DateFirstConsultation,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATECONS1.Execute(
PE_DateFirstConsultation,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstConsultation > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADATECONS1.Execute(
PE_DateFirstConsultation,
PE_BirthDate,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateFirstConsultation == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstConsultation == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstConsultation == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateFirstConsultation == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26|Error en variable 26. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateFirstConsultation == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstConsultation == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26| Error en variable 26. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstConsultation == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"26| Error en variable 26. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de informe histopatológico válido
    /// </sumary> 
    public sealed class RUL_CADARESHIS1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateResulHistopathological;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADARESHIS1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de informe histopatológico válido
        /// </sumary>
        /// <param name="PE_DateResulHistopathological">Fecha</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateResulHistopathological, DateTime PE_DateRemission, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateResulHistopathological = PE_DateResulHistopathological;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_DateRemission = FUNC_VC_DateRemission();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateRemission()
        {
            return (PE_DateResulHistopathological >= PE_DateRemission);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateResulHistopathological <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateResulHistopathological > new DateTime(1900, 01, 01))) NonValidMessages.Add($"24| Error en variable 24. Valor no valido en “Fecha de informe histopatológico válido” ");
            if (!(VC_DateRemission == true || VC_DateRemission != true)) NonValidMessages.Add($"24|Error en variable 24. Valor no valido en “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"24|Error en variable 24. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (VC_DateRemission == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (VC_DateRemission != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Valor no valido. La fecha debe ser mayor a la “Fecha de la nota de remisión del médico o institución general hacia la institución que hizo el diagnóstico”. Variable 19.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de informe histopatológico válido
    /// </sumary> 
    public sealed class RUL_CADARESHIS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateResulHistopathological;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Tipo de estudio con el que se realizó el diagnóstico de cáncer
        /// </sumary>
        private long PE_TypeTest;
        /// <sumary>
        /// V19
        /// </sumary>
        private DateTime PE_DateRemission;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de informe histopatológico válido
        /// </sumary>
        private readonly RUL_CADARESHIS1 RUL_CADARESHIS1 = new RUL_CADARESHIS1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADARESHIS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de informe histopatológico válido
        /// </sumary>
        /// <param name="PE_DateResulHistopathological">Fecha</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_TypeTest">Tipo de estudio con el que se realizó el diagnóstico de cáncer</param>
        /// <param name="PE_DateRemission">V19</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(DateTime PE_DateResulHistopathological, string PE_RegimeType, long PE_TypeTest, DateTime PE_DateRemission, DateTime PE_CUTDATE, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateResulHistopathological = PE_DateResulHistopathological;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_TypeTest = PE_TypeTest;
                this.PE_DateRemission = PE_DateRemission;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateResulHistopathological > new DateTime(1900, 01, 01) || PE_DateResulHistopathological == new DateTime(1800, 01, 01) || PE_DateResulHistopathological == new DateTime(1845, 01, 01) || PE_DateResulHistopathological == new DateTime(1846, 01, 01))) NonValidMessages.Add($"24| Error en variable 24. Valor no valido en Fecha de informe histopatologico valido ");
            if (!(PE_TypeTest == 7 || (new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest))) NonValidMessages.Add($"24| Error en variable 24. Valor no valido en Tipo de estudio con el que se realizo el diagnostico de cancer   variable 21");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"24| Error en variable 24. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"24|Error en variable 24. Valor no valido en Fecha de Diagnostico del Cancer reportado. Variable 18.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }


                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }

                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateResulHistopathological > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADARESHIS1.Execute(
PE_DateResulHistopathological,
PE_DateRemission,
PE_CUTDATE
);

                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24|Error en variable 24. Si registro 1845-01-01 debe registrar la opción 7 en variable 21.", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24| Error en variable 24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && (PE_TypeTest == 7) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24| Error en variable 24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateResulHistopathological == new DateTime(1846, 01, 01)) && ((new long[] { 1, 2, 3, 4, 5, 6, 8, 9, 10, 55, 99 }).Contains(PE_TypeTest)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24| Error en variable 24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"24| Error en variable 24. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de clasificación de riesgo
    /// </sumary> 
    public sealed class RUL_CADALINPED
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateRiskLymphomasPediatricSolids;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// Variable 38
        /// </sumary>
        private long PE_RiskLymphomasPediatricSolids;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// variable que calcula que la fecha de comparación
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// COMPARACION CON 2015
        /// </sumary>
        private bool VC_DIAGNOSISDATE1;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADALINPED() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de clasificación de riesgo
        /// </sumary>
        /// <param name="PE_DateRiskLymphomasPediatricSolids">Fecha</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RiskLymphomasPediatricSolids">Variable 38</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateRiskLymphomasPediatricSolids, DateTime PE_DIAGNOSISDATE, DateTime PE_CUTDATE, long PE_RiskLymphomasPediatricSolids, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateRiskLymphomasPediatricSolids = PE_DateRiskLymphomasPediatricSolids;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RiskLymphomasPediatricSolids = PE_RiskLymphomasPediatricSolids;
                this.PE_RegimeType = PE_RegimeType;
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_DIAGNOSISDATE1 = FUNC_VC_DIAGNOSISDATE1();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateRiskLymphomasPediatricSolids >= PE_DIAGNOSISDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateRiskLymphomasPediatricSolids <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE1()
        {
            return (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01) || PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01) || PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01) || PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01))) NonValidMessages.Add($"39| Error en variable 39. Valor no valido en Fecha de clasificacion de riesgo ");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"39|Error en variable 39. Valor no valido. En la fecha de Diagnostic-Variable 18.");
            if (!(VC_DIAGNOSISDATE1 == true || VC_DIAGNOSISDATE1 != true)) NonValidMessages.Add($"39| Error en variable 39. Valor no valido en variable 18  Fecha de Diagnostico del Cancer reportado  ");
            if (!(VC_CUTDATE == true)) NonValidMessages.Add($"39|Error en variable 39. Valor no valido en fecha de corte. Variable 134.");
            if (!(PE_RiskLymphomasPediatricSolids == 93 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids))) NonValidMessages.Add($"39| Error en variable 39. Valor no valido en Clasificacion de riesgo leucemias o linfomas, y solidos pediatricos. Variable 38.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"39| Error en variable 39. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids > new DateTime(1900, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Valor no valido “la fecha de Diagnóstico del Cáncer reportado no debe ser mayor a la Fecha de clasificación de riesgo”. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1800, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1845, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39|Error en variable 39. Si registro 1845-01-01 debe registrar la opción 38 en variable 93.", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE == true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 == true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && (PE_RiskLymphomasPediatricSolids == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DateRiskLymphomasPediatricSolids == new DateTime(1846, 01, 01)) && (VC_DIAGNOSISDATE != true) && (VC_DIAGNOSISDATE1 != true) && (VC_CUTDATE == true) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 55, 97, 98, 99 }).Contains(PE_RiskLymphomasPediatricSolids)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"39| Error en variable 39. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
    /// </sumary> 
    public sealed class RUL_CADALASU1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateLastSurgery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Variable 76
        /// </sumary>
        private DateTime PE_DateFirstSurgery;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// Variable que calcula la fecha de corte
        /// </sumary>
        private bool VC_CutDate;
        /// <sumary>
        /// Variable 76
        /// </sumary>
        private bool VC_DateFirstSurgery;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADALASU1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
        /// </sumary>
        /// <param name="PE_DateLastSurgery">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_DateFirstSurgery">Variable 76</param>
        public RuntimeResult<string> Execute(DateTime PE_DateLastSurgery, DateTime PE_BirthDate, DateTime PE_CutDate, DateTime PE_DateFirstSurgery)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateLastSurgery = PE_DateLastSurgery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutDate = PE_CutDate;
                this.PE_DateFirstSurgery = PE_DateFirstSurgery;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CutDate = FUNC_VC_CutDate();
                this.VC_DateFirstSurgery = FUNC_VC_DateFirstSurgery();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateLastSurgery >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CutDate()
        {
            return (PE_DateLastSurgery <= PE_CutDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstSurgery()
        {
            return (PE_DateLastSurgery >= PE_DateFirstSurgery);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateLastSurgery > new DateTime(1900, 01, 01))) NonValidMessages.Add($"152| Error en variable 80. Valor no valido en “Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte”.");
            if (!(VC_BirthDate == true)) NonValidMessages.Add($"152|Error en variable 80. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).");
            if (!(VC_CutDate == true)) NonValidMessages.Add($"152|Error en variable 80. La fecha es posterior a la fecha de Corte. Variable 134.");
            if (!(VC_DateFirstSurgery == true || VC_DateFirstSurgery != true)) NonValidMessages.Add($"152| Error en variable 80. Valor no valido en “Fecha de realización de la primera cirugía en este reporte”. Variable 76.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateLastSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CutDate == true) && (VC_DateFirstSurgery == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"152| Error en variable 80. La “Fecha de realización de la primera cirugía en este reporte” debe ser menor a “Fecha de realización del último procedimiento quirúrgico o de re intervención en este corte.”. Variable 76", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
    /// </sumary> 
    public sealed class RUL_CADALASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateLastSurgery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Regimen variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Variable 74
        /// </sumary>
        private long PE_Surgeries;
        /// <sumary>
        /// Variable 76
        /// </sumary>
        private DateTime PE_DateFirstSurgery;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
        /// </sumary>
        private readonly RUL_CADALASU1 RUL_CADALASU1 = new RUL_CADALASU1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADALASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte.
        /// </sumary>
        /// <param name="PE_DateLastSurgery">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_RegimeType">Regimen variable 10</param>
        /// <param name="PE_CutDate">Fecha de corte</param>
        /// <param name="PE_Surgeries">Variable 74</param>
        /// <param name="PE_DateFirstSurgery">Variable 76</param>
        public RuntimeResult<string> Execute(DateTime PE_DateLastSurgery, DateTime PE_BirthDate, string PE_RegimeType, DateTime PE_CutDate, long PE_Surgeries, DateTime PE_DateFirstSurgery)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateLastSurgery = PE_DateLastSurgery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CutDate = PE_CutDate;
                this.PE_Surgeries = PE_Surgeries;
                this.PE_DateFirstSurgery = PE_DateFirstSurgery;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateLastSurgery > new DateTime(1900, 01, 01) || PE_DateLastSurgery == new DateTime(1845, 01, 01) || PE_DateLastSurgery == new DateTime(1846, 01, 01))) NonValidMessages.Add($"152| Error en variable 80. Valor no valido en “Fecha de realización del último procedimiento quirúrgico o de reintervención en este corte”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"152| Error en variable 80. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"152| Error en variable 80. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateLastSurgery > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADALASU1.Execute(
PE_DateLastSurgery,
PE_BirthDate,
PE_CutDate,
PE_DateFirstSurgery
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateLastSurgery > new DateTime(1900, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADALASU1.Execute(
PE_DateLastSurgery,
PE_BirthDate,
PE_CutDate,
PE_DateFirstSurgery
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateLastSurgery > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADALASU1.Execute(
PE_DateLastSurgery,
PE_BirthDate,
PE_CutDate,
PE_DateFirstSurgery
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateLastSurgery > new DateTime(1900, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADALASU1.Execute(
PE_DateLastSurgery,
PE_BirthDate,
PE_CutDate,
PE_DateFirstSurgery
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateLastSurgery == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateLastSurgery == new DateTime(1845, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"152| Error en variable 80. Si registra 1845-01-01 ,se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((PE_DateLastSurgery == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateLastSurgery == new DateTime(1845, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"152| Error en variable 80. Si registra 1845-01-01 ,se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((PE_DateLastSurgery == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateLastSurgery == new DateTime(1846, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateLastSurgery == new DateTime(1846, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"152| Error en variable 80. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"152| Error en variable 80. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de diagnóstico del otro cáncer primario
    /// </sumary> 
    public sealed class RUL_CADAHICA1
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateHistorialCancer;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADAHICA1() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de diagnóstico del otro cáncer primario
        /// </sumary>
        /// <param name="PE_DateHistorialCancer">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">V134</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHistorialCancer, DateTime PE_BirthDate, DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHistorialCancer = PE_DateHistorialCancer;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateHistorialCancer >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateHistorialCancer <= PE_CUTDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateHistorialCancer > new DateTime(1900, 01, 01))) NonValidMessages.Add($"43| Error en variable 43. Valor no valido en “Fecha de diagnóstico del otro cáncer primario”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"43|Error en variable 43. Valor no valido en “fecha de Nacimiento”-Variable (7).");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"43|Error en variable 43. Valor no valido en fecha de corte. Variable 134.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && (VC_CUTDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43|Error en variable 43. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && (VC_CUTDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43|Error en variable 43. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43|Error en variable 43. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de diagnóstico del otro cáncer primario
    /// </sumary> 
    public sealed class RUL_CADAHICA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateHistorialCancer;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        /// <sumary>
        /// Fecha de diagnóstico del otro cáncer primario
        /// </sumary>
        private readonly RUL_CADAHICA1 RUL_CADAHICA1 = new RUL_CADAHICA1();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADAHICA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de diagnóstico del otro cáncer primario
        /// </sumary>
        /// <param name="PE_DateHistorialCancer">Fecha</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHistorialCancer, DateTime PE_DIAGNOSISDATE, DateTime PE_BirthDate, DateTime PE_CUTDATE, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHistorialCancer = PE_DateHistorialCancer;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateHistorialCancer > new DateTime(1900, 01, 01) || PE_DateHistorialCancer == new DateTime(1800, 01, 01) || PE_DateHistorialCancer == new DateTime(1845, 01, 01) || PE_DateHistorialCancer == new DateTime(1846, 01, 01))) NonValidMessages.Add($"43| Error en variable 43. Valor no valido en Fecha de diagnostico del otro cancer primario.");
            if (!(PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"43|Error en variable 43. Valor no valido en Fecha de Diagnostico del Cancer reportado. Variable 18.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"43| Error en variable 43. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADAHICA1.Execute(
PE_DateHistorialCancer,
PE_BirthDate,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADAHICA1.Execute(
PE_DateHistorialCancer,
PE_BirthDate,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADAHICA1.Execute(
PE_DateHistorialCancer,
PE_BirthDate,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateHistorialCancer > new DateTime(1900, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => {
                    var result = RUL_CADAHICA1.Execute(
PE_DateHistorialCancer,
PE_BirthDate,
PE_CUTDATE
);
                    if (result.IsValid)
                    {
                        return result.Result;
                    }
                    else
                    {
                        throw new ArgumentException(result.Message);
                    }
                }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43|Error en variable 43. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistorialCancer == new DateTime(1800, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43|Error en variable 43. La opción 1800-01-01 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_DateHistorialCancer == new DateTime(1845, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1845, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1845, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1845, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateHistorialCancer == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43| Error en variable 43. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateHistorialCancer == new DateTime(1846, 01, 01)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"43| Error en variable 43. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de realización de la primera cirugía en este reporte
    /// </sumary> 
    public sealed class RUL_CADAFISU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateFirstSurgery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V134
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_BirthDate;
        /// <sumary>
        /// V134
        /// </sumary>
        private bool VC_CUTDATE;
        /// <sumary>
        /// V18
        /// </sumary>
        private bool VC_DIAGNOSISDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADAFISU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de realización de la primera cirugía en este reporte
        /// </sumary>
        /// <param name="PE_DateFirstSurgery">Fecha</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_CUTDATE">V134</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstSurgery, DateTime PE_BirthDate, string PE_RegimeType, DateTime PE_CUTDATE, DateTime PE_DIAGNOSISDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstSurgery = PE_DateFirstSurgery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_CUTDATE = PE_CUTDATE;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.VC_BirthDate = FUNC_VC_BirthDate();
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                this.VC_DIAGNOSISDATE = FUNC_VC_DIAGNOSISDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_BirthDate()
        {
            return (PE_DateFirstSurgery >= PE_BirthDate);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {
            return (PE_DateFirstSurgery <= PE_CUTDATE);
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DIAGNOSISDATE()
        {
            return (PE_DateFirstSurgery >= PE_DIAGNOSISDATE);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFirstSurgery > new DateTime(1900, 01, 01) || PE_DateFirstSurgery == new DateTime(1845, 01, 01) || PE_DateFirstSurgery == new DateTime(1846, 01, 01))) NonValidMessages.Add($"148| Error en variable 76. Valor no valido en “Fecha de realización de la primera cirugía en este reporte”.");
            if (!(VC_BirthDate == true || VC_BirthDate != true)) NonValidMessages.Add($"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"148|Error en variable 76. La fecha es posterior a la fecha de Corte. Variable 134.");
            if (!(VC_DIAGNOSISDATE == true || VC_DIAGNOSISDATE != true)) NonValidMessages.Add($"148|Error en variable 76. La fecha de Diagnostico -Variable (18).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha de Diagnostico debe ser menor a “Fecha de realización de la primera cirugía en este reporte” -Variable (18).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha de Diagnostico debe ser menor a “Fecha de realización de la primera cirugía en este reporte” -Variable (18).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha es posterior a la fecha de Corte. Variable 134.", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery > new DateTime(1900, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148|Error en variable 76. La fecha no debe ser menor que la fecha de Nacimiento-Variable (7).", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1845, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate == true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE == true) && (VC_DIAGNOSISDATE != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_DateFirstSurgery == new DateTime(1846, 01, 01)) && (VC_BirthDate != true) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_CUTDATE != true) && (VC_DIAGNOSISDATE == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"148| Error en variable 76. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Dacarbazina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CADACARBAZ
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.10
        /// </sumary>
        private long PE_DacarbazineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CADACARBAZ() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Dacarbazina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_DacarbazineLastCycle">variable 66.10</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_DacarbazineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DacarbazineLastCycle = PE_DacarbazineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineLastCycle) || PE_DacarbazineLastCycle == 55 || PE_DacarbazineLastCycle == 98)) NonValidMessages.Add($"116| Error en variable 66.10. Valor no valido en “En este último esquema el usuario recibió Dacarbazina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"116| Error en variable 66.10. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_DacarbazineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DacarbazineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DacarbazineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error en variable 66.10. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_DacarbazineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Citarabina 
    /// </sumary> 
    public sealed class RUL_CACYTARAFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CytarabineFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACYTARAFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Citarabina 
        /// </sumary>
        /// <param name="PE_CytarabineFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CytarabineFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CytarabineFirstCycle = PE_CytarabineFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CytarabineFirstCycle) || PE_CytarabineFirstCycle == 98 || PE_CytarabineFirstCycle == 55)) NonValidMessages.Add($"69| Error en variable 53.8. Valor no valido en “En este primer o único esquema el usuario recibió Citarabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"69| Error en variable 53.8. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CytarabineFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CytarabineFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CytarabineFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CytarabineFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CytarabineFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"69| Error en variable 53.8. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Citarabina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CACYTARABI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.8
        /// </sumary>
        private long PE_CytarabineLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACYTARABI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Citarabina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_CytarabineLastCycle">variable 66.8</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CytarabineLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CytarabineLastCycle = PE_CytarabineLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CytarabineLastCycle) || PE_CytarabineLastCycle == 55 || PE_CytarabineLastCycle == 98)) NonValidMessages.Add($"114| Error en variable 66.8. Valor no valido en “En este último esquema el usuario recibió Citarabina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"114| Error en variable 66.8. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CytarabineLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CytarabineLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CytarabineLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CytarabineLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"114| Error en variable 66.8. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CytarabineLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Ciclofosfamida (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CACYCLOPHO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.5
        /// </sumary>
        private long PE_CyclophosphamideLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACYCLOPHO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Ciclofosfamida (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_CyclophosphamideLastCycle">variable 66.5</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CyclophosphamideLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CyclophosphamideLastCycle = PE_CyclophosphamideLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideLastCycle) || PE_CyclophosphamideLastCycle == 55 || PE_CyclophosphamideLastCycle == 98)) NonValidMessages.Add($"111| Error en variable 66.5. Valor no valido en “En este último esquema el usuario recibió Ciclofosfamida”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"111| Error en variable 66.5. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CyclophosphamideLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CyclophosphamideLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"111| Error en variable 66.5. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CyclophosphamideLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Ciclofosfamida
    /// </sumary> 
    public sealed class RUL_CACYCLOFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CyclophosphamideFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACYCLOFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Ciclofosfamida
        /// </sumary>
        /// <param name="PE_CyclophosphamideFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CyclophosphamideFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CyclophosphamideFirstCycle = PE_CyclophosphamideFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideFirstCycle) || PE_CyclophosphamideFirstCycle == 98 || PE_CyclophosphamideFirstCycle == 55)) NonValidMessages.Add($"66| Error en variable 53.5. Valor no valido en “En este primer o único esquema el usuario recibió Ciclofosfamida”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"66| Error en variable 53.5. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CyclophosphamideFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CyclophosphamideFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CyclophosphamideFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CyclophosphamideFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"66| Error en variable 53.5. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de corte
    /// </sumary> 
    public sealed class RUL_CACUTDATE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// parámetro de entrada de plantilla
        /// </sumary>
        private DateTime PE_CUTDATE;
        /// <sumary>
        /// FECHA DE CORTE
        /// </sumary>
        private bool VC_CUTDATE;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACUTDATE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        /// <param name="PE_CUTDATE">parámetro de entrada de plantilla</param>
        public RuntimeResult<string> Execute(DateTime PE_CUTDATE)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CUTDATE = PE_CUTDATE;
                this.VC_CUTDATE = FUNC_VC_CUTDATE();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CUTDATE()
        {

            if (PE_CUTDATE == Convert.ToDateTime(Helper.USR_CACUTOFFDA()))
            {
                return true;
            }
            else
            {
                return false;
            }




        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_CUTDATE == true || VC_CUTDATE != true)) NonValidMessages.Add($"212| Error en variable 134. Valor no valido en “Fecha de corte”. ");
            if (!(PE_CUTDATE == new DateTime(2019, 01, 01, 0, 0, 0) || PE_CUTDATE != new DateTime(2019, 01, 01, 0, 0, 0))) NonValidMessages.Add($"212| Error en variable 134. Valor no valido en “Fecha de corte”. ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_CUTDATE == true) && (PE_CUTDATE == new DateTime(2019, 01, 01, 0, 0, 0)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((VC_CUTDATE == true) && (PE_CUTDATE != new DateTime(2019, 01, 01, 0, 0, 0)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((VC_CUTDATE != true) && (PE_CUTDATE == new DateTime(2019, 01, 01, 0, 0, 0)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"212| Error en variable 134. la “Fecha de corte” no corresponde a la fecha actual.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Características actuales del último ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CACURRLAST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 72
        /// </sumary>
        private long PE_CurrentFeaturesLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACURRLAST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Características actuales del último ciclo de este corte
        /// </sumary>
        /// <param name="PE_CurrentFeaturesLastCycle">variable 72</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CurrentFeaturesLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CurrentFeaturesLastCycle = PE_CurrentFeaturesLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesLastCycle) || PE_CurrentFeaturesLastCycle == 98 || PE_CurrentFeaturesLastCycle == 55)) NonValidMessages.Add($"144| Error en variable 72. Valor no valido en “Características actuales del último esquema de este periodo:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"144| Error en variable 72. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"144|Error en variable 72. Si registra 55 debe registrar  C o S en variable 10", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Características actuales de este primer o único esquema de radioterapia
    /// </sumary> 
    public sealed class RUL_CACURRENTF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 95
        /// </sumary>
        private long PE_CurrentFeaturesRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V86
        /// </sumary>
        private long PE_Radiotherapy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACURRENTF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Características actuales de este primer o único esquema de radioterapia
        /// </sumary>
        /// <param name="PE_CurrentFeaturesRadiotherapy">variable 95</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">V86</param>
        public RuntimeResult<string> Execute(long PE_CurrentFeaturesRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CurrentFeaturesRadiotherapy = PE_CurrentFeaturesRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesRadiotherapy) || PE_CurrentFeaturesRadiotherapy == 55 || PE_CurrentFeaturesRadiotherapy == 98)) NonValidMessages.Add($"167| Error en variable 95. Valor no valido en “Características actuales de este primer o único esquema de radioterapia”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"167| Error en variable 95. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"167| Error en variable 95. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CurrentFeaturesRadiotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"167| Error en variable 95. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"167| Error en variable 95. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"167|Error en variable 95. Si registro 98 debe registrar tambien la opción 98 en ' ¿Recibió el usuario algún tipo de radioterapia en el corte actual?' variable 86.", this.FileName);
            }
            else if ((PE_CurrentFeaturesRadiotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"167|Error en variable 95. Si registro 98 debe registrar tambien la opción 98 en ' ¿Recibió el usuario algún tipo de radioterapia en el corte actual?' variable 86.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de esquemas de radioterapia suministrados en el corte actual
    /// </sumary> 
    public sealed class RUL_CACOUNTRAD
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CountRadiotherapy;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// ¿Recibió el usuario algún tipo de radioterapia en el corte actual?
        /// </sumary>
        private long PE_Radiotherapy;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOUNTRAD() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de esquemas de radioterapia suministrados en el corte actual
        /// </sumary>
        /// <param name="PE_CountRadiotherapy">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Radiotherapy">¿Recibió el usuario algún tipo de radioterapia en el corte actual?</param>
        public RuntimeResult<string> Execute(string PE_CountRadiotherapy, string PE_RegimeType, long PE_Radiotherapy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CountRadiotherapy = PE_CountRadiotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Radiotherapy = PE_Radiotherapy;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_CountRadiotherapy.ToString().Length <= 2;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CountRadiotherapy == "0" || PE_CountRadiotherapy == "98" || PE_CountRadiotherapy == "55" || !(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy)))) NonValidMessages.Add($"159| Error en variable 87. Valor no valido en “Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual:”.");
            if (!(LenghtHabilitation == false || LenghtHabilitation == true)) NonValidMessages.Add($"159| Error en variable 87. Valor no valido en “Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"159| Error en variable 87. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");
            if (!(PE_Radiotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy))) NonValidMessages.Add($"159| Error en variable 87. Valor no valido en “¿Recibió el usuario algún tipo de radioterapia en el corte actual?”-variable (86).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "0") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 98 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 98 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 98 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "98") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 98 debe registrar opcion 98 en variable 86", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((PE_CountRadiotherapy == "55") && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. Si registro 55 debe registrar opcion C o S en variable 10", this.FileName);
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. La cantidad de Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual debe ser maximo de dos caracteres", this.FileName);
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == false) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. La cantidad de Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual debe ser maximo de dos caracteres", this.FileName);
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. La cantidad de Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual debe ser maximo de dos caracteres", this.FileName);
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == false) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"159|Error en variable 87. La cantidad de Número de sesiones de radioterapia externa suministrados en el periodo de reporte actual debe ser maximo de dos caracteres", this.FileName);
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == true) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 2, 55 }).Contains(PE_Radiotherapy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "0", "98", "55" }.Contains(PE_CountRadiotherapy))) && (LenghtHabilitation == true) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)) && (PE_Radiotherapy == 98))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
    /// </sumary> 
    public sealed class RUL_CACOUNTPHA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOUNTPHA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(string PE_CountPhaseChemotherapy, long PE_Chemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_CountPhaseChemotherapy.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia()
        {
            List<string> listNaneoPlasia = new List<string>
{
    "C835", "C910", "C920", "C924", "C925"
};
            return listNaneoPlasia.Contains(PE_NameNeoplasia);

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(LenghtHabilitation))) NonValidMessages.Add($"46| Error en variable 46. Valor no valido en “¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)”? ");
            if (!(PE_CountPhaseChemotherapy == "0" || PE_CountPhaseChemotherapy == "55" || PE_CountPhaseChemotherapy == "98" || !(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy)))) NonValidMessages.Add($"46| Error en variable 46. Valor no valido en “¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)”? ");
            if (!(PE_Chemotherapy == 1 || PE_Chemotherapy == 2 || PE_Chemotherapy == 55 || PE_Chemotherapy == 98)) NonValidMessages.Add($"46|Error en variable 46. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica “-Variable (45)?");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!(VC_NameNeoplasia == true || VC_NameNeoplasia != true)) NonValidMessages.Add($"46| Error en variable 46. Valor no valido en “Nombre de la neoplasia (cáncer o tumor) maligna reportada.” Variable (17).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica respondió 2 o 98.. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.  Si registra 0 en las fases de quimioterapia recibidas, en la variable 45 para quimioterapia u otra terapia sistémica debio responder 2 o 98. -variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "0") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 45 debe registrar no aplica en la variable 46.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 45 debe registrar no aplica en la variable 46.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 45 debe registrar no aplica en la variable 46.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 45 debe registrar no aplica en la variable 46.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46|Error en variable 46.Si registra 98 en la variable 46 debe registrar no aplica en la variable 45.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountPhaseChemotherapy == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 1) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 1) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 2) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 2) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Error en variable 46. Valor no valido  “(aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10; C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda):”. -variable (17).", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Valor no valido. Si registra 98 en la variable 45 debe registrar no aplica en la variable 46 . Validar variable 45", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Valor no valido. Si registra 98 en la variable 45 debe registrar no aplica en la variable 46 . Validar variable 45", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "0", "55", "98" }.Contains(PE_CountPhaseChemotherapy))) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Valor no valido. Si registra 98 en la variable 45 debe registrar no aplica en la variable 46 . Validar variable 45", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"46| Valor no valido. Si registra 98 en la variable 45 debe registrar no aplica en la variable 46 . Validar variable 45", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Número de cirugías a las que fue sometido el usuario durante el periodo de reporte actual
    /// </sumary> 
    public sealed class RUL_CACOSU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CountSurgeries;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V74
        /// </sumary>
        private long PE_Surgeries;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOSU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Número de cirugías a las que fue sometido el usuario durante el periodo de reporte actual
        /// </sumary>
        /// <param name="PE_CountSurgeries">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">V10</param>
        /// <param name="PE_Surgeries">V74</param>
        public RuntimeResult<string> Execute(string PE_CountSurgeries, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CountSurgeries = PE_CountSurgeries;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_CountSurgeries.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(LenghtHabilitation))) NonValidMessages.Add($"147| Error en variable 75. Valor no valido en “Número de cirugías a las que fue sometido el usuario durante el periodo de reporte actual”.");
            if (!(PE_CountSurgeries == "55" || PE_CountSurgeries == "98" || !(new string[] { "55", "98" }.Contains(PE_CountSurgeries)))) NonValidMessages.Add($"147| Error en variable 75. Valor no valido en “Número de cirugías a las que fue sometido el usuario durante el periodo de reporte actual”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"147| Error en variable 75. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"147| Error en variable 75. Si registra 98 se puede solo “si respondió 2 o 3 en la pregunta anterior”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"147| Error en variable 75. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"147| Error en variable 75. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"75| Error en 147| Error en variable 75. Si registra 98 se puede solo “si respondió 2 o 3 en la pregunta anterior”. Variable 74.75. Si registra 98 se puede solo “si respondió 2 o 3 en la pregunta anterior”. Variable 74.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (PE_CountSurgeries == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"147| Error en variable 75. Si registra 98 se puede solo “si respondió 2 o 3 en la pregunta anterior”. Variable 74.", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "55", "98" }.Contains(PE_CountSurgeries))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "55", "98" }.Contains(PE_CountSurgeries))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2 }).Contains(LenghtHabilitation)) && (!(new string[] { "55", "98" }.Contains(PE_CountSurgeries))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// El usuario recibió en este corte la fase de quimioterapia denominada Consolidación (aplica para hematolinfáticos, puede haber recibido más de una fase)
    /// </sumary> 
    public sealed class RUL_CACONSOLID
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 46.4
        /// </sumary>
        private long PE_ConsolidationChemotherapy;
        /// <sumary>
        /// variable 46
        /// </sumary>
        private string PE_CountPhaseChemotherapy;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// mensajes de resultado
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// VB
        /// </sumary>
        private string VC_Base;
        #endregion

        #region Members
        /// <sumary>
        /// ¿Cuántas fases de quimioterapia recibió el usuario en este corte? (aplica para hematolinfáticos)
        /// </sumary>
        private readonly RUL_PHASESCHEMOTHERAPY RUL_PHASESCHEMOTHERAPY = new RUL_PHASESCHEMOTHERAPY();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACONSOLID() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// El usuario recibió en este corte la fase de quimioterapia denominada Consolidación (aplica para hematolinfáticos, puede haber recibido más de una fase)
        /// </sumary>
        /// <param name="PE_ConsolidationChemotherapy">variable 46.4</param>
        /// <param name="PE_CountPhaseChemotherapy">variable 46</param>
        /// <param name="PE_RegimeType">variable 10</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_ConsolidationChemotherapy, string PE_CountPhaseChemotherapy, string PE_RegimeType, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ConsolidationChemotherapy = PE_ConsolidationChemotherapy;
                this.PE_CountPhaseChemotherapy = PE_CountPhaseChemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.ResultMessage = FUNC_ResultMessage();
                this.VC_Base = FUNC_VC_Base();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_VC_Base()
        {
            var result = RUL_PHASESCHEMOTHERAPY.Execute(
    PE_ConsolidationChemotherapy,
    PE_CountPhaseChemotherapy,
    PE_RegimeType,
    PE_NameNeoplasia,
    "46.4",
    "50"
    );

            if (!result.IsValid)
            {
                ResultMessage = result.Message;
                return "0";
            }

            return result.Result;

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_Base == "0" || VC_Base == "1")) NonValidMessages.Add($"50|Valor no valido en 46.4 'El usuario recibió en este periodo la fase de quimioterapia denominada Consolidación (aplica solo para leucemia linfoide o mieloide aguda y linfoma linfoblástico, puede haber recibido más de una fase)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_Base == "0"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"{ResultMessage}", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de última cirugía
    /// </sumary> 
    public sealed class RUL_CACOLASU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeLastSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V74
        /// </sumary>
        private long PE_Surgeries;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOLASU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de última cirugía
        /// </sumary>
        /// <param name="PE_CodeLastSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_Surgeries">V74</param>
        public RuntimeResult<string> Execute(string PE_CodeLastSurgery, string PE_RegimeType, long PE_Surgeries)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeLastSurgery = PE_CodeLastSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_Surgeries = PE_Surgeries;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return (PE_CodeLastSurgery.ToString().Length <= 20);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.");
            if (!(PE_CodeLastSurgery == "98" || !(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery)) || PE_CodeLastSurgery == "55")) NonValidMessages.Add($"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"155| Error en variable 83. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");
            if (!((new long[] { 2, 3 }).Contains(PE_Surgeries) || (new long[] { 1, 55 }).Contains(PE_Surgeries))) NonValidMessages.Add($"155| Error en variable 83. Valor no valido en “¿Fue sometido el usuario a una o más cirugías curativas o paliativas como parte del manejo del cáncer durante este reporte?”. Variable 74.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Si registra 98, se debió registrar Opción 2 o 3 en la variable 74.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeLastSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && ((new long[] { 1, 55 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeLastSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && ((new long[] { 2, 3 }).Contains(PE_Surgeries)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"155| Error en variable 83. Valor no valido en “Código de última cirugía en este periodo de reporte:”.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS2 que suministra el primer ciclo de este corte
    /// </sumary> 
    public sealed class RUL_CACOIPTWFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeIPSTwoFirstCycle;
        /// <sumary>
        /// variable 45
        /// </sumary>
        private long PE_Chemotherapy;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOIPTWFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS2 que suministra el primer ciclo de este corte
        /// </sumary>
        /// <param name="PE_CodeIPSTwoFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_Chemotherapy">variable 45</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(string PE_CodeIPSTwoFirstCycle, long PE_Chemotherapy, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeIPSTwoFirstCycle = PE_CodeIPSTwoFirstCycle;
                this.PE_Chemotherapy = PE_Chemotherapy;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return PE_CodeIPSTwoFirstCycle.ToString().Length == 12;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. ");
            if (!(PE_CodeIPSTwoFirstCycle == "55" || PE_CodeIPSTwoFirstCycle == "98" || !(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle)))) NonValidMessages.Add($"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. ");
            if (!(PE_Chemotherapy == 98 || (new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy))) NonValidMessages.Add($"60| Error en variable 52. Valor no valido en “¿Recibió el usuario quimioterapia u otra terapia sistémica dentro del periodo de corte actual?.”-variable (45).");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"60| Error en variable 52. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (PE_CodeIPSTwoFirstCycle == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 en la variable 45 debe registrar 98 en la variable 52.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 en la variable 45 debe registrar 98 en la variable 52.", this.FileName);
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 en la variable 45 debe registrar 98 en la variable 52.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "55") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 en la variable 45 debe registrar 98 en la variable 52.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "55") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "98") && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 debe registrar también 98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeIPSTwoFirstCycle == "98") && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60|Error en variable 52. Si registro 98 debe registrar también 98 en la variable 45.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && (PE_Chemotherapy == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoFirstCycle))) && ((new long[] { 1, 2, 55 }).Contains(PE_Chemotherapy)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"60| Error en variable 52. Valor no valido en “Código de la IPS2 que suministra el primer ciclo de este corte:”. Se solicitan 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de primera cirugía
    /// </sumary> 
    public sealed class RUL_CACOFISU
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeFirstSurgery;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private bool LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACOFISU() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de primera cirugía
        /// </sumary>
        /// <param name="PE_CodeFirstSurgery">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_CodeFirstSurgery, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeFirstSurgery = PE_CodeFirstSurgery;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_LenghtHabilitation()
        {
            return (PE_CodeFirstSurgery.ToString().Length <= 20);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == true || LenghtHabilitation != true)) NonValidMessages.Add($"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.");
            if (!(PE_CodeFirstSurgery == "98" || !(new string[] { "98", "55" }.Contains(PE_CodeFirstSurgery)) || PE_CodeFirstSurgery == "55")) NonValidMessages.Add($"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"150| Error en variable 78. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == true) && (PE_CodeFirstSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeFirstSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeFirstSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (!(new string[] { "98", "55" }.Contains(PE_CodeFirstSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeFirstSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation == true) && (PE_CodeFirstSurgery == "55") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeFirstSurgery == "98") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeFirstSurgery == "98") && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeFirstSurgery))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (!(new string[] { "98", "55" }.Contains(PE_CodeFirstSurgery))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
            else if ((LenghtHabilitation != true) && (PE_CodeFirstSurgery == "55") && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"150| Error en variable 78. Valor no valido en “Código de primera cirugía en este periodo de reporte:”.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código pertenencia étnica
    /// </sumary> 
    public sealed class RUL_CACODETNIC
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        private long PE_CodeEthnic;
        /// <sumary>
        /// Tipo de regimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACODETNIC() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        /// <param name="PE_CodeEthnic">Código pertenencia étnica</param>
        /// <param name="PE_RegimeType">Tipo de regimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CodeEthnic, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeEthnic = PE_CodeEthnic;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_CodeEthnic) || !(new long[] { 1, 2, 3, 4, 5, 6, 55 }.Contains(PE_CodeEthnic)) || PE_CodeEthnic == 55)) NonValidMessages.Add($"12| Error en variable 12. Valor no valido en Codigo pertenencia etnica. ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"12| Error en variable 12. 'Codigo pertenencia etnica' Valor no valido en 'Regimen de afiliacion AL SGSSS', variable 10.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_CodeEthnic)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_CodeEthnic)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((!(new long[] { 1, 2, 3, 4, 5, 6, 55 }.Contains(PE_CodeEthnic))) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" 12| Error en variable 12. Valor no valido en “Código pertenencia étnica”.", this.FileName);
            }
            else if ((!(new long[] { 1, 2, 3, 4, 5, 6, 55 }.Contains(PE_CodeEthnic))) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"12| Error en variable 12. Valor no valido en “Código pertenencia étnica”.", this.FileName);
            }
            else if ((PE_CodeEthnic == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"12| Error en variable 12. Valor no valido en “tipo de régimen, variable 10. ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS2 que suministra el último ciclo en este reporte
    /// </sumary> 
    public sealed class RUL_CACODEIPST
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeIPSTwoLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACODEIPST() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS2 que suministra el último ciclo en este reporte
        /// </sumary>
        /// <param name="PE_CodeIPSTwoLastCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_CodeIPSTwoLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeIPSTwoLastCycle = PE_CodeIPSTwoLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_CodeIPSTwoLastCycle.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CodeIPSTwoLastCycle == "55" || PE_CodeIPSTwoLastCycle == "98" || !(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoLastCycle)))) NonValidMessages.Add($"105| Error en variable 65. Valor no valido en “Código de la IPS2 que suministra el último esquema en este periodo de reporte:”.");
            if (!(LenghtHabilitation == 12 || LenghtHabilitation != 12)) NonValidMessages.Add($"105| Error en variable 65. Valor no valido en “Código de la IPS2 que suministra el último esquema en este periodo de reporte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"105| Error en variable 65. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CodeIPSTwoLastCycle == "55") && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSTwoLastCycle == "55") && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"105|Error en variable 65. Si registra 55 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_CodeIPSTwoLastCycle == "55") && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSTwoLastCycle == "55") && (LenghtHabilitation != 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"105|Error en variable 65. Si registra 55 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_CodeIPSTwoLastCycle == "98") && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSTwoLastCycle == "98") && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSTwoLastCycle == "98") && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSTwoLastCycle == "98") && (LenghtHabilitation != 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoLastCycle))) && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoLastCycle))) && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "55", "98" }.Contains(PE_CodeIPSTwoLastCycle))) && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"105|Error en variable 65. El codigo de IPS no cumple con la longitud establecida.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"105|Error en variable 65. El codigo de IPS no cumple con la longitud establecida.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la IPS1 que suministra el último ciclo en este reporte
    /// </sumary> 
    public sealed class RUL_CACODEIPSO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_CodeIPSOneLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACODEIPSO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la IPS1 que suministra el último ciclo en este reporte
        /// </sumary>
        /// <param name="PE_CodeIPSOneLastCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(string PE_CodeIPSOneLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeIPSOneLastCycle = PE_CodeIPSOneLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_CodeIPSOneLastCycle.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CodeIPSOneLastCycle == "98" || PE_CodeIPSOneLastCycle == "55" || !(new string[] { "98", "55" }.Contains(PE_CodeIPSOneLastCycle)))) NonValidMessages.Add($"104| Error en variable 64. Valor no valido en “Código de la IPS1 que suministra el último esquema en este periodo de reporte:”.");
            if (!(LenghtHabilitation == 12 || LenghtHabilitation != 12)) NonValidMessages.Add($"104| Error en variable 64. Valor no valido en “Código de la IPS1 que suministra el último esquema en este periodo de reporte:”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"104| Error en variable 64. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CodeIPSOneLastCycle == "98") && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Error", this.FileName);
            }
            else if ((PE_CodeIPSOneLastCycle == "98") && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSOneLastCycle == "98") && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSOneLastCycle == "98") && (LenghtHabilitation != 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSOneLastCycle == "55") && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSOneLastCycle == "55") && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"104|Error en variable 64. Si registra 99 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((PE_CodeIPSOneLastCycle == "55") && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CodeIPSOneLastCycle == "55") && (LenghtHabilitation != 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"104|Error en variable 64. Si registra 99 debe registrar C o S en Régimen de afiliación AL SGSSS variable 10", this.FileName);
            }
            else if ((!(new string[] { "98", "55" }.Contains(PE_CodeIPSOneLastCycle))) && (LenghtHabilitation == 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "98", "55" }.Contains(PE_CodeIPSOneLastCycle))) && (LenghtHabilitation == 12) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "98", "55" }.Contains(PE_CodeIPSOneLastCycle))) && (LenghtHabilitation != 12) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"104|Error en variable 64. El codigo de IPS no cumple con la longitud establecida.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"104|Error en variable 64. El codigo de IPS no cumple con la longitud establecida.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de la EPS o de la Dirección Territorial de Salud
    /// </sumary> 
    public sealed class RUL_CACODEEPS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de la EPS o de la Dirección Territorial de Salud
        /// </sumary>
        private string PE_CodeEPS;
        /// <sumary>
        /// Variable que calcula la longitud de el Código de la EPS o de la Dirección Territorial de Salud
        /// </sumary>
        private long VC_CodeEPS;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACODEEPS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de la EPS o de la Dirección Territorial de Salud
        /// </sumary>
        /// <param name="PE_CodeEPS">Código de la EPS o de la Dirección Territorial de Salud</param>
        public RuntimeResult<string> Execute(string PE_CodeEPS)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeEPS = PE_CodeEPS;
                this.VC_CodeEPS = FUNC_VC_CodeEPS();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_CodeEPS()
        {
            return PE_CodeEPS.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_CodeEPS <= 6)) NonValidMessages.Add($"11| Error en variable 11. Valor no valido en Codigo de la EPS o de la entidad territorial. Menor o igual a 6 caracteres.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "0"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Novedad clínica del usuario a la fecha de corte
    /// </sumary> 
    public sealed class RUL_CACLINOVEL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 129
        /// </sumary>
        private long PE_ClinicalNovelty;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string Pe_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACLINOVEL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Novedad clínica del usuario a la fecha de corte
        /// </sumary>
        /// <param name="PE_ClinicalNovelty">variable 129</param>
        /// <param name="Pe_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ClinicalNovelty, string Pe_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ClinicalNovelty = PE_ClinicalNovelty;
                this.Pe_RegimeType = Pe_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_ClinicalNovelty) || PE_ClinicalNovelty == 55)) NonValidMessages.Add($"207| Error en variable 129. Valor no valido en “Novedad clínica del usuario a la fecha de corte”.");
            if (!((new string[] { "C", "S" }).Contains(Pe_RegimeType) || (new string[] { "E", "P", "N" }).Contains(Pe_RegimeType))) NonValidMessages.Add($"207| Error en variable 129. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_ClinicalNovelty)) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "0"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).Contains(PE_ClinicalNovelty)) && ((new string[] { "E", "P", "N" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalNovelty == 55) && ((new string[] { "C", "S" }).Contains(Pe_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"207| Error en variable 129. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Estadificación clínica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor)
    /// </sumary> 
    public sealed class RUL_CACLILINFO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Estadificación clínica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor)
        /// </sumary>
        private long PE_ClinicalStagingLymphoma;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        /// <sumary>
        /// V18
        /// </sumary>
        private DateTime PE_DIAGNOSISDATE;
        /// <sumary>
        /// V17
        /// </sumary>
        private string PE_NameNeoplasia;
        /// <sumary>
        /// V17
        /// </sumary>
        private bool VC_NameNeoplasia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACLILINFO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Estadificación clínica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor)
        /// </sumary>
        /// <param name="PE_ClinicalStagingLymphoma">Estadificación clínica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor)</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        /// <param name="PE_DIAGNOSISDATE">V18</param>
        /// <param name="PE_NameNeoplasia">V17</param>
        public RuntimeResult<string> Execute(long PE_ClinicalStagingLymphoma, string PE_RegimeType, DateTime PE_DIAGNOSISDATE, string PE_NameNeoplasia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ClinicalStagingLymphoma = PE_ClinicalStagingLymphoma;
                this.PE_RegimeType = PE_RegimeType;
                this.PE_DIAGNOSISDATE = PE_DIAGNOSISDATE;
                this.PE_NameNeoplasia = PE_NameNeoplasia;
                this.VC_NameNeoplasia = FUNC_VC_NameNeoplasia();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_NameNeoplasia()
        {
            List<string> listNaneoPlasia = new List<string>
{
    "C810", "C811", "C812", "C813", "C817", "C819", "C820", "C821", "C822", "C827","C829", "C830", "C831", "C832", "C833","C834", "C835", "C836", "C837", "C838", "C839", "C840", "C841", "C842", "C843", "C844", "C845", "C850","C851", "C857", "C859", "C960", "C961", "C962", "C963", "C967", "C969"
};
            return listNaneoPlasia.Contains(PE_NameNeoplasia);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma) || PE_ClinicalStagingLymphoma == 55 || PE_ClinicalStagingLymphoma == 93 || PE_ClinicalStagingLymphoma == 98 || PE_ClinicalStagingLymphoma == 99)) NonValidMessages.Add($"36| Error en variable 36. Valor no valido en Estadificacion clinica en linfoma no Hodgkin (Murphy) y linfoma Hodgkin (Ann Arbor). ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"36| Error en variable 36. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10. ");
            if (!(PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01) || PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01) || PE_DIAGNOSISDATE > new DateTime(2015, 01, 01))) NonValidMessages.Add($"36|Error en variable 36. La fecha de Diagnostic-Variable 18.");
            if (!(VC_NameNeoplasia == true || VC_NameNeoplasia != true)) NonValidMessages.Add($"36| Error en variable 36. Valor no valido en Nombre de la neoplasia (cancer o tumor) maligna reportada. Variable 17.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_ClinicalStagingLymphoma)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 93) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 93 es válida cuando “el paciente fue diagnosticado después del 2018-11-01.” Variable (18)", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36| Error en variable 36. Valor no valido  “Es un tumor de los enunciados”. -variable (17).", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE >= new DateTime(2018, 11, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE <= new DateTime(2015, 01, 01)) && (VC_NameNeoplasia != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ClinicalStagingLymphoma == 99) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)) && (PE_DIAGNOSISDATE > new DateTime(2015, 01, 01)) && (VC_NameNeoplasia == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"36|Error en variable 36. La opción 99 es válida en caso de diagnóstico antes de 2015-01-01. Variable 18.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Cisplatino 
    /// </sumary> 
    public sealed class RUL_CACISPLATI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.4
        /// </sumary>
        private long PE_CisplatinLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACISPLATI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Cisplatino 
        /// </sumary>
        /// <param name="PE_CisplatinLastCycle">variable 66.4</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CisplatinLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CisplatinLastCycle = PE_CisplatinLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CisplatinLastCycle) || PE_CisplatinLastCycle == 55 || PE_CisplatinLastCycle == 98)) NonValidMessages.Add($"113| Error en variable 66.7. Valor no valido en “En este último esquema el usuario recibió Cisplatino”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"113| Error en variable 66.7. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CisplatinLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CisplatinLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CisplatinLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CisplatinLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"113| Error en variable 66.7. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CisplatinLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Cisplatino
    /// </sumary> 
    public sealed class RUL_CACISPLAFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CisplatinFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACISPLAFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Cisplatino
        /// </sumary>
        /// <param name="PE_CisplatinFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CisplatinFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CisplatinFirstCycle = PE_CisplatinFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CisplatinFirstCycle) || PE_CisplatinFirstCycle == 98 || PE_CisplatinFirstCycle == 55)) NonValidMessages.Add($"68| Error en variable 53.7. Valor no valido en En este primer o unico esquema el usuario recibio Cisplatino.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"68| Error en variable 53.7. Valor no valido en Regimen de afiliacion AL SGSSS-variable 10.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CisplatinFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CisplatinFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CisplatinFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CisplatinFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CisplatinFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"68| Error en variable 53.7. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Ciclosporina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CACICLOSPO
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.6
        /// </sumary>
        private long PE_CiclosporinLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACICLOSPO() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Ciclosporina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_CiclosporinLastCycle">variable 66.6</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CiclosporinLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CiclosporinLastCycle = PE_CiclosporinLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinLastCycle) || PE_CiclosporinLastCycle == 55 || PE_CiclosporinLastCycle == 98)) NonValidMessages.Add($"112| Error en variable 66.6. Valor no valido en “En este último esquema el usuario recibió Ciclosporina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"112| Error en variable 66.6. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CiclosporinLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CiclosporinLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"112| Error en variable 66.6. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CiclosporinLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Ciclosporina 
    /// </sumary> 
    public sealed class RUL_CACICLOSFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_CiclosporinFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACICLOSFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Ciclosporina 
        /// </sumary>
        /// <param name="PE_CiclosporinFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_CiclosporinFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CiclosporinFirstCycle = PE_CiclosporinFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinFirstCycle) || PE_CiclosporinFirstCycle == 98 || PE_CiclosporinFirstCycle == 55)) NonValidMessages.Add($"67| Error en variable 53.6. Valor no valido en “En este primer o único esquema el usuario recibió Ciclosporina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"67| Error en variable 53.6. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CiclosporinFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CiclosporinFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CiclosporinFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CiclosporinFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"67| Error en variable 53.6. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Clorambucilo (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CACHLORAMB
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.9
        /// </sumary>
        private long PE_ChlorambucilLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACHLORAMB() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Clorambucilo (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_ChlorambucilLastCycle">variable 66.9</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_ChlorambucilLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ChlorambucilLastCycle = PE_ChlorambucilLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilLastCycle) || PE_ChlorambucilLastCycle == 55 || PE_ChlorambucilLastCycle == 98)) NonValidMessages.Add($"115| Error en variable 66.9. Valor no valido en “En este último esquema el usuario recibió Clorambucilo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"115| Error en variable 66.9. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ChlorambucilLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ChlorambucilLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"115| Error en variable 66.9. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_ChlorambucilLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Clorambucilo
    /// </sumary> 
    public sealed class RUL_CACHLORAFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_ChlorambucilFirstCycle;
        /// <sumary>
        /// Régimen del afiliado
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACHLORAFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Clorambucilo
        /// </sumary>
        /// <param name="PE_ChlorambucilFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">Régimen del afiliado</param>
        public RuntimeResult<string> Execute(long PE_ChlorambucilFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ChlorambucilFirstCycle = PE_ChlorambucilFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilFirstCycle) || PE_ChlorambucilFirstCycle == 98 || PE_ChlorambucilFirstCycle == 55)) NonValidMessages.Add($"70| Error en variable 53.9. Valor no valido en “En este primer o único esquema el usuario recibió Clorambucilo”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"70| Error en variable 53.9. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_ChlorambucilFirstCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ChlorambucilFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ChlorambucilFirstCycle == 98) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ChlorambucilFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"70| Error en variable 53.9. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió quimioterapia intratecal en el primer ciclo de este corte?
    /// </sumary> 
    public sealed class RUL_CACHEMOTHE
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 57
        /// </sumary>
        private long PE_IntrathecalChemotherapyFirstCycle;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACHEMOTHE() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió quimioterapia intratecal en el primer ciclo de este corte?
        /// </sumary>
        /// <param name="PE_IntrathecalChemotherapyFirstCycle">variable 57</param>
        public RuntimeResult<string> Execute(long PE_IntrathecalChemotherapyFirstCycle)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IntrathecalChemotherapyFirstCycle = PE_IntrathecalChemotherapyFirstCycle;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 98 }).Contains(PE_IntrathecalChemotherapyFirstCycle))) NonValidMessages.Add($"97| Error en variable 57. Valor no valido en “¿Recibió quimioterapia intratecal en el primer ciclo de este corte?”.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
        }
        #endregion
    }
    /// <sumary>
    /// ¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?
    /// </sumary> 
    public sealed class RUL_CACELLPROG
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 106
        /// </sumary>
        private long PE_TransplantProgenitorCells;
        /// <sumary>
        /// V10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CACELLPROG() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?
        /// </sumary>
        /// <param name="PE_TransplantProgenitorCells">variable 106</param>
        /// <param name="PE_RegimeType">V10</param>
        public RuntimeResult<string> Execute(long PE_TransplantProgenitorCells, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TransplantProgenitorCells = PE_TransplantProgenitorCells;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 98 }).Contains(PE_TransplantProgenitorCells) || PE_TransplantProgenitorCells == 55)) NonValidMessages.Add($"178| Error en variable 106. Valor no valido en “¿Recibió el usuario trasplante de células progenitoras hematopoyética dentro del periodo de corte actual?”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"178| Error en variable 106. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 98 }).Contains(PE_TransplantProgenitorCells)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_TransplantProgenitorCells == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"178| Error en variable 106. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer o único esquema el usuario recibió Busulfano
    /// </sumary> 
    public sealed class RUL_CABUSULFIR
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_BusulfanFirstCycle;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CABUSULFIR() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer o único esquema el usuario recibió Busulfano
        /// </sumary>
        /// <param name="PE_BusulfanFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">variable 10</param>
        public RuntimeResult<string> Execute(long PE_BusulfanFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BusulfanFirstCycle = PE_BusulfanFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_BusulfanFirstCycle) || PE_BusulfanFirstCycle == 55 || PE_BusulfanFirstCycle == 98)) NonValidMessages.Add($"63| Error en variable 53.2. Valor no valido en “En este primer o único esquema el usuario recibió Busulfano”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"63| Error en variable 53.2. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_BusulfanFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_BusulfanFirstCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_BusulfanFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_BusulfanFirstCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"63| Error en variable 53.2. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_BusulfanFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Busulfano (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CABUSULFAN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.2
        /// </sumary>
        private long PE_BusulfanLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CABUSULFAN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Busulfano (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_BusulfanLastCycle">variable 66.2</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_BusulfanLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BusulfanLastCycle = PE_BusulfanLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_BusulfanLastCycle) || PE_BusulfanLastCycle == 55 || PE_BusulfanLastCycle == 98)) NonValidMessages.Add($"108| Error en variable 66.2. Valor no valido en “En este último esquema el usuario recibió Busulfano”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"108| Error en variable 66.2. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_BusulfanLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_BusulfanLastCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_BusulfanLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_BusulfanLastCycle == 55) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"108| Error en variable 66.2. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_BusulfanLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CABOPLATIN
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.4
        /// </sumary>
        private long PE_CarboplatinLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CABOPLATIN() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Carboplatino (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_CarboplatinLastCycle">variable 66.4</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_CarboplatinLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CarboplatinLastCycle = PE_CarboplatinLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinLastCycle) || PE_CarboplatinLastCycle == 55 || PE_CarboplatinLastCycle == 98)) NonValidMessages.Add($"110| Error en variable 66.4. Valor no valido en “En este último esquema el usuario recibió Carboplatino”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"110| Error en variable 66.4. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_CarboplatinLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CarboplatinLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CarboplatinLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"110| Error en variable 66.4. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_CarboplatinLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este primer ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CABLEOMYFI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private long PE_BleomycinFirstCycle;
        /// <sumary>
        /// variable 10
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CABLEOMYFI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este primer ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_BleomycinFirstCycle">Codigo de habilitacion</param>
        /// <param name="PE_RegimeType">variable 10</param>
        public RuntimeResult<string> Execute(long PE_BleomycinFirstCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BleomycinFirstCycle = PE_BleomycinFirstCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_BleomycinFirstCycle) || PE_BleomycinFirstCycle == 98 || PE_BleomycinFirstCycle == 55)) NonValidMessages.Add($"62| Error en variable 53.1. Valor no valido en “En este primer ciclo el usuario recibió Bleomicina” ");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "E", "P", "N" }).Contains(PE_RegimeType))) NonValidMessages.Add($"62| Error en variable 53.1. Valor no valido en “Régimen de afiliación AL SGSSS”-variable (10). ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_BleomycinFirstCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_BleomycinFirstCycle)) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_BleomycinFirstCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_BleomycinFirstCycle == 98) && ((new string[] { "E", "P", "N" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_BleomycinFirstCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"62| Error en variable 53.1. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).  ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// En este último ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
    /// </sumary> 
    public sealed class RUL_CABLEOMYCI
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// variable 66.1
        /// </sumary>
        private long PE_BleomycinLastCycle;
        /// <sumary>
        /// Régimen del usuario
        /// </sumary>
        private string PE_RegimeType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CABLEOMYCI() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// En este último ciclo el usuario recibió Bleomicina (puede haber recibido más de un medicamento)
        /// </sumary>
        /// <param name="PE_BleomycinLastCycle">variable 66.1</param>
        /// <param name="PE_RegimeType">Régimen del usuario</param>
        public RuntimeResult<string> Execute(long PE_BleomycinLastCycle, string PE_RegimeType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BleomycinLastCycle = PE_BleomycinLastCycle;
                this.PE_RegimeType = PE_RegimeType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3 }).Contains(PE_BleomycinLastCycle) || PE_BleomycinLastCycle == 55 || PE_BleomycinLastCycle == 98)) NonValidMessages.Add($"107| Error en variable 66.1. Valor no valido en “ En este último esquema el usuario recibió Bleomicina”.");
            if (!((new string[] { "C", "S" }).Contains(PE_RegimeType) || (new string[] { "N", "P", "E" }).Contains(PE_RegimeType))) NonValidMessages.Add($"107| Error en variable 66.1. Valor no valido en “Régimen de afiliación AL SGSSS”- validar variable (10).");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3 }).Contains(PE_BleomycinLastCycle)) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3 }).Contains(PE_BleomycinLastCycle)) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_BleomycinLastCycle == 55) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_BleomycinLastCycle == 55) && ((new string[] { "N", "P", "E" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"107| Error en variable 66.1. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10).", this.FileName);
            }
            else if ((PE_BleomycinLastCycle == 98) && ((new string[] { "C", "S" }).Contains(PE_RegimeType)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }

    /// <sumary>
    /// Clase para definición de funciones
    /// </sumary>
    public static class Helper
    {
        /// <sumary>
        /// Calcula la edad
        /// </sumary> 
        /// <param name="FechaNac">Fecha de nacimiento</param>
        /// <param name="FechaCorte">Fecha de corte</param>
        /// <param name="TipoRespuesta">Tipo de respuesta</param>
        public static long USR_Years(DateTime FechaNac, DateTime FechaCorte, string TipoRespuesta)
        {
            long result = 0;
            DateTime initialDate = new DateTime(1, 1, 1);
            switch (TipoRespuesta)
            {
                case "d":
                    result = (FechaCorte - FechaNac).Days;
                    break;

                case "m":
                    if (FechaCorte.Day < FechaNac.Day)
                    {
                        result = Math.Abs(((FechaCorte.Month - FechaNac.Month) - 1) + 12 * (FechaCorte.Year - FechaNac.Year));
                    }
                    else
                    {
                        result = Math.Abs((FechaCorte.Month - FechaNac.Month) + 12 * (FechaCorte.Year - FechaNac.Year));
                    }
                    break;

                case "a":
                    if (FechaCorte >= FechaNac)
                    {
                        TimeSpan diffDate = FechaCorte - FechaNac;
                        result = (initialDate + diffDate).Year - 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break;
            }

            return result;

        }
        /// <sumary>
        /// Obtiene un archivo del repositorio de archivos según el tipo
        /// </sumary> 
        /// <param name="company">Empresa</param>
        /// <param name="libraryId">Id de librería</param>
        /// <param name="fileId">Id del archivo</param>
        public static ENT_ActionResult USR_WSGetFile(long company, long libraryId, string fileId)
        {
            try
            {
                if (string.IsNullOrEmpty(fileId))
                {
                    throw new ArgumentNullException("fileId");
                }

                ENT_ActionResult result = new ENT_ActionResult();
                string url = "http://10.1.0.159:8080/api/api/Upload/GetDocument";
                url = url + "?company=" + company + "&libraryId=" + libraryId + "&fileId=" + fileId;
                result = SYS_WSGET(url, null);
                return result;
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Adjunta el archivo al proceso
        /// </sumary> 
        /// <param name="fileFullPath">fileFullPath</param>
        /// <param name="pCodUsu">Código de usuario</param>
        /// <param name="pCodEmpr">Id de empresa</param>
        /// <param name="pCodCas">Número de caso</param>
        /// <param name="pCodSeg">Código de seguridad</param>
        public static ENT_ActionResult USR_WSAttachFileToProcess(string fileFullPath, string pCodUsu, string pCodEmpr, string pCodCas, string pCodSeg)
        {
            try
            {
                if (string.IsNullOrEmpty(pCodUsu) || string.IsNullOrEmpty(pCodEmpr) || string.IsNullOrEmpty(pCodCas) || string.IsNullOrEmpty(pCodSeg))
                {
                    throw new ArgumentNullException("pCodUsu,pCodEmpr,pCodCas,pCodSeg");
                }

                // Sube al ftp
                string remotePath = $"WORKFLOW/{pCodEmpr}/{DateTime.Now.Year}/WF_CDOCU";
                var fileName = $"{pCodEmpr}_{pCodCas}_1_{Path.GetFileName(fileFullPath)}";
                remotePath += $"/{fileName}";
                using (FileStream fs = new FileStream(fileFullPath, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
                {
                    var r = USR_FtpUpload(remotePath, fs);
                    fs.Close();
                }

                return new ENT_ActionResult() { IsSuccessful = true, FileName = Path.GetFileName(Convert.ToString(fileFullPath)) };
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Función para validar campos vacios
        /// </sumary> 
        /// <param name="PE_Value">Parametro de entrada</param>
        public static string USR_ValidationEmpty(string PE_Value)
        {
            return String.IsNullOrEmpty(PE_Value) ? "PE_Empty" : PE_Value;
        }
        /// <sumary>
        /// Función para validar Fecha dentro de un ranfo de fechas
        /// </sumary> 
        /// <param name="InitDate">Fecha inicial</param>
        /// <param name="EndDate">Fecha Final</param>
        /// <param name="Date">Fecha para evaluar</param>
        public static bool USR_ValidationDates(DateTime InitDate, DateTime EndDate, DateTime Date)
        {
            return Date >= InitDate && Date <= EndDate;

        }
        /// <sumary>
        /// Función que valida los caracteres especiales en una cadena de texto
        /// </sumary> 
        /// <param name="text">Texto a validar</param>
        public static bool USR_ValidateSpecialCharacters(string text)
        {
            System.Text.RegularExpressions.Regex pattern = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z0-9 ]+$");

            return pattern.IsMatch(text);
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="Parameters0247">Parameters0247</param>
        /// <param name="lineSeparator">lineSeparator</param>
        /// <param name="columnSeparator">columnSeparator</param>
        /// <param name="columnLength">columnLength</param>
        /// <param name="entity">tipo entidad</param>
        /// <param name="listErrors">listErrors</param>
        public static dynamic USR_ValidateRule0247(ENT_parameters0247 Parameters0247, string lineSeparator, string columnSeparator, long columnLength, dynamic entity, List<string> listErrors)
        {
            try
            {
                var result = USR_WSGetFile(Parameters0247.CompanyId, Parameters0247.LibraryId, Parameters0247.FileId);

                Type typeEntity = (Type)entity;
                Type genericListType = typeof(List<>).MakeGenericType(typeEntity);
                IList lstEntities = (IList)Activator.CreateInstance(genericListType);

                if (!result.IsError && result.IsSuccessful)
                {
                    var data = JsonConvert.DeserializeObject<dynamic>(result.Result.ToString());
                    byte[] fileBody = data.FileBody;

                    if (fileBody != null && fileBody.Length > 0)
                    {
                        if (!USR_ValidateFileName0247(listErrors, Parameters0247.IdTypePopulation, Parameters0247.OperatorId, (string)((JValue)((dynamic)result.Result).FileName).Value)) //Validacion archivo 0247
                        {
                            return lstEntities;
                        }

                        using (Stream stream = new MemoryStream(fileBody))
                        {
                            using (StreamReader streamReader = new StreamReader(stream, Encoding.UTF8))
                            {
                                //Leemos el archivo
                                var text = streamReader.ReadToEnd();

                                //Separamos por lineas 
                                string[] lines = text.Split(new string[] { lineSeparator }, StringSplitOptions.RemoveEmptyEntries);
                                int countLines = lines.Length - 1;
                                int contador = 0;

                                for (var i = 0; i < lines.Length; i++)
                                {
                                    string[] columns = lines[i].Split(columnSeparator[0]);

                                    if (columns.Length != columnLength)
                                    {
                                        listErrors.Add($"Fila {i}|Campos Incorrectos|El número de variables supera el máximo permitido por la resolución o no está usando tab como separador verifique el archivo");
                                    }
                                    contador++;
                                }

                                if (listErrors.Count == 0)
                                {
                                    lstEntities = SYS_FileToEntities(text, lineSeparator, columnSeparator, entity);

                                    int index = 0;
                                    PropertyInfo[] properties = typeEntity.GetProperties();

                                    Dictionary<string, string> dic = new Dictionary<string, string>();
                                    // Convertimos archivo a lista de entidades
                                    foreach (dynamic ent in lstEntities)
                                    {
                                        columnSeparator = "|";
                                        //Se comentara para que reciba usuarios bilaterales
                                        //Valida que el usuario no este repetido
                                        //if (dic.ContainsKey($"{ent.IdentificationType}_{ent.DocumentNumber}"))
                                        //{
                                        //    listErrors.Add($"Fila {index + 1}{columnSeparator}Columna 4 | NumeroDocumento | La personsa identificada con {ent.IdentificationType} {ent.DocumentNumber} se encuentra repetida");
                                        //}
                                        //else
                                        //    dic.Add($"{ent.IdentificationType}_{ent.DocumentNumber}", ent.DocumentNumber);

                                        //Ingresa las validacion de las expresiones regulares
                                        if (ent.ValidationErrorsList?.Count > 0)
                                        {
                                            string mensajeItem = $"Fila {index + 1}";
                                            foreach (string msg in ent.ValidationErrorsList)
                                            {
                                                //Asignamos el item de error a los mensajes de validacion de los atributos
                                                var p = properties.Select((Value, Index) => new { Value, Index })
                                                            .Single(pro => Regex.IsMatch(msg, string.Format(@"\b{0}\b", Regex.Escape(pro.Value.Name))));
                                                string msgError = ((RegexAttribute)p.Value.GetCustomAttribute(typeof(RegexAttribute)))?.Message;

                                                listErrors.Add(string.Concat(mensajeItem, columnSeparator, msgError.Trim().Replace("-", "|").Replace(" - ", "|")));
                                            }
                                        }
                                        ++index;
                                    }

                                    if (listErrors.Count == 0)
                                    {
                                        return new ENT_ActionResult() { FileName = string.Concat((string)((JValue)((dynamic)result.Result).FileName).Value), Result = lstEntities };
                                    }
                                    else
                                    {
                                        return lstEntities;
                                    }
                                }
                                else
                                {
                                    return lstEntities;
                                }
                            }
                        }
                    }
                    else
                    {
                        listErrors.Add($"La estructura del archivo {0247} no corresponde a un formato válido 0247");
                    }
                }
                else
                {
                    listErrors.Add($"No se encontró el archivo {0247} o su estructura no corresponde al formato 0247");
                    return new ENT_ActionResult() { IsError = true };
                }
                return new ENT_ActionResult() { IsError = true };
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="listError">listError</param>
        /// <param name="IdTypePopulationLn">IdTypePopulationLn</param>
        /// <param name="operatorId">operatorId</param>
        /// <param name="fileName">fileName</param>
        public static bool USR_ValidateFileName0247(List<string> listError, long IdTypePopulationLn, long operatorId, string fileName)
        {
            try
            {
                bool result = true;
                string[] nameFile = fileName.Split('_');
                const string DATE_FORMAT_FILE = "yyyyMMdd";
                DateTime dateIsValid = new DateTime();
                const string NAME_FILE_0247 = "CANCER";
                const string extension = ".txt";
                const int len = 26;
                int adapterId = 1;


                if (!System.IO.Path.GetExtension(fileName).Equals($"{extension}"))
                {
                    listError.Add("La extension del archivo no es valida");
                    result = false;
                }

                // Valida la longitud del archivo
                if (!(fileName.Length == len && nameFile.Length == 3))
                {
                    listError.Add("La longitud y el nombre del archivo no tiene la estructura requerida debe ser AAAAMMDD_CODEAPB_CANCER.txt");
                    return listError.Count == 0;
                }

                // Valida el divipola contra la BD
                var sql = new StringBuilder();
                sql.Append("SELECT DISTINCT RipsCode ");
                sql.Append("FROM Operator WITH (NOLOCK)");
                sql.AppendFormat("WHERE id IN ({0})", Convert.ToInt32(operatorId));

                var Operator = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (Operator.IsError)
                {
                    listError.Add("Hubo un error al consltar en la tabla Operator Divipola");
                    result = false;
                }
                var listRips = JsonConvert.DeserializeObject<List<dynamic>>(Operator.Result.ToString());

                if (Convert.ToString(listRips[0].RipsCode) != nameFile[1])
                {
                    listError.Add("Codigo divipola que viene en el nombre del archivo es invalido, debe ser RES004");
                    result = false;
                }

                if (nameFile[2].Split('.')[0] != NAME_FILE_0247)
                {
                    listError.Add($"El nombre del archivo no tiene la estructura requerida debe ser CANCER en mayuscula y estan reportando {nameFile[2].Split('.')[0]}");
                    result = false;
                }
                //Valida la fecha
                if (!DateTime.TryParseExact(nameFile[0], DATE_FORMAT_FILE, null, DateTimeStyles.None, out dateIsValid))
                {
                    listError.Add("La fecha de corte en el nombre del archivo no es valida");
                    result = false;
                }
                //Valida si corresponde al tipo operador
                sql = new StringBuilder();
                sql.Append("SELECT A.Code,B.RipsCode ");
                sql.Append("FROM TypeDetail	A WITH(NOLOCK) ");
                sql.Append("INNER JOIN Operator B ON A.Name = B.Name ");
                sql.AppendFormat($"WHERE IdTypeHead = 72 AND A.Code = {IdTypePopulationLn} AND B.RipsCode ='{nameFile[1]}'");

                var ValidateOperator = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
                if (ValidateOperator.IsError)
                {
                    listError.Add("Hubo un error al consltar en la tabla Operator Magisterio");
                    result = false;
                }
                var listValidateOperator = JsonConvert.DeserializeObject<List<dynamic>>(ValidateOperator.Result.ToString());

                if (listValidateOperator.Count.Equals(0))
                {
                    listError.Add("El codigo EAPB del archivo cargado no corresponde al tipo de afiliado seleccionado.");
                    result = false;
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="_entity">Variable de parámetro de función vacía</param>
        /// <param name="listErrors">listErrors</param>
        /// <param name="index">index</param>
        /// <param name="listDocumentTypesDB">listDocumentTypesDB</param>
        /// <param name="IdTypePopulation">IdTypePopulation</param>
        public static long USR_ValidateDocumentNumber0247(long adapterId, List<ENT_StructureRes0247> _entity, List<string> listErrors, long index, List<dynamic> listDocumentTypesDB, long IdTypePopulation)
        {
            index = 1;
            //Funcion valida si el usuario existe
            List<dynamic> personList = new List<dynamic>();
            var listErrorsDocumentNumber = new List<string>();
            Dictionary<string, ENT_StructureRes0247> _dictionary4505 = new Dictionary<string, ENT_StructureRes0247>();
            Dictionary<string, string> _dictionaryDocumentType = new Dictionary<string, string>();
            Dictionary<string, List<dynamic>> __dictionaryDuplicate = new Dictionary<string, List<dynamic>>();
            Dictionary<string, string> dic = new Dictionary<string, string>();
            List<string> __listBiltateral = new List<string>();


            _dictionaryDocumentType.Add("RC", "2");
            _dictionaryDocumentType.Add("TI", "3");
            _dictionaryDocumentType.Add("CC", "1");
            _dictionaryDocumentType.Add("CE", "6");
            _dictionaryDocumentType.Add("PA", "7");
            _dictionaryDocumentType.Add("CD", "9");
            _dictionaryDocumentType.Add("SC", "4");
            _dictionaryDocumentType.Add("PE", "3271");
            _dictionaryDocumentType.Add("MS", "1424");
            _dictionaryDocumentType.Add("AS", "2825");

            //IDictionary<string, int> __listNovelties;

            List<string> listBilateralDiagnosis = new List<string> { "C090", "C091", "C098", "C099", "C340", "C341", "C342", "C343", "C348", "C349", "C500", "C501", "C502", "C503",
            "C504", "C505", "C506", "C508", "C509", "C56X", "C620", "C621", "C629", "C690", "C691", "C692", "C693", "C694", "C695", "C696", "C698", "C699", "C780", "C781", "C782", "C783",
            "C784", "C785", "C786", "C787", "C788", "C790", "C796", "D022", "D023", "D024", "D050", "D051", "D057", "D059", "D143", "D222", "D24X", "D27X", "D282", "D292", "D302", "D304",
            "D310", "D311", "D312", "D313", "D314", "D315", "D316", "D319", "D381", "D385", "D391", "D401", "D410", "D412", "D413", "D486" };

            foreach (ENT_StructureRes0247 file in _entity)
            {
                if (!_dictionary4505.ContainsKey($"{file.IdentificationType}_{file.DocumentNumber}"))
                    _dictionary4505.Add($"{file.IdentificationType}_{file.DocumentNumber}", file);

                __listBiltateral.Add($"{file.IdentificationType}_{file.DocumentNumber}");

                if (_dictionaryDocumentType.ContainsKey(file.IdentificationType))
                {
                    var documentTypeDictionary = _dictionaryDocumentType[file.IdentificationType];

                    var documentTypeBD = listDocumentTypesDB.Where(d => d.Id == documentTypeDictionary).FirstOrDefault();
                    // Agrega personas para consultarlas posteriormente
                    personList.Add(new { DocumentType = documentTypeBD.Id.ToString(), Identification = file.DocumentNumber, Index = index, typeId = file.IdentificationType });
                }
                index++;

                USR_FillDictionaryPerson(file.IdentificationType, file.DocumentNumber, file.NameNeoplasia, file.AdministrativeNovelty, __dictionaryDuplicate);

            }

            List<dynamic> listpersonByPopulation = new List<dynamic>();
            USR_ValidateAffiliatePersonResolutions0247(personList, adapterId, listErrorsDocumentNumber, listpersonByPopulation, IdTypePopulation, _entity, _dictionaryDocumentType);
            var newlist = listErrorsDocumentNumber.Select(x => x.Replace("item", "Fila")).ToList();

            listErrors.AddRange(newlist);

            index = 1;
            //Valida los codigo Bilaterales
            foreach (ENT_StructureRes0247 item in _entity)
            {
                List<string> detailsTemp = new List<string>();
                foreach (var item1 in __dictionaryDuplicate[$"{item.IdentificationType}_{item.DocumentNumber}"])
                {
                    detailsTemp.Add(item1);
                }

                USR_ValidateDiagnosisByPerson(item.IdentificationType, item.DocumentNumber, item.NameNeoplasia, item.AdministrativeNovelty, listBilateralDiagnosis, index, listErrors, detailsTemp, dic);
                index++;
            }

            return index;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="documentType">documentType</param>
        /// <param name="documentNumber">documentNumber</param>
        /// <param name="CIE10">CIE10</param>
        /// <param name="noveltyType">noveltyType</param>
        /// <param name="listBilateralDiagnosis">listBilateralDiagnosis</param>
        /// <param name="index">index</param>
        /// <param name="listErrors">listErrors</param>
        /// <param name="detailsTemp">detailsTemp</param>
        /// <param name="dic">dic</param>
        public static bool USR_ValidateDiagnosisByPerson(string documentType, string documentNumber, string CIE10, string noveltyType, List<string> listBilateralDiagnosis, long index, List<string> listErrors, List<string> detailsTemp, dynamic dic)
        {
            string columnSeparator = "|";

            /*Si el afiliado se encuentra reportado una vez en el archivo y en la variable 128 indice 205, reporta la opción 12, se genera error*/
            if (detailsTemp != null && detailsTemp.Count == 1 && detailsTemp.FirstOrDefault() == $"{CIE10}_12")
            {
                listErrors.Add(string.Concat($"Fila {index}", $"|Columna 206|Error en variable 128. El afiliado con tipo de documento '{documentType}' número '{documentNumber}' CIE-10 '{CIE10}' y novedad administrativa o variable 128 igual a '{noveltyType}', solo reporta un registro."));
            }
            /*Si el afiliado tiene mas de un registro en el archivo se valida que se haya registrado las opciones validas en la variable 128*/
            else if (detailsTemp != null && detailsTemp.Count > 1)
            {
                if (listBilateralDiagnosis.Contains(CIE10))
                {
                    if (!(noveltyType == "4" || noveltyType == "10" || noveltyType == "12"))
                        listErrors.Add(string.Concat($"Fila {index}", $"|Columna 206| Error en variable 128. El afiliado con tipo de documento '{documentType}' número '{documentNumber}' CIE-10 '{CIE10}' bilateral y novedad administrativa o variable 128 igual a '{noveltyType}', debe ser reportado con una de las siguientes opciones ' 12'"));
                    else
                    {
                        if (detailsTemp.Count(x => x.Contains($"{CIE10}_")) > 2)
                            listErrors.Add(string.Concat($"Fila {index}", $"|Columna 17| Error en variable 17. El afiliado con tipo de documento '{documentType}' número '{documentNumber}' CIE-10 '{CIE10}' bilateral, puede ser reportado maximo dos veces."));
                    }
                }
                else
                {
                    //Valida que el usuario no este repetido
                    if (dic.ContainsKey($"{documentType}_{documentNumber}_{CIE10}"))
                    {
                        listErrors.Add($"Fila {index}{columnSeparator}Columna 4| Error en la variable 4. NumeroDocumento La personsa identificada con {documentType} {documentNumber} se encuentra repetida");
                    }
                    else
                        dic.Add($"{documentType}_{documentNumber}_{CIE10}", documentNumber);

                    if (!(noveltyType == "12"))
                    {
                        listErrors.Add(string.Concat($"Fila {index}", $"|Columna 206| Error en variable 128. El afiliado con tipo de documento '{documentType}' número '{documentNumber}' CIE-10 '{CIE10}' unilateral y novedad administrativa o variable 128 igual a '{noveltyType}', debe ser reportado con una de las siguientes opciones '12'"));
                    }
                    //else
                    //{
                    //    if (detailsTemp.Count(x => x.Contains($"{CIE10}_")) > 1)
                    //    listErrors.Add(string.Concat($"Fila {index}", $"17| Error en variable 17. El afiliado con tipo de documento '{documentType}' número '{documentNumber}' CIE-10 '{CIE10}' unilateral, ya fue reportado para este periodo."));
                    //}
                }
            }
            return true;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="personList">Variable de parámetro de función vacía</param>
        /// <param name="adapterId">adapterId</param>
        /// <param name="listErrors">listErrors</param>
        /// <param name="listpersonByPopulation">listpersonByPopulation</param>
        /// <param name="IdTypePopulation">IdTypePopulation</param>
        /// <param name="_entity">_entity</param>
        /// <param name="_dictionaryDocumentType">_dictionaryDocumentType</param>
        public static List<string> USR_ValidateAffiliatePersonResolutions0247(List<dynamic> personList, long adapterId, List<string> listErrors, List<dynamic> listpersonByPopulation, long IdTypePopulation, List<ENT_StructureRes0247> _entity, dynamic _dictionaryDocumentType)
        {
            //Consulta en la tabla person
            ENT_ActionResult persons = USR_GetPersonByDocumentNumber(adapterId, personList);
            if (persons.IsError) throw new Exception(persons.ErrorMessage);
            List<dynamic> listpersonByDocumentNumber = JsonConvert.DeserializeObject<List<dynamic>>(persons.Result.ToString());
            Dictionary<string, dynamic> dictionarypersonByDocumentNumber = listpersonByDocumentNumber.ToDictionary(x => $"{x.IdDocumentType}_{x.DocumentNumber}", x => x);

            //Valida tipo de poblacion
            var res = (from p in listpersonByDocumentNumber select p.Id).ToList();
            listpersonByPopulation.Add(res);
            ENT_ActionResult personsPopulation = USR_GetPersonByTypePopulation(adapterId, listpersonByPopulation);
            if (personsPopulation.IsError) throw new Exception(persons.ErrorMessage);
            List<ENT_Person4505> listpersonBypersonsPopulation = JsonConvert.DeserializeObject<List<ENT_Person4505>>(personsPopulation.Result.ToString());

            int index = 1;
            foreach (var ent in _entity)
            {
                var documentTypeDictionary = _dictionaryDocumentType[ent.IdentificationType];

                if (listpersonBypersonsPopulation.Exists(f => f.IdDocumentType == documentTypeDictionary && f.DocumentNumber == ent.DocumentNumber))
                {
                    if (listpersonBypersonsPopulation.Exists(f => f.DocumentNumber == ent.DocumentNumber && f.IdTypePopulation != IdTypePopulation.ToString()))
                        listErrors.Add(string.Concat($"Fila {index}", "|El tipo de afiliado en el archivo no corresponde al tipo de afiliado seleccionado en la plantilla ", $" numero {ent.DocumentNumber}"));
                }
                index++;
            }

            List<dynamic> personsNoExist = new List<dynamic>();

            foreach (var person in personList)
            {
                if (!dictionarypersonByDocumentNumber.ContainsKey($"{person.DocumentType}_{person.Identification}"))
                {
                    personsNoExist.Add(person);

                }
            }
            if (personsNoExist.Count > 0)
            {

                ENT_ActionResult novelty = USR_GetNoveltyDetail(adapterId, personsNoExist);
                if (novelty.IsError)
                {
                    throw new Exception(novelty.ErrorMessage);
                }
                List<dynamic> novChangeNumDoc = JsonConvert.DeserializeObject<List<dynamic>>(novelty.Result.ToString());
                if (novChangeNumDoc.Count > 0)
                {
                    foreach (var itemNoveltyDetail in novChangeNumDoc)
                    {
                        var novelties = USR_GetNoveltiesTypeDocumentByPerson(adapterId, itemNoveltyDetail.IdNovelty.ToString());
                        if (novelties.IsError)
                        {
                            throw new Exception(novelties.ErrorMessage);
                        }
                        List<dynamic> listNovelties = JsonConvert.DeserializeObject<List<dynamic>>(novelties.Result.ToString());
                        foreach (var itemNovelty in listNovelties)
                        {
                            var person = USR_GetPersonByTypeAndDocumentNumber(adapterId, itemNovelty.NewValue.ToString(), itemNoveltyDetail.NewValue.ToString());
                            if (person.IsError)
                            {
                                throw new Exception(person.ErrorMessage);
                            }
                            List<dynamic> personBD = JsonConvert.DeserializeObject<List<dynamic>>(person.Result.ToString());
                            if (personBD != null && personBD.Count > 0)
                            {
                                personsNoExist.RemoveAll(d => d.Identification == itemNoveltyDetail.OldValue.ToString());
                                break;
                            }
                        }
                    }

                }
                //Valida cambio de tipo de documento       

                var novelties2 = USR_GetNoveltiesAffiliate(adapterId, personsNoExist);
                if (novelties2.IsError)
                {
                    throw new Exception(novelties2.ErrorMessage);
                }
                List<dynamic> listNovelties2 = JsonConvert.DeserializeObject<List<dynamic>>(novelties2.Result.ToString());
                Dictionary<string, dynamic> dictionaryNovelties2 = listNovelties2.ToDictionary(x => $"{x.OldValue}_{x.DocumentNumber}", x => x);
                List<Tuple<int, string>> ForDelete = new List<Tuple<int, string>>();

                foreach (var itemPerson in personsNoExist)
                {
                    if (dictionaryNovelties2.ContainsKey($"{itemPerson.DocumentType}_{itemPerson.Identification}"))
                    {
                        Tuple<int, string> tuple = new Tuple<int, string>(int.Parse(itemPerson.DocumentType), itemPerson.Identification);

                        ForDelete.Add(tuple);
                    }
                }

                foreach (var item in ForDelete)
                {
                    personsNoExist.RemoveAll(d => d.Identification == item.Item2);
                }

                foreach (var item in personsNoExist)
                {
                    listErrors.Add($"item {item.Index}|La persona identificada con tipo de documento {item.typeId} Número {item.Identification} registrada el|no existe");
                }
            }

            return listErrors;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="sourceList">Variable de parámetro de función vacía</param>
        /// <param name="maxSubItems">maxSubItems</param>
        public static dynamic USR_SplitList0247(List<ENT_StructureRes0247> sourceList, long maxSubItems)
        {
            return sourceList
.Select((x, i) => new { Index = i, Value = x })
.GroupBy(x => x.Index / maxSubItems)
.Select(x => x.Select(v => v.Value).ToList())
.ToList();
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="cutOffDate">cutOffDate</param>
        /// <param name="code">code</param>
        /// <param name="idOperator">idOperator</param>
        /// <param name="caseNumber">caseNumber</param>
        /// <param name="initialDate">initialDate</param>
        /// <param name="endDate">endDate</param>
        /// <param name="idPopulation">idPopulation</param>
        /// <param name="listFileEntity">listFileEntity</param>
        public static ENT_ActionResult USR_Save0247File(string cutOffDate, string code, long idOperator, string caseNumber, string initialDate, string endDate, long idPopulation, dynamic listFileEntity)
        {
            try
            {
                dynamic head = new
                {
                    CutOffDate = cutOffDate,
                    Code = code,
                    ProcessDate = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss"),
                    IdOperator = idOperator,
                    CaseNumber = caseNumber,
                    InitialDate = initialDate,
                    EndDate = initialDate,
                    IdTypePopulation = idPopulation
                };


                string urlHead = "http://10.1.0.159:8085/ASSURANCE/api/Resolution0247/SaveFileHead0247Brm";
                ENT_ActionResult resultHead = SYS_WSPOST(urlHead, head, null, null);

                var HeadCode = ((JContainer)resultHead.Result).First;
                var idHeadResult = ((JContainer)HeadCode).First;

                dynamic head2 = USR_SplitList0247(listFileEntity, 4000);

                if (resultHead.IsSuccessful)
                {
                    ENT_ActionResult result = new ENT_ActionResult();
                    string url = "http://10.1.0.159:8085/ASSURANCE/api/Resolution0247/SaveFileDetail0247BrmLotes";
                    foreach (var listaLotes in head2)
                    {
                        dynamic head3 = new
                        {
                            FileHead0247 = listaLotes,
                            IdHeaad = idHeadResult.ToString()
                        };
                        result = SYS_WSPOST(url, head3, null, null);
                    }
                    return result;
                }
                return resultHead;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        /// <sumary>
        /// Función para la identificación de mensajes
        /// </sumary> 
        /// <param name="Code">código del mensaje</param>
        /// <param name="RuleCode">RULE CODE</param>
        /// <param name="Column">Parametro de columna</param>
        public static string USR_PHASESCHEMOTERAPYMESSAGES(string Code, string RuleCode, string Column)
        {
            Dictionary<string, string> messages = new Dictionary<string, string>()
{
    {"CH0001", $"{Column}| Error en variable {RuleCode}.el código CIE10 registrado no aplica solo aplica para hematolinfáticos con los siguientes códigos de clasificación diagnóstica CIE-10: C835 Linfoma no hodgkin linfoblástico (difuso), C910 Leucemia linfoblástica aguda, C920 Leucemia mieloide aguda, C924 Leucemia promielocitica aguda y C925 Leucemia mielomonocítica aguda).variable 17"},
    {"CH0002", $"{Column}| Error en variable {RuleCode}. Valor no valido en “Régimen de afiliación AL SGSSS” Debe ser C o S-variable (10)."},
    {"CH0003", $"{Column}| Error en variable {RuleCode}. Valor no valido. Si marca opción 2 en variable {RuleCode} debe marcar 0 en la variable 46."},
    {"CH0004", $"{Column}| Error en variable {RuleCode}. Valor no valido. En “¿Cuántas fases de quimioterapia recibió el usuario en este corte?” máximo 2 caracteres. Variable 46"},
    {"CH0005", $"{Column}| Error en variable {RuleCode}. Valor no valido. Si marca opción 2 en variable {RuleCode} debe marcar 0 en la variable 46."    },
    {"CH0006", $"{Column}| Error en variable {RuleCode}. si registra 97 no debe ser leucemia linfoide o mieloide aguda ni linfoma linfoblástico. variable 17."  },
    {"CH0007", $"{Column}| Error en variable {RuleCode}. si registra 99 debe ser leucemia linfoide aguda ó linfoma linfoblástico. variable 17."}
};

            if (!messages.ContainsKey(Code)) return "";

            return messages[Code];
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="Parameters0247">Variable de parámetro de función vacía</param>
        public static dynamic USR_Main0247(ENT_parameters0247 Parameters0247)
        {
            try
            {
                //Constantes
                const string lineSeparator = "\r\n";
                string columnSeparator = "\t";
                const int ColumnLength = 212;
                const string folder = "Resolucion0247ResultEstructura";

                //Validacion de parametros
                if (Parameters0247 == null) throw new ArgumentException($"La entidad no puede ser vacía");
                if (Parameters0247.LibraryId == 0) throw new ArgumentException($"El Id de la Libreria no puede estar vacío");
                if (Parameters0247.CompanyId == 0) throw new ArgumentException($"El Id de la Compañia no puede estar vacío");
                if (string.IsNullOrWhiteSpace(Parameters0247.CaseNumber)) throw new ArgumentException($"El numero de Caso no puede estar vacío");
                if (string.IsNullOrWhiteSpace(Parameters0247.UserCode)) throw new ArgumentException($"El Codigo del usuario no puede estar vacío");
                if (string.IsNullOrWhiteSpace(Parameters0247.FileId)) throw new ArgumentException($"El Id del Archivo no puede estar vacío");

                var listErrors = new List<string>();
                var resultValidation = USR_ValidateRule0247(Parameters0247, lineSeparator, columnSeparator, ColumnLength, typeof(ENT_StructureRes0247), listErrors);

                if (listErrors.Count > 0)
                {
                    List<string> ListKey = new List<string>();
                    List<string> ListValues = new List<string>();
                    int conteo = 1;
                    columnSeparator = "|";
                    foreach (var error in listErrors)
                    {
                        string data = error.Replace("AAAA|MM|DD", "AAAA-MM-DD");
                        string[] lines = data.Split(Convert.ToChar(columnSeparator));
                        if (lines.Length == 1)
                        {
                            ListKey.Add(string.Concat($"Error {conteo}"));
                            ListValues.Add(string.Concat(lines[0].Trim(), $" verifique el archivo"));
                            conteo++;
                        }
                        else if (lines.Length > 1 && lines.Length <= 3)
                        {
                            ListKey.Add(lines[0]);
                            ListValues.Add(string.Concat(lines[1].Trim(), columnSeparator, lines[2].Trim()));
                        }
                        else if (lines.Length == 4)
                        {
                            ListKey.Add(lines[0]);
                            ListValues.Add(string.Concat(lines[1].Trim(), columnSeparator, lines[2].Trim(), columnSeparator, lines[3].Trim()));
                        }
                        else
                        {
                            ListKey.Add(lines[0]);
                            ListValues.Add(string.Concat(lines[1].Trim(), columnSeparator, lines[2].Trim(), columnSeparator, lines[3].Trim(), columnSeparator, lines[4].Trim()));
                        }
                    }

                    string pathFile = string.Empty;
                    pathFile = USR_GenericSaveLog4505(new Dictionary<List<string>, List<string>>() { [ListKey] = ListValues }, folder);

                    var attach = USR_WSAttachFileToProcess(pathFile, Parameters0247.UserCode, Parameters0247.CompanyId.ToString(), Parameters0247.CaseNumber, "0247");
                    if (attach.IsError)
                    {
                        attach.ErrorMessage = "No se pudo asociar el archivo al proceso, ya que el archivo TXT no fue encontrado con los datos suministrados, favor verificar si se cargo en la plantilla de manera correcta.";
                        return attach;
                    }
                    return new ENT_ActionResult() { FileName = attach.FileName, IsError = true, ErrorMessage = "Hubo errores en la validación " };
                }
                return new ENT_ActionResult() { IsSuccessful = true, Result = resultValidation.Result, FileName = resultValidation.FileName };

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idPersons">idPersons</param>
        public static ENT_ActionResult USR_GetPersonByTypePopulation(long adapterId, dynamic idPersons)
        {
            StringBuilder sbPersonByNumber = new StringBuilder();
            sbPersonByNumber.Append(" DECLARE @XmlDocumentHandle int; ");
            sbPersonByNumber.Append(" DECLARE @XmlDocument xml; ");
            sbPersonByNumber.Append(" SET @XmlDocument = '<root><ids> ");
            foreach (var idPerson in idPersons[0])
                sbPersonByNumber.Append($"<id>{idPerson}</id>");
            sbPersonByNumber.Append(" </ids></root> ';");
            sbPersonByNumber.Append("  EXEC sp_xml_preparedocument @XmlDocumentHandle OUTPUT, @XmlDocument; ");
            sbPersonByNumber.Append(" SELECT  DISTINCT IdPerson,IdTypePopulation,IdDocumentType,DocumentNumber  FROM affiliate A  WITH (NOLOCK)  INNER JOIN Person B ON A.IdPerson = B.Id WHERE A.IdPerson IN ( ");
            sbPersonByNumber.Append(" SELECT id FROM OPENXML (@XmlDocumentHandle, '/root/ids/id',1) WITH (id  varchar(40) '.')); ");
            sbPersonByNumber.Append(" EXEC sp_xml_removedocument @XmlDocumentHandle; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sbPersonByNumber.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene persona por tipo y numero de identificación
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idDocumentType">idDocumentType</param>
        /// <param name="documentNumber">documentNumber</param>
        public static ENT_ActionResult USR_GetPersonByTypeAndDocumentNumber(long adapterId, string idDocumentType, string documentNumber)
        {
            var sql = new StringBuilder();
            sql.Append(" SELECT IdDocumentType, DocumentNumber ");
            sql.Append(" FROM Person WITH (NOLOCK)");
            sql.Append($" WHERE IdDocumentType = {idDocumentType} AND DocumentNumber = '{documentNumber}'");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene persona por tipo de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="documentsNumbers">documentsNumbers</param>
        public static ENT_ActionResult USR_GetPersonByDocumentNumber(long adapterId, dynamic documentsNumbers)
        {
            StringBuilder sbPersonByNumber = new StringBuilder();
            sbPersonByNumber.Append(" DECLARE @XmlDocumentHandle int; ");
            sbPersonByNumber.Append(" DECLARE @XmlDocument xml; ");
            sbPersonByNumber.Append(" SET @XmlDocument = '<root><ids> ");
            foreach (var documentNumber in documentsNumbers)
                sbPersonByNumber.Append($"<id>{documentNumber.Identification}</id>");
            sbPersonByNumber.Append(" </ids></root> ';");
            sbPersonByNumber.Append("  EXEC sp_xml_preparedocument @XmlDocumentHandle OUTPUT, @XmlDocument; ");
            sbPersonByNumber.Append(" SELECT  DISTINCT Id,IdDocumentType, DocumentNumber FROM Person WITH (NOLOCK) WHERE DocumentNumber IN( ");
            sbPersonByNumber.Append(" SELECT id FROM OPENXML (@XmlDocumentHandle, '/root/ids/id',1) WITH (id  varchar(15) '.')); ");
            sbPersonByNumber.Append(" EXEC sp_xml_removedocument @XmlDocumentHandle; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sbPersonByNumber.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };

        }
        /// <sumary>
        /// Obtiene detalles de novedad
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="personsNoExist">personsNoExist</param>
        public static ENT_ActionResult USR_GetNoveltyDetail(long adapterId, dynamic personsNoExist)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" DECLARE @x xml; ");
            sql.Append(" SET @x = '<root><ids> ");
            foreach (var documentNumber in personsNoExist)
                sql.Append($"<id>{documentNumber.Identification}</id>");
            sql.Append(" </ids></root> ';");
            sql.Append("  SELECT IdNovelty, OldValue, NewValue  FROM NoveltyDetail WITH (NOLOCK) WHERE OldValue IN(select T.X.value('(text())[1]', 'varchar(15)') as id from @X.nodes('/root/ids/id') as T(X)) AND FieldName='Número de Documento'; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene novedades por tipo de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idNovelty">idNovelty</param>
        public static ENT_ActionResult USR_GetNoveltiesTypeDocumentByPerson(long adapterId, string idNovelty)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append($"select * from NoveltyDetail where FieldName = 'ID Tipo Documento' and IdNovelty in (select Id from Novelty where IdAffiliate = (select IdAffiliate from Novelty where Id = '{idNovelty}'))");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene las novedades por afiliado
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="personList">personList</param>
        public static ENT_ActionResult USR_GetNoveltiesAffiliate(long adapterId, dynamic personList)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" DECLARE @x xml; ");
            sql.Append(" SET @x = '<root><ids> ");
            foreach (var documentNumber in personList)
                sql.Append($"<id>{documentNumber.Identification}</id>");
            sql.Append(" </ids></root> ';");

            sql.Append("select NoveltyDetail.IdNovelty, Person.IdDocumentType, Person.DocumentNumber, NoveltyDetail.FieldName, NoveltyDetail.OldValue, NoveltyDetail.NewValue, Novelty.FiscalEffectDate ");
            sql.Append("from NoveltyDetail inner join Novelty on Novelty.Id = NoveltyDetail.IdNovelty inner join Affiliate on Novelty.IdAffiliate = Affiliate.Id inner join Person on Person.Id = Affiliate.IdPerson ");
            sql.Append($"where FieldName = 'ID Tipo Documento' and IdNovelty in (select Id from Novelty where IdAffiliate in (select Id from Affiliate where IdPerson in (select Id from Person where DocumentNumber in (select T.X.value('(text())[1]', 'varchar(15)') as id from @X.nodes('/root/ids/id') as T(X)))))");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene tipos de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        public static ENT_ActionResult USR_GetDocumentTypes(long adapterId)
        {
            var sql = new StringBuilder();
            sql.Append(" SELECT Id, Code ");
            sql.Append(" FROM TypeDetail WITH (NOLOCK)");
            sql.Append(" WHERE IdTypeHead = 1");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="dictionaryResult">dictionaryResult</param>
        /// <param name="folder">folder</param>
        public static string USR_GenericSaveLog4505(dynamic dictionaryResult, string folder)
        {
            try
            {
                string pathName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), folder);

                if (!Directory.Exists(pathName))
                    Directory.CreateDirectory(pathName);

                pathName = Path.Combine(pathName, $"{folder}{DateTime.Now.ToString("yyyyMMddHHmmss")}.csv");

                using (FileStream fs = new FileStream(pathName, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("Fila;Mensaje");
                    foreach (var file in dictionaryResult)
                    {
                        for (int i = 0; i < file.Value.Count; i++)
                        {
                            sw.WriteLine($"{file.Key[i]};{file.Value[i]}");
                        }
                        sw.Flush();
                    }
                }

                return pathName;
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Guarda log de un archivo 
        /// </sumary> 
        /// <param name="dictionaryResult">Dictionary con entidades a escribir en el log</param>
        /// <param name="folder">carpeta donde se va a guardar el archivo</param>
        public static string USR_GenericSaveLog(dynamic dictionaryResult, string folder)
        {
            try
            {

                string pathName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), folder);

                if (!Directory.Exists(pathName))
                    Directory.CreateDirectory(pathName);

                pathName = Path.Combine(pathName, $"{folder}{DateTime.Now.ToString("yyyyMMddHHmmss")}.csv");

                using (FileStream fs = new FileStream(pathName, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("ARCHIVO;MENSAJE");
                    foreach (var file in dictionaryResult)
                    {
                        for (int i = 0; i < file.Value.Count; i++)
                        {
                            sw.WriteLine($"{file.Key};{file.Value[i]}");
                        }
                        sw.Flush();
                    }
                }

                return pathName;
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="remoteFile">Ruta destino de archivo a subir</param>
        /// <param name="localFile">FileStream de archivo a subir</param>
        public static string USR_FtpUpload(string remoteFile, dynamic localFile)
        {
            try
            {
                string ftp = "davincilb.ophelia.co";
                string userName = "OpheliaDcom";
                string password = "iCNw7vyq6O";

                string host = ("ftp://" + ftp);

                if (string.IsNullOrEmpty(ftp) || string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password))
                {
                    throw new ArgumentNullException("ftp,userName,password");
                }
                int bufferSize = 2048;
                /* Create an FTP Request */
                FtpWebRequest ftpRequest = (FtpWebRequest)FtpWebRequest.Create(host + "/" + remoteFile);
                /* Log in to the FTP Server with the User Name and Password Provided */
                ftpRequest.Credentials = new NetworkCredential(userName, password);
                /* When in doubt, use these options */
                ftpRequest.UseBinary = true;
                ftpRequest.UsePassive = true;
                ftpRequest.KeepAlive = true;
                /* Specify the Type of FTP Request */
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile;
                /* Establish Return Communication with the FTP Server */
                Stream ftpStream = ftpRequest.GetRequestStream();
                /* Buffer for the Downloaded Data */
                localFile.Position = 0;
                byte[] byteBuffer = new byte[bufferSize];
                int bytesSent = localFile.Read(byteBuffer, 0, bufferSize);
                /* Upload the File by Sending the Buffered Data Until the Transfer is Complete */
                while (bytesSent != 0)
                {
                    ftpStream.Write(byteBuffer, 0, bytesSent);
                    bytesSent = localFile.Read(byteBuffer, 0, bufferSize);
                }

                /* Resource Cleanup */
                localFile.Close();
                ftpStream.Close();
                using (FtpWebResponse response = (FtpWebResponse)ftpRequest.GetResponse())
                {
                    ftpRequest = null;
                    return response.StatusDescription;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="documentType">documentType</param>
        /// <param name="documentNumber">documentNumber</param>
        /// <param name="CIE10">CIE10</param>
        /// <param name="noveltyType">noveltyType</param>
        /// <param name="_dictionaryPersonTemp">_dictionaryPersonTemp</param>
        public static dynamic USR_FillDictionaryPerson(string documentType, string documentNumber, string CIE10, string noveltyType, dynamic _dictionaryPersonTemp)
        {
            /*Si el afiliado ya esxiste en el diccionario se agregan detalles*/
            if (_dictionaryPersonTemp.ContainsKey($"{documentType}_{documentNumber}"))
                _dictionaryPersonTemp[$"{documentType}_{documentNumber}"].Add($"{CIE10}_{noveltyType}");
            else
                /*Si el afiliado no existe en el diccionario se agrega*/
                _dictionaryPersonTemp.Add($"{documentType}_{documentNumber}", new List<dynamic> { $"{CIE10}_{noveltyType}" });

            return _dictionaryPersonTemp;
        }
        /// <sumary>
        /// AÑO ARCHIVO PLANO
        /// </sumary> 

        public static string USR_CACUTOFFDA()
        {
            var PE_CAYEAR = DateTime.Now.Year;

            return $" {PE_CAYEAR.ToString()}-01-01";

        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web
        /// </sumary> 
        /// <param name="method">Método del servicio</param>
        /// <param name="url">Url del servicio web</param>
        /// <param name="parameters">Parámetros del método a consumir</param>
        /// <param name="headers">Cabecera del servicio</param>
        /// <param name="fileFullPath">fileFullPath</param>
        /// <param name="minTimeout">Minutos de timeout</param>
        public static ENT_ActionResult SYS_WSRequest(string method, string url, object parameters, dynamic headers, string fileFullPath, double? minTimeout)
        {
            try
            {
                if (string.IsNullOrEmpty(method) || string.IsNullOrEmpty(url))
                {
                    throw new ArgumentNullException("method or url");
                }

                HttpMethod httpMethod = new HttpMethod(method);
                double min = minTimeout != null && minTimeout > 0 ? (double)minTimeout : 3;
                using (HttpClient Client = new HttpClient { Timeout = TimeSpan.FromMinutes(min) })
                {
                    using (var request = new HttpRequestMessage(httpMethod, url))
                    {
                        if (parameters != null)
                        {
                            request.Content = new StringContent(JsonConvert.SerializeObject(parameters), Encoding.UTF8, "application/json");
                        }

                        if (headers != null)
                        {
                            foreach (KeyValuePair<String, String> header in headers)
                            {
                                request.Headers.Add(header.Key, header.Value);
                            }
                        }

                        using (HttpResponseMessage response = Client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).Result)
                        {
                            using (HttpContent content = response.Content)
                            {
                                string result = content.ReadAsStringAsync().Result;

                                if (response.StatusCode == HttpStatusCode.OK)
                                {
                                    var resultWs = JsonConvert.DeserializeObject<dynamic>(result);
                                    if ((bool)resultWs.IsError)
                                    {
                                        return new ENT_ActionResult() { IsError = true, ErrorMessage = resultWs.ErrorMessage };
                                    }
                                    return new ENT_ActionResult() { IsSuccessful = resultWs.IsSucessfull, Result = resultWs.Result };

                                }

                                else
                                    return new ENT_ActionResult() { IsError = true, ErrorMessage = result };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.InnerException.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web POST
        /// </sumary> 
        /// <param name="url">Url del Servicio Web</param>
        /// <param name="parameters">Parámetros del servicio</param>
        /// <param name="headers">Cabecera del servicio</param>
        /// <param name="fileFullPath">fileFullPath</param>
        public static ENT_ActionResult SYS_WSPOST(string url, object parameters, dynamic headers, string fileFullPath)
        {
            ENT_ActionResult result = new ENT_ActionResult();
            result = SYS_WSRequest("POST", url, parameters, headers, fileFullPath, null);
            return result;
        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web GET
        /// </sumary> 
        /// <param name="url">Url del servicio Web</param>
        /// <param name="headers">Cabecera del servicio</param>
        public static ENT_ActionResult SYS_WSGET(string url, dynamic headers)
        {
            ENT_ActionResult result = new ENT_ActionResult();
            result = SYS_WSRequest("GET", url, null, headers, null, null);
            return result;
        }
        /// <sumary>
        /// Ejecuta una consulta Sql con el adaptador
        /// </sumary> 
        /// <param name="adapterId">Id del adaptador</param>
        /// <param name="queryBD">Consulta Sql</param>
        public static ENT_ActionResult SYS_WSExecuteQuery(long adapterId, string queryBD)
        {
            try
            {
                if (string.IsNullOrEmpty(queryBD))
                {
                    throw new ArgumentNullException("queryBD");
                }

                var plainTextBytes = Encoding.UTF8.GetBytes(queryBD);
                var query = Convert.ToBase64String(plainTextBytes);

                ENT_ActionResult result = new ENT_ActionResult();
                string url = "http://10.1.0.159:8080/api/api/Adapter/ExecuteQuery";
                dynamic jsonObject = new JObject();
                jsonObject.adapterId = adapterId;
                jsonObject.queryBD = query;
                result = SYS_WSPOST(url, jsonObject, null, null);
                return result;
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Prototipo de verificación
        /// </sumary> 
        /// <param name="rules">Reglas a evaluar</param>
        public static object SYS_VerificationPrototype(object rules)
        {
            IEnumerable<Func<object>> funcs = ((IEnumerable<Func<object>>)rules);

            string messages = string.Empty;
            bool result = true;
            foreach (Func<object> rul in funcs)
            {
                var r = rul();
                if (!r.GetPropertyValue<bool>("IsValid"))
                {
                    result = false;
                    messages += "* " + r.GetPropertyValue<string>("Message") + "\n\r";
                }
            }

            return new { Result = result, Messages = messages };
        }
        /// <sumary>
        /// Convierte los registros de una archivo a una lista de entidades
        /// </sumary> 
        /// <param name="textFile">Ruta del archivo</param>
        /// <param name="lineSeparator">Separador de lineas en el archivo</param>
        /// <param name="columnSeparator">Separador de columnas en el archivo</param>
        /// <param name="type">Tipo de entidad</param>
        public static dynamic SYS_FileToEntities(string textFile, string lineSeparator, string columnSeparator, object type)
        {
            if (string.IsNullOrEmpty(lineSeparator) || string.IsNullOrEmpty(columnSeparator))
            {
                throw new ArgumentNullException("lineSeparator,columnSeparator");
            }

            if (type == null)
                return new List<dynamic>();

            Type typeEntity = (Type)type;
            Type genericListType = typeof(List<>).MakeGenericType(typeEntity);
            IList lstEntities = (IList)Activator.CreateInstance(genericListType);
            try
            {

                string[] lines = textFile.Split(new string[] { lineSeparator }, StringSplitOptions.RemoveEmptyEntries);
                var properties = typeEntity.GetProperties().OrderBy(p => ((OrderAttribute)p.GetCustomAttributes(typeof(OrderAttribute), false)[0]).Order);
                string[] columns;
                object instance;
                int index = 0;
                foreach (string line in lines)
                {
                    instance = Activator.CreateInstance(typeEntity);

                    columns = line.Split(columnSeparator[0]);

                    index = 0;
                    foreach (var property in properties)
                    {
                        property.SetValue(instance, columns[index]);
                        index++;
                    }
                    lstEntities.Add(instance);

                }

                return lstEntities;
            }
            catch
            {
                throw;
            }
        }

        #region Extention
        /// <sumary>
        /// Obtiene el valor de una propieda de un objecto específico
        /// </sumary>
        public static TResult GetPropertyValue<TResult>(this object obj, string propertyName)
        {
            propertyName = propertyName?.Trim() ?? string.Empty;
            if (obj != null && propertyName != string.Empty)
            {
                var propInfo = obj.GetType().GetProperty(propertyName);
                if (propInfo != null)
                    if (propInfo.PropertyType.IsAssignableFrom(typeof(TResult)))
                        return ((TResult)propInfo.GetValue(obj));
            }

            return default(TResult);
        }
        /// <sumary>
        /// Obtiene el valor de una propieda de un objecto específico
        /// </sumary>
        public static object GetPropertyValue(this object obj, string propertyName)
        {
            propertyName = propertyName?.Trim() ?? string.Empty;
            if (obj != null && propertyName != string.Empty)
            {
                var propInfo = obj.GetType().GetProperty(propertyName);
                if (propInfo != null)
                    return propInfo.GetValue(obj);
            }

            return null;
        }
        #endregion
    }

    /// <summary>
    /// Encapsula el resultado de la petición
    /// </summary>
    /// <typeparam name="T">Tipo del resultado</typeparam>
    public sealed class RuntimeResult<T>
    {
        #region Properties
        /// <summary>
        /// Resultado válido
        /// </summary>
        public bool IsValid { get; private set; }
        /// <summary>
        /// Mensaje de resultado
        /// </summary>
        public string Message { get; private set; }
        /// <summary>
        /// Nombre de archivo
        /// </summary>
        public string FileName { get; private set; }
        /// <summary>
        /// Obtiene el objeto resultado de la petición
        /// </summary>
        public T Result { get; private set; }
        #endregion

        #region Builders
        /// <summary>
        /// Inicializa una nueva instancia de la clase
        /// </summary>
        /// <param name="isSuccessful">Valor que indica si el resultado de la petición fue satisfactorio</param>
        /// <param name="isError">Valor que indica si ocurrió algún error en la ejecución</param>
        /// <param name="errorMessage">Mensaje del error ocurrido</param>
        /// <param name="isValid">Define si el resultado de ejecución es válido</param>
        /// <param name="message">Enumeración de mensajes de validación que no permitieron que el resultado fuera satisfactorio</param>
        /// <param name="result">Objeto resultado de la petición</param>
        /// <param name="fileName">Archivo resultado</param>
        internal RuntimeResult(bool isValid, string message, T result, string fileName = null)
        {
            IsValid = isValid;
            Message = message;
            FileName = fileName;
            Result = result;
        }
        #endregion

        #region Factories
        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado válido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetValid(T result, string message) => new RuntimeResult<T>(true, message, result);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// /// <param name="message">Mensaje resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetValid(Func<T> expression, string message) => SetValid(expression(), message);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <param name="fileName">Archivo resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetInvalid(T result, string message, string fileName = null) => new RuntimeResult<T>(false, message, result, fileName);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <param name="fileName">Archivo resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetInvalid(Func<T> expression, string message, string fileName = null) => SetInvalid(expression(), message, fileName);

        /// <summary>
        /// Crea un resultado de petición con error
        /// </summary>
        /// <param name="errorMessage">Mensaje del error ocurrido</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetError(string errorMessage) => new RuntimeResult<T>(false, errorMessage, default(T));
        #endregion
    }

    #region Entities
    /// <sumary>
    /// Entidad 0247
    /// </sumary>
    public class ENT_StructureRes0247 : EntityBase
    {
        #region Properties
        /// <sumary>
        /// FirstName
        /// </sumary>
        private string _FirstName;
        [Order]
        [Regex(@"^([A-Z ]){1,20}$", "Columna 1-Variable 1-Primer nombre-Solo permite letras mayusculas con longitud de 1 A 20 caracteres.No permite caracteres especiales ni espacios")] public string FirstName { get { return _FirstName; } set { _FirstName = ValidateValue<string>(value, nameof(FirstName)); } }
        /// <sumary>
        /// SecondName
        /// </sumary>
        private string _SecondName;
        [Order]
        [Regex(@"^[A-Z ]{1,30}$", "Columna 2-Variable 2-Segundo nombre-Solo permite letras mayusculas con longitud de 1 A 30 caracteres.No permite caracteres especiales")] public string SecondName { get { return _SecondName; } set { _SecondName = ValidateValue<string>(value, nameof(SecondName)); } }
        /// <sumary>
        /// FirstLastName
        /// </sumary>
        private string _FirstLastName;
        [Order]
        [Regex(@"^([A-Z ]{1,20})$", "Columna 3-Variable 3-Primer apellido-Solo permite letras mayusculas con longitud de 1 A 20 caracteres.No permite caracteres especiales ni espacios")] public string FirstLastName { get { return _FirstLastName; } set { _FirstLastName = ValidateValue<string>(value, nameof(FirstLastName)); } }
        /// <sumary>
        /// SecondLastName
        /// </sumary>
        private string _SecondLastName;
        [Order]
        [Regex(@"^([A-Z]{1,30})$", "Columna 4-Variable 4-Segundo apellido-Solo permite letras mayusculas con longitud de 1 A 30 caracteres.No permite caracteres especiales ni espacios")] public string SecondLastName { get { return _SecondLastName; } set { _SecondLastName = ValidateValue<string>(value, nameof(SecondLastName)); } }
        /// <sumary>
        /// IdentificationType
        /// </sumary>
        private string _IdentificationType;
        [Order]
        [Regex(@"^(TI|CC|CE|PA|RC|UN|RNV|MS|AS)$", "Columna 5-Variable 5-Tipo de identificacion del usuario-Solo permite  longitud de 2 caracteres (TI,CC,CE,PA,RC,UN,NV,MS,AS)")] public string IdentificationType { get { return _IdentificationType; } set { _IdentificationType = ValidateValue<string>(value, nameof(IdentificationType)); } }
        /// <sumary>
        /// DocumentNumber
        /// </sumary>
        private string _DocumentNumber;
        [Order]
        [Regex(@"^[A-Za-z0-9_-]{1,20}$", "Columna 6-Variable 6-Numero de identificación del usuario-Solo permite longitud de 1 a 20 carácteres")] public string DocumentNumber { get { return _DocumentNumber; } set { _DocumentNumber = ValidateValue<string>(value, nameof(DocumentNumber)); } }
        /// <sumary>
        /// BirthDate
        /// </sumary>
        private string _BirthDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 7-Variable 7-Fecha de nacimiento-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string BirthDate { get { return _BirthDate; } set { _BirthDate = ValidateValue<string>(value, nameof(BirthDate)); } }
        /// <sumary>
        /// IdSex
        /// </sumary>
        private string _IdSex;
        [Order]
        [Regex(@"^(M|F)$", "Columna 8-Variable 8-Sexo-Solo acepta mayuscula con longitud max 1 caracter (M ó F) Masculino ó Femenino")] public string IdSex { get { return _IdSex; } set { _IdSex = ValidateValue<string>(value, nameof(IdSex)); } }
        /// <sumary>
        /// OccupationCode
        /// </sumary>
        private string _OccupationCode;
        [Order]
        [Regex(@"^[0-9]{4}$", "Columna 9-Variable 9-Ocupacion-Solo acepta como minimo un numero de 4 caracteres")] public string OccupationCode { get { return _OccupationCode; } set { _OccupationCode = ValidateValue<string>(value, nameof(OccupationCode)); } }
        /// <sumary>
        /// RegimeType
        /// </sumary>
        private string _RegimeType;
        [Order]
        [Regex(@"^(C|S|P|E|N)$", "Columna 10-Variable 10-Tipo de régimen-Solo acepta mayúscula con longitud max 1 carácter (C,S,P,E o N)")] public string RegimeType { get { return _RegimeType; } set { _RegimeType = ValidateValue<string>(value, nameof(RegimeType)); } }
        /// <sumary>
        /// CodeEPS
        /// </sumary>
        private string _CodeEPS;
        [Order]
        [Regex(@"^.{5,6}$", "Columna 11-Variable 11-Codigo de la EAPB-Solo acepta numeros, longitud max 6 caracteres")] public string CodeEPS { get { return _CodeEPS; } set { _CodeEPS = ValidateValue<string>(value, nameof(CodeEPS)); } }
        /// <sumary>
        /// CodeEthnic
        /// </sumary>
        private string _CodeEthnic;
        [Order]
        [Regex(@"^[0-6]{1,2}$", "Columna 12-Variable 12-Grupo étnico-Solo acepta números con longitud max 2 caracteres caracteres")] public string CodeEthnic { get { return _CodeEthnic; } set { _CodeEthnic = ValidateValue<string>(value, nameof(CodeEthnic)); } }
        /// <sumary>
        /// PopulationGroup
        /// </sumary>
        private string _PopulationGroup;
        [Order]
        [Regex(@"^[0-9]{1,3}$", "Columna 13-Variable 13-Grupo poblacional-Solo acepta números con longitud max 3 caracteres")] public string PopulationGroup { get { return _PopulationGroup; } set { _PopulationGroup = ValidateValue<string>(value, nameof(PopulationGroup)); } }
        /// <sumary>
        /// MunicipalityResidence
        /// </sumary>
        private string _MunicipalityResidence;
        [Order]
        [Regex(@"^[0-9]{5}$", "Columna 14-Variable 14-Municipio de residencia-Solo acepta números, longitud max 5 ")] public string MunicipalityResidence { get { return _MunicipalityResidence; } set { _MunicipalityResidence = ValidateValue<string>(value, nameof(MunicipalityResidence)); } }
        /// <sumary>
        /// Phones
        /// </sumary>
        private string _Phones;
        [Order]
        [Regex(@"^[(\d+\,?)+]{0,21}$", "Columna 15-Variable 15-Numero telefonico del paciente-Solo acepta numeros y la coma como separador, longitud max 21 caracteres")] public string Phones { get { return _Phones; } set { _Phones = ValidateValue<string>(value, nameof(Phones)); } }
        /// <sumary>
        /// AffiliationDate
        /// </sumary>
        private string _AffiliationDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 16-Variable 16-Fecha de afiliacion a la EAPB-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string AffiliationDate { get { return _AffiliationDate; } set { _AffiliationDate = ValidateValue<string>(value, nameof(AffiliationDate)); } }
        /// <sumary>
        /// NameNeoplasia
        /// </sumary>
        private string _NameNeoplasia;
        [Order]
        [Regex(@"^([0-9A-Z]{4})$", "Columna 17-Variable 17-Codigo CIE10 de la neoplasia (cancer o tumor) maligna reportada (Primario)-Solo acepta un valor de 4  caracteres")] public string NameNeoplasia { get { return _NameNeoplasia; } set { _NameNeoplasia = ValidateValue<string>(value, nameof(NameNeoplasia)); } }
        /// <sumary>
        /// DiagnosisDate
        /// </sumary>
        private string _DiagnosisDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 18-Variable 18-Fecha de Diagnostico del Cancer reportado-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DiagnosisDate { get { return _DiagnosisDate; } set { _DiagnosisDate = ValidateValue<string>(value, nameof(DiagnosisDate)); } }
        /// <sumary>
        /// DateRemission
        /// </sumary>
        private string _DateRemission;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 19-Variable 19-Fecha de la nota de remision o interconsulta del medico o institucion general hacia la institucion o medico que hizo el diagnostico-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateRemission { get { return _DateRemission; } set { _DateRemission = ValidateValue<string>(value, nameof(DateRemission)); } }
        /// <sumary>
        /// EntryDate
        /// </sumary>
        private string _EntryDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 20-Variable 20-Fecha de ingreso a la institucion que realizo el diagnostico luego de la remision o interconsulta-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string EntryDate { get { return _EntryDate; } set { _EntryDate = ValidateValue<string>(value, nameof(EntryDate)); } }
        /// <sumary>
        /// TypeTest
        /// </sumary>
        private string _TypeTest;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|55|99)$", "Columna 21-Variable 21-Tipo de estudio con el que se realizó el diagnóstico de cáncer-Solo acepta números, longitud max 2 caracteres")] public string TypeTest { get { return _TypeTest; } set { _TypeTest = ValidateValue<string>(value, nameof(TypeTest)); } }
        /// <sumary>
        /// DiagnosticHistopathology
        /// </sumary>
        private string _DiagnosticHistopathology;
        [Order]
        [Regex(@"^(1|2|3|4|5|55|98|99)$", "Columna 22-Variable 22- Motivo por el cual el usuario no tuvo diagnóstico por histopatología-Solo acepta números, longitud max 2 caracteres")] public string DiagnosticHistopathology { get { return _DiagnosticHistopathology; } set { _DiagnosticHistopathology = ValidateValue<string>(value, nameof(DiagnosticHistopathology)); } }
        /// <sumary>
        /// DateHistopathological
        /// </sumary>
        private string _DateHistopathological;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 23-Variable 23-Fecha de recoleccion de muestra para estudio histopatologico de diagnostico-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateHistopathological { get { return _DateHistopathological; } set { _DateHistopathological = ValidateValue<string>(value, nameof(DateHistopathological)); } }
        /// <sumary>
        /// DateResulHistopathological
        /// </sumary>
        private string _DateResulHistopathological;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 24-Variable 24-Fecha de primero o unico informe histopatologico valido de diagnostico-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateResulHistopathological { get { return _DateResulHistopathological; } set { _DateResulHistopathological = ValidateValue<string>(value, nameof(DateResulHistopathological)); } }
        /// <sumary>
        /// HabilitationCodeDiagnostic
        /// </sumary>
        private string _HabilitationCodeDiagnostic;
        [Order]
        [Regex(@"^[0-9]{1,12}$", "Columna 25-Variable 25-Código válido de habilitación de la IPS donde se realiza la confirmación diagnóstica-Solo acepta números, longitud max 12 caracteres")] public string HabilitationCodeDiagnostic { get { return _HabilitationCodeDiagnostic; } set { _HabilitationCodeDiagnostic = ValidateValue<string>(value, nameof(HabilitationCodeDiagnostic)); } }
        /// <sumary>
        /// DateFirstConsultation
        /// </sumary>
        private string _DateFirstConsultation;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 26-Variable 26-Fecha de primera consulta con medico tratante de la enfermedad maligna-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateFirstConsultation { get { return _DateFirstConsultation; } set { _DateFirstConsultation = ValidateValue<string>(value, nameof(DateFirstConsultation)); } }
        /// <sumary>
        /// HistologyTumor
        /// </sumary>
        private string _HistologyTumor;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|99|55|98)$", "Columna 27-Variable 27-Histología del tumor en muestra de biopsia o quirúrgica-Solo acepta números, longitud max 2 caracteres")] public string HistologyTumor { get { return _HistologyTumor; } set { _HistologyTumor = ValidateValue<string>(value, nameof(HistologyTumor)); } }
        /// <sumary>
        /// DegreeTumorDifferentiation
        /// </sumary>
        private string _DegreeTumorDifferentiation;
        [Order]
        [Regex(@"^(1|2|3|4|94|95|99|55|98)$", "Columna 28-Variable 28-Grado de diferenciación del tumor sólido maligno según la biopsia o informe de primera cirugía-Solo acepta números, longitud max 2 caracteres")] public string DegreeTumorDifferentiation { get { return _DegreeTumorDifferentiation; } set { _DegreeTumorDifferentiation = ValidateValue<string>(value, nameof(DegreeTumorDifferentiation)); } }
        /// <sumary>
        /// SolidTumorStaging
        /// </sumary>
        private string _SolidTumorStaging;
        [Order]
        [Regex(@"^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|55|93|99|98)$", "Columna 29-Variable 29-Histología del tumor en muestra de biopsia o quirúrgica-Solo acepta números con longitud max 2 caracteres")] public string SolidTumorStaging { get { return _SolidTumorStaging; } set { _SolidTumorStaging = ValidateValue<string>(value, nameof(SolidTumorStaging)); } }
        /// <sumary>
        /// DateStaging
        /// </sumary>
        private string _DateStaging;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 30-Variable 30-Fecha en que se realizo esta estadificacion-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateStaging { get { return _DateStaging; } set { _DateStaging = ValidateValue<string>(value, nameof(DateStaging)); } }
        /// <sumary>
        /// TestBreastCancer
        /// </sumary>
        private string _TestBreastCancer;
        [Order]
        [Regex(@"^(1|2|97|98|99|55)$", "Columna 31-Variable 31-Para cáncer de mama, ¿se le realizó a este usuario la prueba HER2 (llamado también receptor 2 del factor de crecimiento epidérmico humano, también llamado erbB2) antes del inicio del tratamiento?-Solo acepta números, longitud max 2 caracteres")] public string TestBreastCancer { get { return _TestBreastCancer; } set { _TestBreastCancer = ValidateValue<string>(value, nameof(TestBreastCancer)); } }
        /// <sumary>
        /// DateTestBreastCancer
        /// </sumary>
        private string _DateTestBreastCancer;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 32-Variable 32-Fecha de primero o unico informe histopatologico valido de diagnostico-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateTestBreastCancer { get { return _DateTestBreastCancer; } set { _DateTestBreastCancer = ValidateValue<string>(value, nameof(DateTestBreastCancer)); } }
        /// <sumary>
        /// ResultTestBreastCancer
        /// </sumary>
        private string _ResultTestBreastCancer;
        [Order]
        [Regex(@"^(1|2|3|4|55|97|98|99)$", "Columna 33-Variable 33-Para cáncer de mama, resultado de la primera o única prueba HER2-Solo acepta números, longitud max 2 caracteres")] public string ResultTestBreastCancer { get { return _ResultTestBreastCancer; } set { _ResultTestBreastCancer = ValidateValue<string>(value, nameof(ResultTestBreastCancer)); } }
        /// <sumary>
        /// TestColorectalCancer
        /// </sumary>
        private string _TestColorectalCancer;
        [Order]
        [Regex(@"^(1|2|3|4|99|55|98)$", "Columna 34-Variable 34-Para cáncer colorrectal, estadificación de Dukes-Solo acepta números, longitud max 2 caracteres")] public string TestColorectalCancer { get { return _TestColorectalCancer; } set { _TestColorectalCancer = ValidateValue<string>(value, nameof(TestColorectalCancer)); } }
        /// <sumary>
        /// DateTestColorectalCancer
        /// </sumary>
        private string _DateTestColorectalCancer;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 35-Variable 35-Fecha en que se realizo la estadificacion de Dukeso -Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateTestColorectalCancer { get { return _DateTestColorectalCancer; } set { _DateTestColorectalCancer = ValidateValue<string>(value, nameof(DateTestColorectalCancer)); } }
        /// <sumary>
        /// ClinicalStagingLymphoma
        /// </sumary>
        private string _ClinicalStagingLymphoma;
        [Order]
        [Regex(@"^(1|2|3|4|99|55|98|93)$", "Columna 36-Variable 36-Estadificación clínica en linfoma no Hodgkin Pediátrico (Murphy), linfoma No Hodgkin Adulto y linfoma Hodgkin adulto/pediátrico (Ann Arbor o Lugano)-Solo acepta números, longitud max 2 caracteres")] public string ClinicalStagingLymphoma { get { return _ClinicalStagingLymphoma; } set { _ClinicalStagingLymphoma = ValidateValue<string>(value, nameof(ClinicalStagingLymphoma)); } }
        /// <sumary>
        /// StagingProstateCancer
        /// </sumary>
        private string _StagingProstateCancer;
        [Order]
        [Regex(@"^(2|3|4|5|6|7|8|9|10|99|55|98)$", "Columna 37-Variable 37-Para cáncer de próstata, valor de clasificación de la escala Gleason en el momento del diagnóstico-Solo acepta números, longitud max 2 caracteres")] public string StagingProstateCancer { get { return _StagingProstateCancer; } set { _StagingProstateCancer = ValidateValue<string>(value, nameof(StagingProstateCancer)); } }
        /// <sumary>
        /// RiskLymphomasPediatricSolids
        /// </sumary>
        private string _RiskLymphomasPediatricSolids;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|11|12|13|97|99|55|98|93)$", "Columna 38-Variable 38-Clasificación de riesgo leucemias o linfomas, y sólidos pediátricos-Solo acepta números, longitud max 2 caracteres")] public string RiskLymphomasPediatricSolids { get { return _RiskLymphomasPediatricSolids; } set { _RiskLymphomasPediatricSolids = ValidateValue<string>(value, nameof(RiskLymphomasPediatricSolids)); } }
        /// <sumary>
        /// DateRiskLymphomasPediatricSolids
        /// </sumary>
        private string _DateRiskLymphomasPediatricSolids;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 39-Variable 39-Fecha de clasificacion de riesgo-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateRiskLymphomasPediatricSolids { get { return _DateRiskLymphomasPediatricSolids; } set { _DateRiskLymphomasPediatricSolids = ValidateValue<string>(value, nameof(DateRiskLymphomasPediatricSolids)); } }
        /// <sumary>
        /// ObjectiveMedicalTreatment
        /// </sumary>
        private string _ObjectiveMedicalTreatment;
        [Order]
        [Regex(@"^(1|2|55|99)$", "Columna 40-Variable 40-Objetivo (o intención) del tratamiento médico inicial (al diagnóstico)-Solo acepta números, longitud max 2 caracteres")] public string ObjectiveMedicalTreatment { get { return _ObjectiveMedicalTreatment; } set { _ObjectiveMedicalTreatment = ValidateValue<string>(value, nameof(ObjectiveMedicalTreatment)); } }
        /// <sumary>
        /// ObjectiveMedicalIntervention
        /// </sumary>
        private string _ObjectiveMedicalIntervention;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|55|99)$", "Columna 41-Variable 41-intervención médica durante el periodo de reporte-Solo acepta números, longitud max 2 caracteres")] public string ObjectiveMedicalIntervention { get { return _ObjectiveMedicalIntervention; } set { _ObjectiveMedicalIntervention = ValidateValue<string>(value, nameof(ObjectiveMedicalIntervention)); } }
        /// <sumary>
        /// HistorialCancer
        /// </sumary>
        private string _HistorialCancer;
        [Order]
        [Regex(@"^(1|2|55|99)$", "Columna 42-Variable 42-Tiene antecedente o padece de otro cáncer primario-Solo acepta números, longitud max 2 caracteres")] public string HistorialCancer { get { return _HistorialCancer; } set { _HistorialCancer = ValidateValue<string>(value, nameof(HistorialCancer)); } }
        /// <sumary>
        /// DateHistorialCancer
        /// </sumary>
        private string _DateHistorialCancer;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 43-Variable 43-Fecha de diagnostico del otro cancer primario-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateHistorialCancer { get { return _DateHistorialCancer; } set { _DateHistorialCancer = ValidateValue<string>(value, nameof(DateHistorialCancer)); } }
        /// <sumary>
        /// NameHistorialCancer
        /// </sumary>
        private string _NameHistorialCancer;
        [Order]
        [Regex(@"^([0-9A-Z]{4})$|^(55|99)$", "Columna 44-Variable 44-Tipo CIE10 de ese cáncer antecedente o concurrente-Solo acepta valor CIE10 o (55,99) de longitud max 4 caracteres")] public string NameHistorialCancer { get { return _NameHistorialCancer; } set { _NameHistorialCancer = ValidateValue<string>(value, nameof(NameHistorialCancer)); } }
        /// <sumary>
        /// Chemotherapy
        /// </sumary>
        private string _Chemotherapy;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 45-Variable 45-¿Recibió el usuario terapia sistémica (incluye quimioterapia, hormonoterapia, inmunoterapia o anticuerpos monoclonales, terapia biológica) dentro del periodo de reporte actual?-Solo acepta números, longitud max 2 caracteres")] public string Chemotherapy { get { return _Chemotherapy; } set { _Chemotherapy = ValidateValue<string>(value, nameof(Chemotherapy)); } }
        /// <sumary>
        /// CountPhaseChemotherapy
        /// </sumary>
        private string _CountPhaseChemotherapy;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98|0)$", "Columna 46-Variable 46-¿Cuantas fases de quimioterapia recibio el usuario en este periodo de reporte? -Solo acepta numeros, longitud max 2 caracteres")] public string CountPhaseChemotherapy { get { return _CountPhaseChemotherapy; } set { _CountPhaseChemotherapy = ValidateValue<string>(value, nameof(CountPhaseChemotherapy)); } }
        /// <sumary>
        /// PrephaseChemotherapy
        /// </sumary>
        private string _PrephaseChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 47-Variable 46.1-El usuario recibió en este periodo la fase de quimioterapia denominada Prefase o Citorreducción inicial-Solo acepta números, longitud max 2 caracteres")] public string PrephaseChemotherapy { get { return _PrephaseChemotherapy; } set { _PrephaseChemotherapy = ValidateValue<string>(value, nameof(PrephaseChemotherapy)); } }
        /// <sumary>
        /// InductionChemotherapy
        /// </sumary>
        private string _InductionChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 48-Variable 46.2-El usuario recibió en este periodo la fase de quimioterapia denominada Inducción -Solo acepta números, longitud max 2 caracteres")] public string InductionChemotherapy { get { return _InductionChemotherapy; } set { _InductionChemotherapy = ValidateValue<string>(value, nameof(InductionChemotherapy)); } }
        /// <sumary>
        /// IntensificationChemotherapy
        /// </sumary>
        private string _IntensificationChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 49-Variable 46.3-El usuario recibió en este periodo la fase de quimioterapia denominada Intensificación-Solo acepta números, longitud max 2 caracteres")] public string IntensificationChemotherapy { get { return _IntensificationChemotherapy; } set { _IntensificationChemotherapy = ValidateValue<string>(value, nameof(IntensificationChemotherapy)); } }
        /// <sumary>
        /// ConsolidationChemotherapy
        /// </sumary>
        private string _ConsolidationChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 50-Variable 46.4-El usuario recibio en este corte la fase de quimioterapia denominada Mantenimiento-Solo acepta numeros, longitud max 2 caracteres")] public string ConsolidationChemotherapy { get { return _ConsolidationChemotherapy; } set { _ConsolidationChemotherapy = ValidateValue<string>(value, nameof(ConsolidationChemotherapy)); } }
        /// <sumary>
        /// ReinductionChemotherapy
        /// </sumary>
        private string _ReinductionChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 51-Variable 46.5-Usuario recibio quimioterapia Reinduccion-Solo acepta numeros, longitud max 2 caracteres")] public string ReinductionChemotherapy { get { return _ReinductionChemotherapy; } set { _ReinductionChemotherapy = ValidateValue<string>(value, nameof(ReinductionChemotherapy)); } }
        /// <sumary>
        /// MaintenanceChemotherapy
        /// </sumary>
        private string _MaintenanceChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 52-Variable 46.6-Usuario recibio quimioterapia Mantenimiento-Solo acepta numeros, longitud max 2 caracteres")] public string MaintenanceChemotherapy { get { return _MaintenanceChemotherapy; } set { _MaintenanceChemotherapy = ValidateValue<string>(value, nameof(MaintenanceChemotherapy)); } }
        /// <sumary>
        /// FinalMaintenanceChemotherapy
        /// </sumary>
        private string _FinalMaintenanceChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 53-Variable 46.7-Usuario recibio quimioterapia Mantenimiento largo o final-Solo acepta numeros, longitud max 2 caracteres")] public string FinalMaintenanceChemotherapy { get { return _FinalMaintenanceChemotherapy; } set { _FinalMaintenanceChemotherapy = ValidateValue<string>(value, nameof(FinalMaintenanceChemotherapy)); } }
        /// <sumary>
        /// OtherChemotherapy
        /// </sumary>
        private string _OtherChemotherapy;
        [Order]
        [Regex(@"^(1|2|55|97|99)$", "Columna 54-Variable 46.8-Usuario recibio otra quimioterapia diferente-Solo acepta numeros, longitud max 2 caracteres")] public string OtherChemotherapy { get { return _OtherChemotherapy; } set { _OtherChemotherapy = ValidateValue<string>(value, nameof(OtherChemotherapy)); } }
        /// <sumary>
        /// InitiatedCycles
        /// </sumary>
        private string _InitiatedCycles;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 55-Variable 47-Numero de ciclos iniciados-Solo acepta numeros, longitud max 2 caracteres")] public string InitiatedCycles { get { return _InitiatedCycles; } set { _InitiatedCycles = ValidateValue<string>(value, nameof(InitiatedCycles)); } }
        /// <sumary>
        /// UbicationFirstCycle
        /// </sumary>
        private string _UbicationFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|55|98)$", "Columna 56-Variable 48-Ubicacion temporal-Solo acepta numeros, longitud max 2 caracteres")] public string UbicationFirstCycle { get { return _UbicationFirstCycle; } set { _UbicationFirstCycle = ValidateValue<string>(value, nameof(UbicationFirstCycle)); } }
        /// <sumary>
        /// DateFirstCycle
        /// </sumary>
        private string _DateFirstCycle;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 57-Variable 49-Fecha primer esquema de quimioterapia-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateFirstCycle { get { return _DateFirstCycle; } set { _DateFirstCycle = ValidateValue<string>(value, nameof(DateFirstCycle)); } }
        /// <sumary>
        /// IPSFirstCycle
        /// </sumary>
        private string _IPSFirstCycle;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 58-Variable 50-Numero IPS-Solo acepta numeros decimales, longitud max 2 caracteres")] public string IPSFirstCycle { get { return _IPSFirstCycle; } set { _IPSFirstCycle = ValidateValue<string>(value, nameof(IPSFirstCycle)); } }
        /// <sumary>
        /// CodeIPSOneFirstCycle
        /// </sumary>
        private string _CodeIPSOneFirstCycle;
        [Order]
        [Regex(@"^[0-9]{12}$|^(55|98)$", "Columna 59-Variable 51-Codigo de IPS1-Solo acepta numeros, longitud max 12 caracteres")] public string CodeIPSOneFirstCycle { get { return _CodeIPSOneFirstCycle; } set { _CodeIPSOneFirstCycle = ValidateValue<string>(value, nameof(CodeIPSOneFirstCycle)); } }
        /// <sumary>
        /// CodeIPSTwoFirstCycle
        /// </sumary>
        private string _CodeIPSTwoFirstCycle;
        [Order]
        [Regex(@"^[0-9]{12}$|^(55|98)$", "Columna 60-Variable 52-Codigo de IPS2-Solo acepta numeros, longitud max 12 caracteres")] public string CodeIPSTwoFirstCycle { get { return _CodeIPSTwoFirstCycle; } set { _CodeIPSTwoFirstCycle = ValidateValue<string>(value, nameof(CodeIPSTwoFirstCycle)); } }
        /// <sumary>
        /// AntineoplasticDrugsFirstCycle
        /// </sumary>
        private string _AntineoplasticDrugsFirstCycle;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(99|98)$", "Columna 61-Variable 53-Medicamentos Antineoplasticos-Solo acepta numeros, longitud max 2 caracteres")] public string AntineoplasticDrugsFirstCycle { get { return _AntineoplasticDrugsFirstCycle; } set { _AntineoplasticDrugsFirstCycle = ValidateValue<string>(value, nameof(AntineoplasticDrugsFirstCycle)); } }
        /// <sumary>
        /// BleomycinFirstCycle
        /// </sumary>
        private string _BleomycinFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 62-Variable 53.1-Primer esquema usuario recibio Bleomicina-Solo acepta numeros, longitud max 2 caracteres")] public string BleomycinFirstCycle { get { return _BleomycinFirstCycle; } set { _BleomycinFirstCycle = ValidateValue<string>(value, nameof(BleomycinFirstCycle)); } }
        /// <sumary>
        /// BusulfanFirstCycle
        /// </sumary>
        private string _BusulfanFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 63-Variable 53.2-Primer esquema el usuario recibio Busulfano-Solo acepta numeros, longitud max 2 caracteres")] public string BusulfanFirstCycle { get { return _BusulfanFirstCycle; } set { _BusulfanFirstCycle = ValidateValue<string>(value, nameof(BusulfanFirstCycle)); } }
        /// <sumary>
        /// CapecitabineFirstCycle
        /// </sumary>
        private string _CapecitabineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 64-Variable 53.3-Primer esquema el usuario recibio Capecitabina-Solo acepta numeros, longitud max 2 caracteres")] public string CapecitabineFirstCycle { get { return _CapecitabineFirstCycle; } set { _CapecitabineFirstCycle = ValidateValue<string>(value, nameof(CapecitabineFirstCycle)); } }
        /// <sumary>
        /// CarboplatinFirstCycle
        /// </sumary>
        private string _CarboplatinFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 65-Variable 53.4-Primer esquema el usuario recibio Carboplatino-Solo acepta numeros, longitud max 2 caracteres")] public string CarboplatinFirstCycle { get { return _CarboplatinFirstCycle; } set { _CarboplatinFirstCycle = ValidateValue<string>(value, nameof(CarboplatinFirstCycle)); } }
        /// <sumary>
        /// CyclophosphamideFirstCycle
        /// </sumary>
        private string _CyclophosphamideFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 66-Variable 53.5-En este primer o unico esquema el usuario recibio Ciclofosfamida-Solo acepta numeros, longitud max 2 caracteres")] public string CyclophosphamideFirstCycle { get { return _CyclophosphamideFirstCycle; } set { _CyclophosphamideFirstCycle = ValidateValue<string>(value, nameof(CyclophosphamideFirstCycle)); } }
        /// <sumary>
        /// CiclosporinFirstCycle
        /// </sumary>
        private string _CiclosporinFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 67-Variable 53.6-Primer esquema el usuario recibio Ciclosporina-Solo acepta numeros, longitud max 2 caracteres")] public string CiclosporinFirstCycle { get { return _CiclosporinFirstCycle; } set { _CiclosporinFirstCycle = ValidateValue<string>(value, nameof(CiclosporinFirstCycle)); } }
        /// <sumary>
        /// CisplatinFirstCycle
        /// </sumary>
        private string _CisplatinFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 68-Variable 53.7-Primer esquema el usuario recibio Cisplatino-Solo acepta numeros, longitud max 2 caracteres")] public string CisplatinFirstCycle { get { return _CisplatinFirstCycle; } set { _CisplatinFirstCycle = ValidateValue<string>(value, nameof(CisplatinFirstCycle)); } }
        /// <sumary>
        /// CytarabineFirstCycle
        /// </sumary>
        private string _CytarabineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 69-Variable 53.8-Primer esquema el usuario recibio Citarabina-Solo acepta numeros, longitud max 2 caracteres")] public string CytarabineFirstCycle { get { return _CytarabineFirstCycle; } set { _CytarabineFirstCycle = ValidateValue<string>(value, nameof(CytarabineFirstCycle)); } }
        /// <sumary>
        /// ChlorambucilFirstCycle
        /// </sumary>
        private string _ChlorambucilFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 70-Variable 53.9-Primer esquema el usuario recibio Clorambucilo-Solo acepta numeros, longitud max 2 caracteres")] public string ChlorambucilFirstCycle { get { return _ChlorambucilFirstCycle; } set { _ChlorambucilFirstCycle = ValidateValue<string>(value, nameof(ChlorambucilFirstCycle)); } }
        /// <sumary>
        /// DacarbazineFirstCycle
        /// </sumary>
        private string _DacarbazineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 71-Variable 53.10-Primer esquema el usuario recibio Dacarbazina-Solo acepta numeros, longitud max 2 caracteres")] public string DacarbazineFirstCycle { get { return _DacarbazineFirstCycle; } set { _DacarbazineFirstCycle = ValidateValue<string>(value, nameof(DacarbazineFirstCycle)); } }
        /// <sumary>
        /// DoxorubicinFirstCycle
        /// </sumary>
        private string _DoxorubicinFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 72-Variable 53.11-Primer esquema el usuario recibio Doxorubicina-Solo acepta numeros, longitud max 2 caracteres")] public string DoxorubicinFirstCycle { get { return _DoxorubicinFirstCycle; } set { _DoxorubicinFirstCycle = ValidateValue<string>(value, nameof(DoxorubicinFirstCycle)); } }
        /// <sumary>
        /// EtoposideFirstCycle
        /// </sumary>
        private string _EtoposideFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 73-Variable 53.12-Primer esquema el usuario recibio Etoposido-Solo acepta numeros, longitud max 2 caracteres")] public string EtoposideFirstCycle { get { return _EtoposideFirstCycle; } set { _EtoposideFirstCycle = ValidateValue<string>(value, nameof(EtoposideFirstCycle)); } }
        /// <sumary>
        /// FluorouracilFirstCycle
        /// </sumary>
        private string _FluorouracilFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 74-Variable 53.13-Primer esquema el usuario recibio Fluorouracilo-Solo acepta numeros, longitud max 2 caracteres")] public string FluorouracilFirstCycle { get { return _FluorouracilFirstCycle; } set { _FluorouracilFirstCycle = ValidateValue<string>(value, nameof(FluorouracilFirstCycle)); } }
        /// <sumary>
        /// GemcitabineFirstCycle
        /// </sumary>
        private string _GemcitabineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 75-Variable 53.14-Primer esquema el usuario recibio Gemcitabina-Solo acepta numeros, longitud max 2 caracteres")] public string GemcitabineFirstCycle { get { return _GemcitabineFirstCycle; } set { _GemcitabineFirstCycle = ValidateValue<string>(value, nameof(GemcitabineFirstCycle)); } }
        /// <sumary>
        /// ImatinibFirstCycle
        /// </sumary>
        private string _ImatinibFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 76-Variable 53.15-Primer esquema el usuario recibio Imatinib-Solo acepta numeros, longitud max 2 caracteres")] public string ImatinibFirstCycle { get { return _ImatinibFirstCycle; } set { _ImatinibFirstCycle = ValidateValue<string>(value, nameof(ImatinibFirstCycle)); } }
        /// <sumary>
        /// InterferonAlfaNaturalFirstCycle
        /// </sumary>
        private string _InterferonAlfaNaturalFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 77-Variable 53.16-Primer esquema el usuario recibio Interferon Alfa-Solo acepta numeros, longitud max 2 caracteres")] public string InterferonAlfaNaturalFirstCycle { get { return _InterferonAlfaNaturalFirstCycle; } set { _InterferonAlfaNaturalFirstCycle = ValidateValue<string>(value, nameof(InterferonAlfaNaturalFirstCycle)); } }
        /// <sumary>
        /// MelfalanFirstCycle
        /// </sumary>
        private string _MelfalanFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 78-Variable 53.17-Primer esquema el usuario recibio Melfalan-Solo acepta numeros, longitud max 2 caracteres")] public string MelfalanFirstCycle { get { return _MelfalanFirstCycle; } set { _MelfalanFirstCycle = ValidateValue<string>(value, nameof(MelfalanFirstCycle)); } }
        /// <sumary>
        /// MercaptopurineFirstCycle
        /// </sumary>
        private string _MercaptopurineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 79-Variable 53.18-Primer esquema el usuario recibio Mercaptopurina-Solo acepta numeros, longitud max 2 caracteres")] public string MercaptopurineFirstCycle { get { return _MercaptopurineFirstCycle; } set { _MercaptopurineFirstCycle = ValidateValue<string>(value, nameof(MercaptopurineFirstCycle)); } }
        /// <sumary>
        /// MethotrexateFirstCycle
        /// </sumary>
        private string _MethotrexateFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 80-Variable 53.19-Primer esquema el usuario recibio Metotrexato-Solo acepta numeros, longitud max 2 caracteres")] public string MethotrexateFirstCycle { get { return _MethotrexateFirstCycle; } set { _MethotrexateFirstCycle = ValidateValue<string>(value, nameof(MethotrexateFirstCycle)); } }
        /// <sumary>
        /// PaclitaxelFirstCycle
        /// </sumary>
        private string _PaclitaxelFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 81-Variable 53.20-Primer esquema el usuario recibio Paclitaxel-Solo acepta numeros, longitud max 2 caracteres")] public string PaclitaxelFirstCycle { get { return _PaclitaxelFirstCycle; } set { _PaclitaxelFirstCycle = ValidateValue<string>(value, nameof(PaclitaxelFirstCycle)); } }
        /// <sumary>
        /// PegfilgrastimFirstCycle
        /// </sumary>
        private string _PegfilgrastimFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 82-Variable 53.21-Primer esquema el usuario recibio Pegfilgrastim-Solo acepta numeros, longitud max 2 caracteres")] public string PegfilgrastimFirstCycle { get { return _PegfilgrastimFirstCycle; } set { _PegfilgrastimFirstCycle = ValidateValue<string>(value, nameof(PegfilgrastimFirstCycle)); } }
        /// <sumary>
        /// ProcarbazineFirstCycle
        /// </sumary>
        private string _ProcarbazineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 83-Variable 53.22-Primer esquema el usuario recibio Procarbazina-Solo acepta numeros, longitud max 2 caracteres")] public string ProcarbazineFirstCycle { get { return _ProcarbazineFirstCycle; } set { _ProcarbazineFirstCycle = ValidateValue<string>(value, nameof(ProcarbazineFirstCycle)); } }
        /// <sumary>
        /// RituximabFirstCycle
        /// </sumary>
        private string _RituximabFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 84-Variable 53.23-Primer esquema el usuario recibio Rituximab-Solo acepta numeros, longitud max 2 caracteres")] public string RituximabFirstCycle { get { return _RituximabFirstCycle; } set { _RituximabFirstCycle = ValidateValue<string>(value, nameof(RituximabFirstCycle)); } }
        /// <sumary>
        /// TamoxifenFirstCycle
        /// </sumary>
        private string _TamoxifenFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 85-Variable 53.24-Primer esquema el usuario recibio Tamoxifeno-Solo acepta numeros, longitud max 2 caracteres")] public string TamoxifenFirstCycle { get { return _TamoxifenFirstCycle; } set { _TamoxifenFirstCycle = ValidateValue<string>(value, nameof(TamoxifenFirstCycle)); } }
        /// <sumary>
        /// ThioguanineFirstCycle
        /// </sumary>
        private string _ThioguanineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 86-Variable 53.25-Primer esquema el usuario recibio Tioguanina-Solo acepta numeros, longitud max 2 caracteres")] public string ThioguanineFirstCycle { get { return _ThioguanineFirstCycle; } set { _ThioguanineFirstCycle = ValidateValue<string>(value, nameof(ThioguanineFirstCycle)); } }
        /// <sumary>
        /// TrastuzumabFirstCycle
        /// </sumary>
        private string _TrastuzumabFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 87-Variable 53.26-Primer esquema el usuario recibio Trastuzumab-Solo acepta numeros,longitud max 2 caracteres")] public string TrastuzumabFirstCycle { get { return _TrastuzumabFirstCycle; } set { _TrastuzumabFirstCycle = ValidateValue<string>(value, nameof(TrastuzumabFirstCycle)); } }
        /// <sumary>
        /// VinblastineFirstCycle
        /// </sumary>
        private string _VinblastineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 88-Variable 53.27-Primer esquema el usuario recibio Vinblastina-Solo acepta numeros, longitud max 2 caracteres")] public string VinblastineFirstCycle { get { return _VinblastineFirstCycle; } set { _VinblastineFirstCycle = ValidateValue<string>(value, nameof(VinblastineFirstCycle)); } }
        /// <sumary>
        /// VincristineFirstCycle
        /// </sumary>
        private string _VincristineFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 89-Variable 53.28-Primer esquema el usuario recibio Vincristina-Solo acepta numeros, longitud max 2 caracteres")] public string VincristineFirstCycle { get { return _VincristineFirstCycle; } set { _VincristineFirstCycle = ValidateValue<string>(value, nameof(VincristineFirstCycle)); } }
        /// <sumary>
        /// PrednisoneFirstCycle
        /// </sumary>
        private string _PrednisoneFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 90-Variable 53.29-Primer esquema el usuario recibio Prednisona-Solo acepta numeros, longitud max 2 caracteres")] public string PrednisoneFirstCycle { get { return _PrednisoneFirstCycle; } set { _PrednisoneFirstCycle = ValidateValue<string>(value, nameof(PrednisoneFirstCycle)); } }
        /// <sumary>
        /// PrednisoloneFirstCycle
        /// </sumary>
        private string _PrednisoloneFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 91-Variable 53.30-Primer esquema el usuario recibio Prednisolona-Solo acepta numeros, longitud max 2 caracteres")] public string PrednisoloneFirstCycle { get { return _PrednisoloneFirstCycle; } set { _PrednisoloneFirstCycle = ValidateValue<string>(value, nameof(PrednisoloneFirstCycle)); } }
        /// <sumary>
        /// MethylprednisoloneFirstCycle
        /// </sumary>
        private string _MethylprednisoloneFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 92-Variable 53.31-Primer esquema el usuario recibio Metilprednisolona-Solo acepta numeros, longitud max 2 caracteres")] public string MethylprednisoloneFirstCycle { get { return _MethylprednisoloneFirstCycle; } set { _MethylprednisoloneFirstCycle = ValidateValue<string>(value, nameof(MethylprednisoloneFirstCycle)); } }
        /// <sumary>
        /// DexamethasoneFirstCycle
        /// </sumary>
        private string _DexamethasoneFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 93-Variable 53.32-Primer esquema el usuario recibio Dexametasona-Solo acepta numeros, longitud max 2 caracteres")] public string DexamethasoneFirstCycle { get { return _DexamethasoneFirstCycle; } set { _DexamethasoneFirstCycle = ValidateValue<string>(value, nameof(DexamethasoneFirstCycle)); } }
        /// <sumary>
        /// DrugPOSOneFirstCycle
        /// </sumary>
        private string _DrugPOSOneFirstCycle;
        [Order]
        [Regex(@"^[0-9]{1,20}$", "Columna 94-Variable 54-Medicamento Antineoplasico o terapia hormonal para el cancer no enunciado en las variables 53.1 a 53.32, longitud max 20 caracteres")] public string DrugPOSOneFirstCycle { get { return _DrugPOSOneFirstCycle; } set { _DrugPOSOneFirstCycle = ValidateValue<string>(value, nameof(DrugPOSOneFirstCycle)); } }
        /// <sumary>
        /// DrugPOSTwoFirstCycle
        /// </sumary>
        private string _DrugPOSTwoFirstCycle;
        [Order]
        [Regex(@"^[0-9]{1,20}$", "Columna 95-Variable 55-Medicamento Antineoplasico o terapia hormonal para el cancer-Solo acepta numeros, longitud max 20 caracteres")] public string DrugPOSTwoFirstCycle { get { return _DrugPOSTwoFirstCycle; } set { _DrugPOSTwoFirstCycle = ValidateValue<string>(value, nameof(DrugPOSTwoFirstCycle)); } }
        /// <sumary>
        /// DrugPOSThreeFirstCycle
        /// </sumary>
        private string _DrugPOSThreeFirstCycle;
        [Order]
        [Regex(@"^[0-9]{1,20}$", "Columna 96-Variable 56-Medicamento Antineoplasico o terapia hormonal para el cancer, pero no enunciado en las variables 53.1 a 53.32 3 administrado al usuario-Solo acepta numeros, longitud max 20 caracteres")] public string DrugPOSThreeFirstCycle { get { return _DrugPOSThreeFirstCycle; } set { _DrugPOSThreeFirstCycle = ValidateValue<string>(value, nameof(DrugPOSThreeFirstCycle)); } }
        /// <sumary>
        /// IntrathecalChemotherapyFirstCycle
        /// </sumary>
        private string _IntrathecalChemotherapyFirstCycle;
        [Order]
        [Regex(@"^(1|2|98)$", "Columna 97-Variable 57-Recibio quimioterapia intratecal en el primer o unico esquema de este periodo de reporte?-Solo acepta numeros, longitud max 2 caracteres")] public string IntrathecalChemotherapyFirstCycle { get { return _IntrathecalChemotherapyFirstCycle; } set { _IntrathecalChemotherapyFirstCycle = ValidateValue<string>(value, nameof(IntrathecalChemotherapyFirstCycle)); } }
        /// <sumary>
        /// EndDateFirstCycle
        /// </sumary>
        private string _EndDateFirstCycle;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 98-Variable 58-Fecha de finalizacion del primer o unico esquema de este periodo de reporte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string EndDateFirstCycle { get { return _EndDateFirstCycle; } set { _EndDateFirstCycle = ValidateValue<string>(value, nameof(EndDateFirstCycle)); } }
        /// <sumary>
        /// CurrentFeaturesFirstCycle
        /// </sumary>
        private string _CurrentFeaturesFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 99-Variable 59-Caracteristicas actuales del primer o unico esquema de este periodo de reporte-Solo acepta numeros, longitud max 2 caracteres")] public string CurrentFeaturesFirstCycle { get { return _CurrentFeaturesFirstCycle; } set { _CurrentFeaturesFirstCycle = ValidateValue<string>(value, nameof(CurrentFeaturesFirstCycle)); } }
        /// <sumary>
        /// ReasonEndingFirstCycle
        /// </sumary>
        private string _ReasonEndingFirstCycle;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|55|98)$", "Columna 100-Variable 60-Motivo de la finalizacion (prematura) de este primer o unico esquema-Solo acepta numeros, longitud max 2 caracteres")] public string ReasonEndingFirstCycle { get { return _ReasonEndingFirstCycle; } set { _ReasonEndingFirstCycle = ValidateValue<string>(value, nameof(ReasonEndingFirstCycle)); } }
        /// <sumary>
        /// UTLastCycle
        /// </sumary>
        private string _UTLastCycle;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|55|97|98)$", "Columna 101-Variable 61-Motivo de la finalizacion (prematura) de este primer o unico esquema-Solo acepta numeros, longitud max 2 caracteres")] public string UTLastCycle { get { return _UTLastCycle; } set { _UTLastCycle = ValidateValue<string>(value, nameof(UTLastCycle)); } }
        /// <sumary>
        /// InitalDateLastCycle
        /// </sumary>
        private string _InitalDateLastCycle;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 102-Variable 62-Fecha de inicio del ultimo esquema de quimioterapia o terapia sistemica de este periodo de reporte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string InitalDateLastCycle { get { return _InitalDateLastCycle; } set { _InitalDateLastCycle = ValidateValue<string>(value, nameof(InitalDateLastCycle)); } }
        /// <sumary>
        /// IPSLastCycle
        /// </sumary>
        private string _IPSLastCycle;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 103-Variable 63-Numero de IPS que suministran el ultimo esquema de este periodo de reporte-Solo acepta numeros, longitud max 2 caracteres")] public string IPSLastCycle { get { return _IPSLastCycle; } set { _IPSLastCycle = ValidateValue<string>(value, nameof(IPSLastCycle)); } }
        /// <sumary>
        /// CodeIPSOneLastCycle
        /// </sumary>
        private string _CodeIPSOneLastCycle;
        [Order]
        [Regex(@"^[0-9]{12}$|^(55|98)$", "Columna 104-Variable 64-Codigo de la IPS1 que suministra el ultimo esquema en este periodo de reporte-Solo acepta numeros, longitud max 12 caracteres")] public string CodeIPSOneLastCycle { get { return _CodeIPSOneLastCycle; } set { _CodeIPSOneLastCycle = ValidateValue<string>(value, nameof(CodeIPSOneLastCycle)); } }
        /// <sumary>
        /// CodeIPSTwoLastCycle
        /// </sumary>
        private string _CodeIPSTwoLastCycle;
        [Order]
        [Regex(@"^[0-9]{12}$|^(55|98)$", "Columna 105-Variable 65-Codigo de la IPS2 que suministra el ultimo esquema en este periodo de reporte-Solo acepta numeros, longitud max 12 caracteres")] public string CodeIPSTwoLastCycle { get { return _CodeIPSTwoLastCycle; } set { _CodeIPSTwoLastCycle = ValidateValue<string>(value, nameof(CodeIPSTwoLastCycle)); } }
        /// <sumary>
        /// AntineoplasticDrugsLastCycle
        /// </sumary>
        private string _AntineoplasticDrugsLastCycle;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(99|98)$", "Columna 106-Variable 66-Cuantos medicamentos antineoplasicos o terapia hormonal para el cancer, el (los) especialista(s) tratante(s) del cancer propusieron como manejo en este ultimo esquema de este periodo de reporte -Solo acepta numeros, longitud max 2 caracteres")] public string AntineoplasticDrugsLastCycle { get { return _AntineoplasticDrugsLastCycle; } set { _AntineoplasticDrugsLastCycle = ValidateValue<string>(value, nameof(AntineoplasticDrugsLastCycle)); } }
        /// <sumary>
        /// BleomycinLastCycle
        /// </sumary>
        private string _BleomycinLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 107-Variable 66.1-En este ultimo esquema el usuario recibio Bleomicina-Solo acepta numeros, longitud max 2 caracteres")] public string BleomycinLastCycle { get { return _BleomycinLastCycle; } set { _BleomycinLastCycle = ValidateValue<string>(value, nameof(BleomycinLastCycle)); } }
        /// <sumary>
        /// BusulfanLastCycle
        /// </sumary>
        private string _BusulfanLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 108-Variable 66.2-En este ultimo esquema el usuario recibio Busulfano-Solo acepta numeros, longitud max 2 caracteres")] public string BusulfanLastCycle { get { return _BusulfanLastCycle; } set { _BusulfanLastCycle = ValidateValue<string>(value, nameof(BusulfanLastCycle)); } }
        /// <sumary>
        /// CapecitabineLastCycle
        /// </sumary>
        private string _CapecitabineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 109-Variable 66.3-En este ultimo ciclo el usuario recibio Capecitabina -Solo acepta numeros, longitud max 2 caracteres")] public string CapecitabineLastCycle { get { return _CapecitabineLastCycle; } set { _CapecitabineLastCycle = ValidateValue<string>(value, nameof(CapecitabineLastCycle)); } }
        /// <sumary>
        /// CarboplatinLastCycle
        /// </sumary>
        private string _CarboplatinLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 110-Variable 66.4-En este ultimo esquema el usuario recibio Carboplatino-Solo acepta numeros, longitud max 2 caracteres")] public string CarboplatinLastCycle { get { return _CarboplatinLastCycle; } set { _CarboplatinLastCycle = ValidateValue<string>(value, nameof(CarboplatinLastCycle)); } }
        /// <sumary>
        /// CyclophosphamideLastCycle
        /// </sumary>
        private string _CyclophosphamideLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 111-Variable 66.5-En este ultimo esquema el usuario recibio Ciclofosfamida-Solo acepta numeros, longitud max 2 caracteres")] public string CyclophosphamideLastCycle { get { return _CyclophosphamideLastCycle; } set { _CyclophosphamideLastCycle = ValidateValue<string>(value, nameof(CyclophosphamideLastCycle)); } }
        /// <sumary>
        /// CiclosporinLastCycle
        /// </sumary>
        private string _CiclosporinLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 112-Variable 66.6-En este ultimo esquema el usuario recibio Ciclosporina-Solo acepta numeros, longitud max 2 caracteres")] public string CiclosporinLastCycle { get { return _CiclosporinLastCycle; } set { _CiclosporinLastCycle = ValidateValue<string>(value, nameof(CiclosporinLastCycle)); } }
        /// <sumary>
        /// CisplatinLastCycle
        /// </sumary>
        private string _CisplatinLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 113-Variable 66.7-En este ultimo esquema el usuario recibio Cisplatino-Solo acepta numeros, longitud max 2 caracteres")] public string CisplatinLastCycle { get { return _CisplatinLastCycle; } set { _CisplatinLastCycle = ValidateValue<string>(value, nameof(CisplatinLastCycle)); } }
        /// <sumary>
        /// CytarabineLastCycle
        /// </sumary>
        private string _CytarabineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 114-Variable 66.8-En este ultimo esquema el usuario recibio Citarabina-Solo acepta numeros, longitud max 2 caracteres")] public string CytarabineLastCycle { get { return _CytarabineLastCycle; } set { _CytarabineLastCycle = ValidateValue<string>(value, nameof(CytarabineLastCycle)); } }
        /// <sumary>
        /// ChlorambucilLastCycle
        /// </sumary>
        private string _ChlorambucilLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 115-Variable 66.9-En este ultimo esquema el usuario recibio Clorambucilo-Solo acepta numeros, longitud max 2 caracteres")] public string ChlorambucilLastCycle { get { return _ChlorambucilLastCycle; } set { _ChlorambucilLastCycle = ValidateValue<string>(value, nameof(ChlorambucilLastCycle)); } }
        /// <sumary>
        /// DacarbazineLastCycle
        /// </sumary>
        private string _DacarbazineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 116-Variable 66.10-En este ultimo esquema el usuario recibio Dacarbazina-Solo acepta numeros, longitud max 2 caracteres")] public string DacarbazineLastCycle { get { return _DacarbazineLastCycle; } set { _DacarbazineLastCycle = ValidateValue<string>(value, nameof(DacarbazineLastCycle)); } }
        /// <sumary>
        /// DoxorubicinLastCycle
        /// </sumary>
        private string _DoxorubicinLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 117-Variable 66.11-En este ultimo esquema el usuario recibio Doxorubicina-Solo acepta numeros, longitud max 2 caracteres")] public string DoxorubicinLastCycle { get { return _DoxorubicinLastCycle; } set { _DoxorubicinLastCycle = ValidateValue<string>(value, nameof(DoxorubicinLastCycle)); } }
        /// <sumary>
        /// EtoposideLastCycle
        /// </sumary>
        private string _EtoposideLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 118-Variable 66.12-En este ultimo esquema el usuario recibio Etoposido-Solo acepta numeros, longitud max 2 caracteres")] public string EtoposideLastCycle { get { return _EtoposideLastCycle; } set { _EtoposideLastCycle = ValidateValue<string>(value, nameof(EtoposideLastCycle)); } }
        /// <sumary>
        /// FluorouracilLastCycle
        /// </sumary>
        private string _FluorouracilLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 119-Variable 66.13-En este ultimo esquema el usuario recibio Fluorouracilo-Solo acepta numeros, longitud max 2 caracteres")] public string FluorouracilLastCycle { get { return _FluorouracilLastCycle; } set { _FluorouracilLastCycle = ValidateValue<string>(value, nameof(FluorouracilLastCycle)); } }
        /// <sumary>
        /// GemcitabineLastCycle
        /// </sumary>
        private string _GemcitabineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 120-Variable 66.14-En este ultimo esquema el usuario recibio Gemcitabina-Solo acepta numeros, longitud max 2 caracteres")] public string GemcitabineLastCycle { get { return _GemcitabineLastCycle; } set { _GemcitabineLastCycle = ValidateValue<string>(value, nameof(GemcitabineLastCycle)); } }
        /// <sumary>
        /// ImatinibLastCycle
        /// </sumary>
        private string _ImatinibLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 121-Variable 66.15-En este ultimo esquema el usuario recibio Imatinib-Solo acepta numeros, longitud max 2 caracteres")] public string ImatinibLastCycle { get { return _ImatinibLastCycle; } set { _ImatinibLastCycle = ValidateValue<string>(value, nameof(ImatinibLastCycle)); } }
        /// <sumary>
        /// InterferonAlfaNaturalLastCycle
        /// </sumary>
        private string _InterferonAlfaNaturalLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 122-Variable 66.16-En este ultimo esquema el usuario recibio Interferon Alfa-Solo acepta numeros, longitud max 2 caracteres")] public string InterferonAlfaNaturalLastCycle { get { return _InterferonAlfaNaturalLastCycle; } set { _InterferonAlfaNaturalLastCycle = ValidateValue<string>(value, nameof(InterferonAlfaNaturalLastCycle)); } }
        /// <sumary>
        /// MelfalanLastCycle
        /// </sumary>
        private string _MelfalanLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 123-Variable 66.17-En este ultimo esquema el usuario recibio Melfalan-Solo acepta numeros, longitud max 2 caracteres")] public string MelfalanLastCycle { get { return _MelfalanLastCycle; } set { _MelfalanLastCycle = ValidateValue<string>(value, nameof(MelfalanLastCycle)); } }
        /// <sumary>
        /// MercaptopurineLastCycle
        /// </sumary>
        private string _MercaptopurineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 124-Variable 66.18-En este ultimo esquema el usuario recibio Mercaptopurina-Solo acepta numeros, longitud max 2 caracteres")] public string MercaptopurineLastCycle { get { return _MercaptopurineLastCycle; } set { _MercaptopurineLastCycle = ValidateValue<string>(value, nameof(MercaptopurineLastCycle)); } }
        /// <sumary>
        /// MethotrexateLastCycle
        /// </sumary>
        private string _MethotrexateLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 125-Variable 66.19-En este ultimo esquema el usuario recibio Metotrexato-Solo acepta numeros, longitud max 2 caracteres")] public string MethotrexateLastCycle { get { return _MethotrexateLastCycle; } set { _MethotrexateLastCycle = ValidateValue<string>(value, nameof(MethotrexateLastCycle)); } }
        /// <sumary>
        /// PaclitaxelLastCycle
        /// </sumary>
        private string _PaclitaxelLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 126-Variable 66.20-En este ultimo esquema el usuario recibio Paclitaxel-Solo acepta numeros, longitud max 2 caracteres")] public string PaclitaxelLastCycle { get { return _PaclitaxelLastCycle; } set { _PaclitaxelLastCycle = ValidateValue<string>(value, nameof(PaclitaxelLastCycle)); } }
        /// <sumary>
        /// PegfilgrastimLastCycle
        /// </sumary>
        private string _PegfilgrastimLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 127-Variable 66.21-En este ultimo esquema el usuario recibio Pegfilgrastim-Solo acepta numeros, longitud max 2 caracteres")] public string PegfilgrastimLastCycle { get { return _PegfilgrastimLastCycle; } set { _PegfilgrastimLastCycle = ValidateValue<string>(value, nameof(PegfilgrastimLastCycle)); } }
        /// <sumary>
        /// ProcarbazineLastCycle
        /// </sumary>
        private string _ProcarbazineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 128-Variable 66.22-En este ultimo esquema el usuario recibio Procarbazina-Solo acepta numeros, longitud max 2 caracteres")] public string ProcarbazineLastCycle { get { return _ProcarbazineLastCycle; } set { _ProcarbazineLastCycle = ValidateValue<string>(value, nameof(ProcarbazineLastCycle)); } }
        /// <sumary>
        /// RituximabLastCycle
        /// </sumary>
        private string _RituximabLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 129-Variable 66.23-En este ultimo esquema el usuario recibio Rituximab-Solo acepta numeros, longitud max 2 caracteres")] public string RituximabLastCycle { get { return _RituximabLastCycle; } set { _RituximabLastCycle = ValidateValue<string>(value, nameof(RituximabLastCycle)); } }
        /// <sumary>
        /// TamoxifenLastCycle
        /// </sumary>
        private string _TamoxifenLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 130-Variable 66.24-En este ultimo esquema el usuario recibio Tamoxifeno-Solo acepta numeros, longitud max 2 caracteres")] public string TamoxifenLastCycle { get { return _TamoxifenLastCycle; } set { _TamoxifenLastCycle = ValidateValue<string>(value, nameof(TamoxifenLastCycle)); } }
        /// <sumary>
        /// ThioguanineLastCycle
        /// </sumary>
        private string _ThioguanineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 131-Variable 66.25-En este ultimo esquema el usuario recibio Tioguanina-Solo acepta numeros, longitud max 2 caracteres")] public string ThioguanineLastCycle { get { return _ThioguanineLastCycle; } set { _ThioguanineLastCycle = ValidateValue<string>(value, nameof(ThioguanineLastCycle)); } }
        /// <sumary>
        /// TrastuzumabLastCycle
        /// </sumary>
        private string _TrastuzumabLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 132-Variable 66.26-En este ultimo esquema el usuario recibio Trastuzumab-Solo acepta numeros, longitud max 2 caracteres")] public string TrastuzumabLastCycle { get { return _TrastuzumabLastCycle; } set { _TrastuzumabLastCycle = ValidateValue<string>(value, nameof(TrastuzumabLastCycle)); } }
        /// <sumary>
        /// VinblastineLastCycle
        /// </sumary>
        private string _VinblastineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 133-Variable 66.27-En este ultimo esquema el usuario recibio Vinblastina-Solo acepta numeros, longitud max 2 caracteres")] public string VinblastineLastCycle { get { return _VinblastineLastCycle; } set { _VinblastineLastCycle = ValidateValue<string>(value, nameof(VinblastineLastCycle)); } }
        /// <sumary>
        /// VincristineLastCycle
        /// </sumary>
        private string _VincristineLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 134-Variable 66.28-En este ultimo esquema el usuario recibio Vincristina-Solo acepta numeros, longitud max 2 caracteres")] public string VincristineLastCycle { get { return _VincristineLastCycle; } set { _VincristineLastCycle = ValidateValue<string>(value, nameof(VincristineLastCycle)); } }
        /// <sumary>
        /// PrednisoneLastCycle
        /// </sumary>
        private string _PrednisoneLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 135-Variable 66.29-En este ultimo esquema el usuario recibio Prednisona-Solo acepta numeros, longitud max 2 caracteres")] public string PrednisoneLastCycle { get { return _PrednisoneLastCycle; } set { _PrednisoneLastCycle = ValidateValue<string>(value, nameof(PrednisoneLastCycle)); } }
        /// <sumary>
        /// PrednisoloneLastCycle
        /// </sumary>
        private string _PrednisoloneLastCycle;
        [Order]
        [Length(2)] [Regex(@"^(1|2|3|55|98)$", "Columna 136-Variable 66.30-En este ultimo esquema el usuario recibio Prednisolona-Solo acepta numeros, longitud max 2 caracteres")] public string PrednisoloneLastCycle { get { return _PrednisoloneLastCycle; } set { _PrednisoloneLastCycle = ValidateValue<string>(value, nameof(PrednisoloneLastCycle)); } }
        /// <sumary>
        /// MethylprednisoloneLastCycle
        /// </sumary>
        private string _MethylprednisoloneLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 137-Variable 66.31-En este ultimo esquema el usuario recibio Metilprednisolona -Solo acepta numeros, longitud max 2 caracteres")] public string MethylprednisoloneLastCycle { get { return _MethylprednisoloneLastCycle; } set { _MethylprednisoloneLastCycle = ValidateValue<string>(value, nameof(MethylprednisoloneLastCycle)); } }
        /// <sumary>
        /// DexamethasoneLastCycle
        /// </sumary>
        private string _DexamethasoneLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 138-Variable 66.32-En este ultimo esquema el usuario recibio Dexametasona-Solo acepta numeros, longitud max 2 caracteres")] public string DexamethasoneLastCycle { get { return _DexamethasoneLastCycle; } set { _DexamethasoneLastCycle = ValidateValue<string>(value, nameof(DexamethasoneLastCycle)); } }
        /// <sumary>
        /// DrugPOSOneLastCycle
        /// </sumary>
        private string _DrugPOSOneLastCycle;
        [Order]
        [Regex(@"^([0-9]{1,20})$|^(55|98|97)$", "Columna 139-Variable 67-Medicamento Antineoplasico o terapia hormonal para cancer, pero no enunciado en variables 66.1 a 66.32 1 administrado al usuario-Solo acepta numeros, longitud max 20 caracteres")] public string DrugPOSOneLastCycle { get { return _DrugPOSOneLastCycle; } set { _DrugPOSOneLastCycle = ValidateValue<string>(value, nameof(DrugPOSOneLastCycle)); } }
        /// <sumary>
        /// DrugPOSTwoLastCycle
        /// </sumary>
        private string _DrugPOSTwoLastCycle;
        [Order]
        [Regex(@"^([0-9]{1,20})$|^(55|98|97)$", "Columna 140-Variable 68-Medicamento Antineoplasico u terapia hormonal para cancer, pero no enunciado en variables 66.1 a 66.32 2 administrado al usuario ultimo esquema-Solo acepta numeros, longitud max 20 caracteres")] public string DrugPOSTwoLastCycle { get { return _DrugPOSTwoLastCycle; } set { _DrugPOSTwoLastCycle = ValidateValue<string>(value, nameof(DrugPOSTwoLastCycle)); } }
        /// <sumary>
        /// DrugPOSThreeLastCycle
        /// </sumary>
        private string _DrugPOSThreeLastCycle;
        [Order]
        [Regex(@"^([0-9]{1,20})$|^(55|98|97)$", "Columna 141-Variable 69-Medicamento Antineoplasico, pero no enunciado en variables 66.1 a 66.32 3 administrado al usuario ultimo esquema-Solo acepta numeros, longitud max 20 caracteres")] public string DrugPOSThreeLastCycle { get { return _DrugPOSThreeLastCycle; } set { _DrugPOSThreeLastCycle = ValidateValue<string>(value, nameof(DrugPOSThreeLastCycle)); } }
        /// <sumary>
        /// IntrathecalChemotherapyLastCycle
        /// </sumary>
        private string _IntrathecalChemotherapyLastCycle;
        [Order]
        [Regex(@"^(1|2|98)$", "Columna 142-Variable 70-Recibio quimioterapia intratecal en el ultimo esquema de este periodo de reporte?-Solo acepta numeros, longitud max 2 caracteres")] public string IntrathecalChemotherapyLastCycle { get { return _IntrathecalChemotherapyLastCycle; } set { _IntrathecalChemotherapyLastCycle = ValidateValue<string>(value, nameof(IntrathecalChemotherapyLastCycle)); } }
        /// <sumary>
        /// EndDateLastCycle
        /// </sumary>
        private string _EndDateLastCycle;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 143-Variable 71-Fecha de inicio del ultimo esquema de quimioterapia o terapia sistemica de este periodo de reporte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string EndDateLastCycle { get { return _EndDateLastCycle; } set { _EndDateLastCycle = ValidateValue<string>(value, nameof(EndDateLastCycle)); } }
        /// <sumary>
        /// CurrentFeaturesLastCycle
        /// </sumary>
        private string _CurrentFeaturesLastCycle;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 144-Variable 72-Caracteristicas actuales del ultimo esquema de este periodo-Solo acepta numeros, longitud max 2 caracteres")] public string CurrentFeaturesLastCycle { get { return _CurrentFeaturesLastCycle; } set { _CurrentFeaturesLastCycle = ValidateValue<string>(value, nameof(CurrentFeaturesLastCycle)); } }
        /// <sumary>
        /// ReasonEndingLastCycle
        /// </sumary>
        private string _ReasonEndingLastCycle;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|55|98)$", "Columna 145-Variable 73-Motivo de la finalizacion (prematura) de este ultimo esquema-Solo acepta numeros, longitud max 2 caracteres")] public string ReasonEndingLastCycle { get { return _ReasonEndingLastCycle; } set { _ReasonEndingLastCycle = ValidateValue<string>(value, nameof(ReasonEndingLastCycle)); } }
        /// <sumary>
        /// Surgeries
        /// </sumary>
        private string _Surgeries;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 146-Variable 74-Fue sometido el usuario a una o mas cirugias curativas o paliativas como parte del manejo del cancer durante este periodo de reporte?-Solo acepta numeros, longitud max 2 caracteres")] public string Surgeries { get { return _Surgeries; } set { _Surgeries = ValidateValue<string>(value, nameof(Surgeries)); } }
        /// <sumary>
        /// CountSurgeries
        /// </sumary>
        private string _CountSurgeries;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 147-Variable 75-Numero de cirugias a las que fue sometido el usuario durante el periodo de reporte actual-Solo acepta numeros, longitud max 2 caracteres")] public string CountSurgeries { get { return _CountSurgeries; } set { _CountSurgeries = ValidateValue<string>(value, nameof(CountSurgeries)); } }
        /// <sumary>
        /// DateFirstSurgery
        /// </sumary>
        private string _DateFirstSurgery;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 148-Variable 76-Fecha de realizacion de la primera cirugia en este periodo de reporte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateFirstSurgery { get { return _DateFirstSurgery; } set { _DateFirstSurgery = ValidateValue<string>(value, nameof(DateFirstSurgery)); } }
        /// <sumary>
        /// IPSFirstSurgery
        /// </sumary>
        private string _IPSFirstSurgery;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 149-Variable 77-Codigo de la IPS que realizo la primera cirugia de este periodo de reporte-Solo acepta numeros, longitud max 12 caracteres")] public string IPSFirstSurgery { get { return _IPSFirstSurgery; } set { _IPSFirstSurgery = ValidateValue<string>(value, nameof(IPSFirstSurgery)); } }
        /// <sumary>
        /// CodeFirstSurgery
        /// </sumary>
        private string _CodeFirstSurgery;
        [Order]
        [Regex(@"^([0-9]{1,20})$|^(55|98)$", "Columna 150-Variable 78-Codigo de primera cirugia en este periodo de reporte-Solo acepta numeros, longitud max 20 caracteres")] public string CodeFirstSurgery { get { return _CodeFirstSurgery; } set { _CodeFirstSurgery = ValidateValue<string>(value, nameof(CodeFirstSurgery)); } }
        /// <sumary>
        /// UbicationFirstSurgery
        /// </sumary>
        private string _UbicationFirstSurgery;
        [Order]
        [Regex(@"^(1|2|3|4|55|98)$", "Columna 151-Variable 79-Ubicacion temporal de esta primera cirugia en relacion al manejo oncologico-Solo acepta numeros, longitud max 2 caracteres")] public string UbicationFirstSurgery { get { return _UbicationFirstSurgery; } set { _UbicationFirstSurgery = ValidateValue<string>(value, nameof(UbicationFirstSurgery)); } }
        /// <sumary>
        /// DateLastSurgery
        /// </sumary>
        private string _DateLastSurgery;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 152-Variable 80-Fecha de realizacion de la ultima cirugia o cirugia de reintervencion en este periodo de reporte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateLastSurgery { get { return _DateLastSurgery; } set { _DateLastSurgery = ValidateValue<string>(value, nameof(DateLastSurgery)); } }
        /// <sumary>
        /// ReasonLastSurgery
        /// </sumary>
        private string _ReasonLastSurgery;
        [Order]
        [Regex(@"^(1|2|3|5|6|55|98)$", "Columna 153-Variable 81-Motivo de haber realizado la ultima cirugia de este periodo de reporte-Solo acepta numeros, longitud max 2 caracteres")] public string ReasonLastSurgery { get { return _ReasonLastSurgery; } set { _ReasonLastSurgery = ValidateValue<string>(value, nameof(ReasonLastSurgery)); } }
        /// <sumary>
        /// IPSLastSurgery
        /// </sumary>
        private string _IPSLastSurgery;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 154-Variable 82-Codigo de la IPS que realiza la ultima cirugia en este periodo de reporte-Solo acepta numeros, longitud max 12 caracteres")] public string IPSLastSurgery { get { return _IPSLastSurgery; } set { _IPSLastSurgery = ValidateValue<string>(value, nameof(IPSLastSurgery)); } }
        /// <sumary>
        /// CodeLastSurgery
        /// </sumary>
        private string _CodeLastSurgery;
        [Order]
        [Regex(@"^([0-9]{1,20})$|^(55|98)$", "Columna 155-Variable 83-Codigo de ultima cirugia en este periodo de reporte-Solo acepta numeros, longitud max 20 caracteres")] public string CodeLastSurgery { get { return _CodeLastSurgery; } set { _CodeLastSurgery = ValidateValue<string>(value, nameof(CodeLastSurgery)); } }
        /// <sumary>
        /// UbicationLastSurgery
        /// </sumary>
        private string _UbicationLastSurgery;
        [Order]
        [Regex(@"^(1|2|3|4|55|98)$", "Columna 156-Variable 84-Ubicacion temporal de esta ultima cirugia en relacion al manejo oncologico-Solo acepta numeros, longitud max 2 caracteres")] public string UbicationLastSurgery { get { return _UbicationLastSurgery; } set { _UbicationLastSurgery = ValidateValue<string>(value, nameof(UbicationLastSurgery)); } }
        /// <sumary>
        /// VitalStatusLastSurgery
        /// </sumary>
        private string _VitalStatusLastSurgery;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 157-Variable 85-Estado vital al finalizar la unica o ultima cirugia de este periodo de reporte-Solo acepta numeros, longitud max 2 caracteres")] public string VitalStatusLastSurgery { get { return _VitalStatusLastSurgery; } set { _VitalStatusLastSurgery = ValidateValue<string>(value, nameof(VitalStatusLastSurgery)); } }
        /// <sumary>
        /// Radiotherapy
        /// </sumary>
        private string _Radiotherapy;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 158-Variable 86-¿Recibio el usuario algun tipo de radioterapia en el periodo de reporte actual?:-Solo acepta numeros, longitud max 2 caracteres")] public string Radiotherapy { get { return _Radiotherapy; } set { _Radiotherapy = ValidateValue<string>(value, nameof(Radiotherapy)); } }
        /// <sumary>
        /// CountRadiotherapy
        /// </sumary>
        private string _CountRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 159-Variable 87-Numero de sesiones de radioterapia externa suministrados en el periodo de reporte actual-Solo acepta numeros, longitud max 2 caracteres")] public string CountRadiotherapy { get { return _CountRadiotherapy; } set { _CountRadiotherapy = ValidateValue<string>(value, nameof(CountRadiotherapy)); } }
        /// <sumary>
        /// DateRadiotherapy
        /// </sumary>
        private string _DateRadiotherapy;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 160-Variable 88-Fecha de inicio de primer o unico esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separadord")] public string DateRadiotherapy { get { return _DateRadiotherapy; } set { _DateRadiotherapy = ValidateValue<string>(value, nameof(DateRadiotherapy)); } }
        /// <sumary>
        /// UbicationRadiotherapy
        /// </sumary>
        private string _UbicationRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|55|98)$", "Columna 161-Variable 89-Ubicacion temporal del primer o unico esquema de cualquier tipo de radioterapia en este periodo de reporte-Solo acepta numeros, longitud max 2 caracteres")] public string UbicationRadiotherapy { get { return _UbicationRadiotherapy; } set { _UbicationRadiotherapy = ValidateValue<string>(value, nameof(UbicationRadiotherapy)); } }
        /// <sumary>
        /// RadiotherapyType
        /// </sumary>
        private string _RadiotherapyType;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|55|98)$", "Columna 162-Variable 90-Tipo de radioterapia aplicada en este primer o unico esquema-Solo acepta numeros, longitud max 2 caracteres")] public string RadiotherapyType { get { return _RadiotherapyType; } set { _RadiotherapyType = ValidateValue<string>(value, nameof(RadiotherapyType)); } }
        /// <sumary>
        /// IPSRadiotherapy
        /// </sumary>
        private string _IPSRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 163-Variable 91-Numero de IPS que suministran este primer o unico esquema de radioterapia-Campo Alfanumerico, longitud max 2")] public string IPSRadiotherapy { get { return _IPSRadiotherapy; } set { _IPSRadiotherapy = ValidateValue<string>(value, nameof(IPSRadiotherapy)); } }
        /// <sumary>
        /// IPSOneRadiotherapy
        /// </sumary>
        private string _IPSOneRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 164-Variable 92-Codigo de la IPS1 que suministra la radioterapia de este primer o unico esquema-Solo acepta numeros, longitud max 12 caracteres")] public string IPSOneRadiotherapy { get { return _IPSOneRadiotherapy; } set { _IPSOneRadiotherapy = ValidateValue<string>(value, nameof(IPSOneRadiotherapy)); } }
        /// <sumary>
        /// IPSTwoRadiotherapy
        /// </sumary>
        private string _IPSTwoRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 165-Variable 93-Codigo de la IPS2 que suministra la radioterapia de este primer o unico esquema-Solo acepta numeros, longitud max 12 caracteres")] public string IPSTwoRadiotherapy { get { return _IPSTwoRadiotherapy; } set { _IPSTwoRadiotherapy = ValidateValue<string>(value, nameof(IPSTwoRadiotherapy)); } }
        /// <sumary>
        /// EndDateRadiotherapy
        /// </sumary>
        private string _EndDateRadiotherapy;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 166-Variable 94-Fecha de finalizacion de primer o unico esquema de radioterapia-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string EndDateRadiotherapy { get { return _EndDateRadiotherapy; } set { _EndDateRadiotherapy = ValidateValue<string>(value, nameof(EndDateRadiotherapy)); } }
        /// <sumary>
        /// CurrentFeaturesRadiotherapy
        /// </sumary>
        private string _CurrentFeaturesRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 167-Variable 95-Características actuales de este primer o único esquema de radioterapia-Solo acepta números, longitud max 2 caracteres")] public string CurrentFeaturesRadiotherapy { get { return _CurrentFeaturesRadiotherapy; } set { _CurrentFeaturesRadiotherapy = ValidateValue<string>(value, nameof(CurrentFeaturesRadiotherapy)); } }
        /// <sumary>
        /// ReasonEndingRadiotherapy
        /// </sumary>
        private string _ReasonEndingRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|55|98)$", "Columna 168-Variable 96-Motivo de la finalizacion de este primer o unico esquema de radioterapia-Solo acepta numeros, longitud max 2 caracteres")] public string ReasonEndingRadiotherapy { get { return _ReasonEndingRadiotherapy; } set { _ReasonEndingRadiotherapy = ValidateValue<string>(value, nameof(ReasonEndingRadiotherapy)); } }
        /// <sumary>
        /// InitalDateLastRadiotherapy
        /// </sumary>
        private string _InitalDateLastRadiotherapy;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 169-Variable 97-Fecha de inicio del ultimo esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string InitalDateLastRadiotherapy { get { return _InitalDateLastRadiotherapy; } set { _InitalDateLastRadiotherapy = ValidateValue<string>(value, nameof(InitalDateLastRadiotherapy)); } }
        /// <sumary>
        /// UbicationLastRadiotherapy
        /// </sumary>
        private string _UbicationLastRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|55|98)$", "Columna 170-Variable 98-Ubicacion temporal del ultimo esquema de cualquier tipo de radioterapia suministrado en el periodo actual en relacion al tratamiento oncologico-Solo acepta numeros, longitud max 2 caracteres")] public string UbicationLastRadiotherapy { get { return _UbicationLastRadiotherapy; } set { _UbicationLastRadiotherapy = ValidateValue<string>(value, nameof(UbicationLastRadiotherapy)); } }
        /// <sumary>
        /// LastRadiotherapyType
        /// </sumary>
        private string _LastRadiotherapyType;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|55|98)$", "Columna 171-Variable 99-Tipo de radioterapia aplicada en el ultimo esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual:-Solo acepta numeros, longitud max 2 caracteres")] public string LastRadiotherapyType { get { return _LastRadiotherapyType; } set { _LastRadiotherapyType = ValidateValue<string>(value, nameof(LastRadiotherapyType)); } }
        /// <sumary>
        /// IPSLastRadiotherapy
        /// </sumary>
        private string _IPSLastRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{1,2})$|^(55|98)$", "Columna 172-Variable 100-Numero de IPS que suministran este ultimo esquema de radioterapia suministrado en el corte actual-Solo acepta numeros, longitud max 2 caracteres")] public string IPSLastRadiotherapy { get { return _IPSLastRadiotherapy; } set { _IPSLastRadiotherapy = ValidateValue<string>(value, nameof(IPSLastRadiotherapy)); } }
        /// <sumary>
        /// IPSOneLastRadiotherapy
        /// </sumary>
        private string _IPSOneLastRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 173-Variable 101-Codigo de la IPS1 que suministra ultimo esquema de cualquier tipo de radioterapia en el periodo de reporte actual-Solo acepta numeros, longitud max 12 caracteres")] public string IPSOneLastRadiotherapy { get { return _IPSOneLastRadiotherapy; } set { _IPSOneLastRadiotherapy = ValidateValue<string>(value, nameof(IPSOneLastRadiotherapy)); } }
        /// <sumary>
        /// IPSTwoLastRadiotherapy
        /// </sumary>
        private string _IPSTwoLastRadiotherapy;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 174-Variable 102-Codigo de la IPS2 que suministra ultimo esquema de cualquier tipo de radioterapia en el periodo de reporte actual:-Solo acepta numeros, longitud max 12 caracteres")] public string IPSTwoLastRadiotherapy { get { return _IPSTwoLastRadiotherapy; } set { _IPSTwoLastRadiotherapy = ValidateValue<string>(value, nameof(IPSTwoLastRadiotherapy)); } }
        /// <sumary>
        /// EndDateLastRadiotherapy
        /// </sumary>
        private string _EndDateLastRadiotherapy;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 175-Variable 103-Fecha de finalizacion del ultimo esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual:-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string EndDateLastRadiotherapy { get { return _EndDateLastRadiotherapy; } set { _EndDateLastRadiotherapy = ValidateValue<string>(value, nameof(EndDateLastRadiotherapy)); } }
        /// <sumary>
        /// CurrentFeaturesLastRadiotherapy
        /// </sumary>
        private string _CurrentFeaturesLastRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 176-Variable 104-Caracteristicas actuales de este ultimo esquema de cualquier tipo de radioterapia suministrado en el periodo de reporte actual-Solo acepta numeros, longitud max 2 caracteres)")] public string CurrentFeaturesLastRadiotherapy { get { return _CurrentFeaturesLastRadiotherapy; } set { _CurrentFeaturesLastRadiotherapy = ValidateValue<string>(value, nameof(CurrentFeaturesLastRadiotherapy)); } }
        /// <sumary>
        /// ReasonEndingLastRadiotherapy
        /// </sumary>
        private string _ReasonEndingLastRadiotherapy;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|55|98)$", "Columna 177-Variable 105-Motivo de la finalizacion de este ultimo esquema de radioterapia suministrado en el corte actual-Solo acepta numeros, longitud max 2 caracteres")] public string ReasonEndingLastRadiotherapy { get { return _ReasonEndingLastRadiotherapy; } set { _ReasonEndingLastRadiotherapy = ValidateValue<string>(value, nameof(ReasonEndingLastRadiotherapy)); } }
        /// <sumary>
        /// TransplantProgenitorCells
        /// </sumary>
        private string _TransplantProgenitorCells;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 178-Variable 106-¿Recibio el usuario trasplante de celulas progenitoras hematopoyetica dentro del periodo de reporte actual?-Solo acepta numeros, longitud max 2 caracteres")] public string TransplantProgenitorCells { get { return _TransplantProgenitorCells; } set { _TransplantProgenitorCells = ValidateValue<string>(value, nameof(TransplantProgenitorCells)); } }
        /// <sumary>
        /// TransplantType
        /// </sumary>
        private string _TransplantType;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|55|98)$", "Columna 179-Variable 107-Tipo de trasplante recibido-Solo acepta numeros, longitud max 2 caracteres")] public string TransplantType { get { return _TransplantType; } set { _TransplantType = ValidateValue<string>(value, nameof(TransplantType)); } }
        /// <sumary>
        /// UbicationTransplant
        /// </sumary>
        private string _UbicationTransplant;
        [Order]
        [Regex(@"^(1|2|3|55|98)$", "Columna 180-Variable 108-Ubicación temporal de este trasplante en relación al manejo oncológico-Solo acepta números, longitud max 2 caracteres")] public string UbicationTransplant { get { return _UbicationTransplant; } set { _UbicationTransplant = ValidateValue<string>(value, nameof(UbicationTransplant)); } }
        /// <sumary>
        /// DateTransplant
        /// </sumary>
        private string _DateTransplant;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 181-Variable 109-Fecha del trasplante-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateTransplant { get { return _DateTransplant; } set { _DateTransplant = ValidateValue<string>(value, nameof(DateTransplant)); } }
        /// <sumary>
        /// IPSTransplant
        /// </sumary>
        private string _IPSTransplant;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 182-Variable 110-Codigo de la IPS que realizo este trasplante-Solo acepta numeros, longitud max 12 caracteres")] public string IPSTransplant { get { return _IPSTransplant; } set { _IPSTransplant = ValidateValue<string>(value, nameof(IPSTransplant)); } }
        /// <sumary>
        /// ReconstructiveSurgery
        /// </sumary>
        private string _ReconstructiveSurgery;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 183-Variable 111-El usuario, ¿recibio cirugia reconstructiva en el periodo de reporte actual?-Solo acepta numeros, longitud max 2 caracteres")] public string ReconstructiveSurgery { get { return _ReconstructiveSurgery; } set { _ReconstructiveSurgery = ValidateValue<string>(value, nameof(ReconstructiveSurgery)); } }
        /// <sumary>
        /// DateReconstructiveSurgery
        /// </sumary>
        private string _DateReconstructiveSurgery;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 184-Variable 112-Fecha de la cirugia reconstructiva-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateReconstructiveSurgery { get { return _DateReconstructiveSurgery; } set { _DateReconstructiveSurgery = ValidateValue<string>(value, nameof(DateReconstructiveSurgery)); } }
        /// <sumary>
        /// IPSReconstructiveSurgery
        /// </sumary>
        private string _IPSReconstructiveSurgery;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 185-Variable 113-Codigo de la IPS que realizo cirugia reconstructiva-Solo acepta numeros, longitud max 12 caracteres")] public string IPSReconstructiveSurgery { get { return _IPSReconstructiveSurgery; } set { _IPSReconstructiveSurgery = ValidateValue<string>(value, nameof(IPSReconstructiveSurgery)); } }
        /// <sumary>
        /// PalliativeCare
        /// </sumary>
        private string _PalliativeCare;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 186-Variable 114-¿El usuario fue valorado en consulta o procedimiento de cuidado paliativo en el periodo de reporte actual?-Solo acepta numeros, longitud max 2 caracteres")] public string PalliativeCare { get { return _PalliativeCare; } set { _PalliativeCare = ValidateValue<string>(value, nameof(PalliativeCare)); } }
        /// <sumary>
        /// ConsultationSpecialistPalliativeCare
        /// </sumary>
        private string _ConsultationSpecialistPalliativeCare;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 187-Variable 114.1-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por medico especialista en cuidado paliativo-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationSpecialistPalliativeCare { get { return _ConsultationSpecialistPalliativeCare; } set { _ConsultationSpecialistPalliativeCare = ValidateValue<string>(value, nameof(ConsultationSpecialistPalliativeCare)); } }
        /// <sumary>
        /// ConsultationProfessionalPalliativeCare
        /// </sumary>
        private string _ConsultationProfessionalPalliativeCare;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 188-Variable 114.2-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por profesional de la salud (no medico, incluye psicologo) especialista en cuidado paliativo-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationProfessionalPalliativeCare { get { return _ConsultationProfessionalPalliativeCare; } set { _ConsultationProfessionalPalliativeCare = ValidateValue<string>(value, nameof(ConsultationProfessionalPalliativeCare)); } }
        /// <sumary>
        /// ConsultationSpecialistOtherSpecialty
        /// </sumary>
        private string _ConsultationSpecialistOtherSpecialty;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 189-Variable 114.3-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por medico especialista, otra especialidad-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationSpecialistOtherSpecialty { get { return _ConsultationSpecialistOtherSpecialty; } set { _ConsultationSpecialistOtherSpecialty = ValidateValue<string>(value, nameof(ConsultationSpecialistOtherSpecialty)); } }
        /// <sumary>
        /// ConsultationGeneralPractitioner
        /// </sumary>
        private string _ConsultationGeneralPractitioner;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 190-Variable 114.4-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por medico general-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationGeneralPractitioner { get { return _ConsultationGeneralPractitioner; } set { _ConsultationGeneralPractitioner = ValidateValue<string>(value, nameof(ConsultationGeneralPractitioner)); } }
        /// <sumary>
        /// ConsultationSocialWork
        /// </sumary>
        private string _ConsultationSocialWork;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 191-Variable 114.5-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por trabajo social-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationSocialWork { get { return _ConsultationSocialWork; } set { _ConsultationSocialWork = ValidateValue<string>(value, nameof(ConsultationSocialWork)); } }
        /// <sumary>
        /// ConsultationOtherProfessional
        /// </sumary>
        private string _ConsultationOtherProfessional;
        [Order]
        [Regex(@"^(1|2|3|55)$", "Columna 192-Variable 114.6-El usuario recibio consulta o procedimiento de cuidado paliativo en el periodo de reporte actual, por otro profesional de salud (no medico, incluye psicologo) no especializado-Solo acepta numeros, longitud max 2 caracteres")] public string ConsultationOtherProfessional { get { return _ConsultationOtherProfessional; } set { _ConsultationOtherProfessional = ValidateValue<string>(value, nameof(ConsultationOtherProfessional)); } }
        /// <sumary>
        /// DateConsultationPalliativeCare
        /// </sumary>
        private string _DateConsultationPalliativeCare;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 193-Variable 115-Fecha de primera consulta o procedimiento de cuidado paliativo en el periodo de reporte actual-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DateConsultationPalliativeCare { get { return _DateConsultationPalliativeCare; } set { _DateConsultationPalliativeCare = ValidateValue<string>(value, nameof(DateConsultationPalliativeCare)); } }
        /// <sumary>
        /// IPSPalliativeCare
        /// </sumary>
        private string _IPSPalliativeCare;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 194-Variable 116-Codigo de la IPS donde recibio la primera valoracion de cuidado paliativo en el periodo de reporte actual-Solo acepta numeros, longitud max 12 caracteres")] public string IPSPalliativeCare { get { return _IPSPalliativeCare; } set { _IPSPalliativeCare = ValidateValue<string>(value, nameof(IPSPalliativeCare)); } }
        /// <sumary>
        /// Psychiatry
        /// </sumary>
        private string _Psychiatry;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 195-Variable 117-¿Ha sido valorado el usuario por el servicio de psiquiatria en el periodo de reporte actual?:-Solo acepta numeros, longitud max 2 caracteres")] public string Psychiatry { get { return _Psychiatry; } set { _Psychiatry = ValidateValue<string>(value, nameof(Psychiatry)); } }
        /// <sumary>
        /// DatePsychiatry
        /// </sumary>
        private string _DatePsychiatry;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 196-Variable 118-Fecha de primera consulta con el servicio de psiquiatria (para todos los usuarios) en el periodo de reporte actual-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DatePsychiatry { get { return _DatePsychiatry; } set { _DatePsychiatry = ValidateValue<string>(value, nameof(DatePsychiatry)); } }
        /// <sumary>
        /// IPSPsychiatry
        /// </sumary>
        private string _IPSPsychiatry;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 197-Variable 119-Codigo de la IPS donde recibio la primera valoracion de psiquiatria en el periodo de reporte actual-Solo acepta numeros, longitud max 12 caracteres")] public string IPSPsychiatry { get { return _IPSPsychiatry; } set { _IPSPsychiatry = ValidateValue<string>(value, nameof(IPSPsychiatry)); } }
        /// <sumary>
        /// Nutrition
        /// </sumary>
        private string _Nutrition;
        [Order]
        [Regex(@"^(1|2|55|98)$", "Columna 198-Variable 120-¿Fue valorado el usuario por profesional en nutricion en el periodo de reporte actual?-Solo acepta numeros, longitud max 2 caracteres")] public string Nutrition { get { return _Nutrition; } set { _Nutrition = ValidateValue<string>(value, nameof(Nutrition)); } }
        /// <sumary>
        /// InitialDateNutrition
        /// </sumary>
        private string _InitialDateNutrition;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 199-Variable 121-Fecha de consulta inicial con nutricion en el periodo de reporte actual-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string InitialDateNutrition { get { return _InitialDateNutrition; } set { _InitialDateNutrition = ValidateValue<string>(value, nameof(InitialDateNutrition)); } }
        /// <sumary>
        /// IPSNutrition
        /// </sumary>
        private string _IPSNutrition;
        [Order]
        [Regex(@"^([0-9]{12})$|^(55|98)$", "Columna 200-Variable 122-Codigo de la IPS donde recibio la valoracion por nutricion, en el periodo de reporte actual-Solo acepta numeros, longitud max 12 caracteres")] public string IPSNutrition { get { return _IPSNutrition; } set { _IPSNutrition = ValidateValue<string>(value, nameof(IPSNutrition)); } }
        /// <sumary>
        /// NutritionalSupport
        /// </sumary>
        private string _NutritionalSupport;
        [Order]
        [Regex(@"^(1|2|3|4|55)$", "Columna 201-Variable 123-¿El usuario recibio soporte nutricional?-Solo acepta numeros, longitud max 2 caracteres")] public string NutritionalSupport { get { return _NutritionalSupport; } set { _NutritionalSupport = ValidateValue<string>(value, nameof(NutritionalSupport)); } }
        /// <sumary>
        /// TherapiesRehabilitation
        /// </sumary>
        private string _TherapiesRehabilitation;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|55|98)$", "Columna 202-Variable 124-¿El usuario ha recibido terapias complementarias para su rehabilitacion?-Solo acepta numeros, longitud max 2 caracteres")] public string TherapiesRehabilitation { get { return _TherapiesRehabilitation; } set { _TherapiesRehabilitation = ValidateValue<string>(value, nameof(TherapiesRehabilitation)); } }
        /// <sumary>
        /// TreatmentType
        /// </sumary>
        private string _TreatmentType;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|8|9|10|11|55|98)$", "Columna 203-Variable 125-Tipo de tratamiento que esta recibiendo el usuario a la fecha de corte (el dia 01/01/2019)-Solo acepta numeros, longitud max 2 caracteres")] public string TreatmentType { get { return _TreatmentType; } set { _TreatmentType = ValidateValue<string>(value, nameof(TreatmentType)); } }
        /// <sumary>
        /// ResultOncological
        /// </sumary>
        private string _ResultOncological;
        [Order]
        [Regex(@"^(1|2|3|4|5|6|7|55|97|98|99)$", "Columna 204-Variable 126-Resultado final del manejo oncologico en este periodo de reporte, luego de ser tratado en este periodo el usuario esta en:-Solo acepta numeros, longitud max 2 caracteres")] public string ResultOncological { get { return _ResultOncological; } set { _ResultOncological = ValidateValue<string>(value, nameof(ResultOncological)); } }
        /// <sumary>
        /// VitalStatus
        /// </sumary>
        private string _VitalStatus;
        [Order]
        [Regex(@"^(1|2|55|99)$", "Columna 205-Variable 127-Tipo de tratamiento que esta recibiendo el usuario a la fecha de corte-Solo acepta numeros, longitud max 2 caracteres")] public string VitalStatus { get { return _VitalStatus; } set { _VitalStatus = ValidateValue<string>(value, nameof(VitalStatus)); } }
        /// <sumary>
        /// AdministrativeNovelty
        /// </sumary>
        private string _AdministrativeNovelty;
        [Order]
        [Regex(@"^(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)$", "Columna 206-Variable 128-Novedad ADMINISTRATIVA del usuario respecto al reporte anterior-Solo acepta numeros, longitud max 2 caracteres")] public string AdministrativeNovelty { get { return _AdministrativeNovelty; } set { _AdministrativeNovelty = ValidateValue<string>(value, nameof(AdministrativeNovelty)); } }
        /// <sumary>
        /// ClinicalNovelty
        /// </sumary>
        private string _ClinicalNovelty;
        [Order]
        [Regex(@"^(0|1|2|3|4|5|6|7|8|9|10|55)$", "Columna 207-Variable 129-Novedad clinica del usuario a la fecha de corte-Solo acepta numeros, longitud max 2 caracteres")] public string ClinicalNovelty { get { return _ClinicalNovelty; } set { _ClinicalNovelty = ValidateValue<string>(value, nameof(ClinicalNovelty)); } }
        /// <sumary>
        /// DisclaimerDate
        /// </sumary>
        private string _DisclaimerDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 208-Variable 130-Fecha de desafiliacion de la EAPB-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DisclaimerDate { get { return _DisclaimerDate; } set { _DisclaimerDate = ValidateValue<string>(value, nameof(DisclaimerDate)); } }
        /// <sumary>
        /// DeathDate
        /// </sumary>
        private string _DeathDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 209-Variable 131-Fecha de muerte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string DeathDate { get { return _DeathDate; } set { _DeathDate = ValidateValue<string>(value, nameof(DeathDate)); } }
        /// <sumary>
        /// DeathCause
        /// </sumary>
        private string _DeathCause;
        [Order]
        [Regex(@"^(1|2|3|4|55|98)$", "Columna 210-Variable 132-Causa de muerte-Solo acepta numeros, longitud max 2 caracteres")] public string DeathCause { get { return _DeathCause; } set { _DeathCause = ValidateValue<string>(value, nameof(DeathCause)); } }
        /// <sumary>
        /// IdentificationCode
        /// </sumary>
        private string _IdentificationCode;
        [Order]
        [Regex(@"^([0-9]{1,20})$", "Columna 211-Variable 133-Codigo unico de identificacion BDUA-Solo permite longitud de 20 caracteres")] public string IdentificationCode { get { return _IdentificationCode; } set { _IdentificationCode = ValidateValue<string>(value, nameof(IdentificationCode)); } }
        /// <sumary>
        /// CutDate
        /// </sumary>
        private string _CutDate;
        [Order]
        [Regex(@"([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))", "Columna 212-Variable 134-Fecha de Corte-Solo permite longitud de 10 caracteres, en este formato AAAA-MM-DD con guion como separador")] public string CutDate { get { return _CutDate; } set { _CutDate = ValidateValue<string>(value, nameof(CutDate)); } }
        #endregion

        #region Builders
        public ENT_StructureRes0247() : base(null) { ExtrictValidation = false; }
        public ENT_StructureRes0247(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// EntidadResolucion4505
    /// </sumary>
    public class ENT_Person4505 : EntityBase
    {
        #region Properties
        /// <sumary>
        /// IdPerson
        /// </sumary>
        private string _IdPerson;
        [Order]
        public string IdPerson { get { return _IdPerson; } set { _IdPerson = ValidateValue<string>(value, nameof(IdPerson)); } }
        /// <sumary>
        /// IdTypePopulation
        /// </sumary>
        private string _IdTypePopulation;
        [Order]
        public string IdTypePopulation { get { return _IdTypePopulation; } set { _IdTypePopulation = ValidateValue<string>(value, nameof(IdTypePopulation)); } }
        /// <sumary>
        /// IdDocumentType
        /// </sumary>
        private string _IdDocumentType;
        [Order]
        public string IdDocumentType { get { return _IdDocumentType; } set { _IdDocumentType = ValidateValue<string>(value, nameof(IdDocumentType)); } }
        /// <sumary>
        /// DocumentNumber
        /// </sumary>
        private string _DocumentNumber;
        [Order]
        public string DocumentNumber { get { return _DocumentNumber; } set { _DocumentNumber = ValidateValue<string>(value, nameof(DocumentNumber)); } }
        #endregion

        #region Builders
        public ENT_Person4505() : base(null) { ExtrictValidation = false; }
        public ENT_Person4505(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// Entidad recibe parametros 0247
    /// </sumary>
    public class ENT_parameters0247 : EntityBase
    {
        #region Properties
        /// <sumary>
        /// CompanyId
        /// </sumary>
        private long _CompanyId;
        [Order]
        public long CompanyId { get { return _CompanyId; } set { _CompanyId = ValidateValue<long>(value, nameof(CompanyId)); } }
        /// <sumary>
        /// OperatorId
        /// </sumary>
        private long _OperatorId;
        [Order]
        public long OperatorId { get { return _OperatorId; } set { _OperatorId = ValidateValue<long>(value, nameof(OperatorId)); } }
        /// <sumary>
        /// LibraryId
        /// </sumary>
        private long _LibraryId;
        [Order]
        public long LibraryId { get { return _LibraryId; } set { _LibraryId = ValidateValue<long>(value, nameof(LibraryId)); } }
        /// <sumary>
        /// TemplateId
        /// </sumary>
        private long _TemplateId;
        [Order]
        public long TemplateId { get { return _TemplateId; } set { _TemplateId = ValidateValue<long>(value, nameof(TemplateId)); } }
        /// <sumary>
        /// FrmCodi
        /// </sumary>
        private string _FrmCodi;
        [Order]
        public string FrmCodi { get { return _FrmCodi; } set { _FrmCodi = ValidateValue<string>(value, nameof(FrmCodi)); } }
        /// <sumary>
        /// CaseNumber
        /// </sumary>
        private string _CaseNumber;
        [Order]
        public string CaseNumber { get { return _CaseNumber; } set { _CaseNumber = ValidateValue<string>(value, nameof(CaseNumber)); } }
        /// <sumary>
        /// Period
        /// </sumary>
        private long _Period;
        [Order]
        public long Period { get { return _Period; } set { _Period = ValidateValue<long>(value, nameof(Period)); } }
        /// <sumary>
        /// Year
        /// </sumary>
        private long _Year;
        [Order]
        public long Year { get { return _Year; } set { _Year = ValidateValue<long>(value, nameof(Year)); } }
        /// <sumary>
        /// UserCode
        /// </sumary>
        private string _UserCode;
        [Order]
        public string UserCode { get { return _UserCode; } set { _UserCode = ValidateValue<string>(value, nameof(UserCode)); } }
        /// <sumary>
        /// FileId
        /// </sumary>
        private string _FileId;
        [Order]
        public string FileId { get { return _FileId; } set { _FileId = ValidateValue<string>(value, nameof(FileId)); } }
        /// <sumary>
        /// IdTypePopulation
        /// </sumary>
        private long _IdTypePopulation;
        [Order]
        public long IdTypePopulation { get { return _IdTypePopulation; } set { _IdTypePopulation = ValidateValue<long>(value, nameof(IdTypePopulation)); } }
        #endregion

        #region Builders
        public ENT_parameters0247() : base(null) { ExtrictValidation = false; }
        public ENT_parameters0247(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// Encapsula los datos de respuesta de la ejecución de un servicio web
    /// </sumary>
    public class ENT_ActionResult : EntityBase
    {
        #region Properties
        /// <sumary>
        /// IsSuccessful
        /// </sumary>
        private bool _IsSuccessful;
        [Order]
        public bool IsSuccessful { get { return _IsSuccessful; } set { _IsSuccessful = ValidateValue<bool>(value, nameof(IsSuccessful)); } }
        /// <sumary>
        /// IsError
        /// </sumary>
        private bool _IsError;
        [Order]
        public bool IsError { get { return _IsError; } set { _IsError = ValidateValue<bool>(value, nameof(IsError)); } }
        /// <sumary>
        /// ErrorMessage
        /// </sumary>
        private string _ErrorMessage;
        [Order]
        public string ErrorMessage { get { return _ErrorMessage; } set { _ErrorMessage = ValidateValue<string>(value, nameof(ErrorMessage)); } }
        /// <sumary>
        /// Messages
        /// </sumary>
        private List<string> _Messages;
        [Order]
        public List<string> Messages { get { return _Messages; } set { _Messages = ValidateValue<List<string>>(value, nameof(Messages)); } }
        /// <sumary>
        /// Result
        /// </sumary>
        private object _Result;
        [Order]
        public object Result { get { return _Result; } set { _Result = ValidateValue<object>(value, nameof(Result)); } }
        /// <sumary>
        /// IsSucessfull
        /// </sumary>
        private bool _IsSucessfull;
        [Order]
        public bool IsSucessfull { get { return _IsSucessfull; } set { _IsSucessfull = ValidateValue<bool>(value, nameof(IsSucessfull)); } }
        /// <sumary>
        /// FileName
        /// </sumary>
        private string _FileName;
        [Order]
        public string FileName { get { return _FileName; } set { _FileName = ValidateValue<string>(value, nameof(FileName)); } }
        #endregion

        #region Builders
        public ENT_ActionResult() : base(null) { ExtrictValidation = true; }
        public ENT_ActionResult(object obj) : base(obj) { ExtrictValidation = true; }
        #endregion

        #region Body

        #endregion
    }
    #endregion

    #region Base
    public class EntityBase
    {
        public bool ExtrictValidation;
        public List<string> ValidationErrorsList = new List<string>();
        public EntityBase(object obj)
        {
            if (obj == null) return;

            try
            {
                var properties = this.GetType().GetProperties();
                for (int i = 0; i < properties.Length; i++)
                {
                    bool vlid = true;
                    switch (GetDataType(properties[i].PropertyType.Name, properties[i].PropertyType.FullName, out bool isNulleable))
                    {
                        case "Boolean":
                            vlid = bool.TryParse((obj as dynamic)[properties[i].Name].ToString(), out bool vb);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vb);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int16":
                            vlid = short.TryParse((obj as dynamic)[properties[i].Name].ToString(), out short vs);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vs);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int32":
                            vlid = int.TryParse((obj as dynamic)[properties[i].Name].ToString(), out int vi);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vi);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int64":
                            vlid = long.TryParse((obj as dynamic)[properties[i].Name].ToString(), out long vl);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vl);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Double":
                            vlid = double.TryParse((obj as dynamic)[properties[i].Name].ToString(), out double vd);
                            if (vlid) properties[i].SetValue(this, vd);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "DateTime":
                            vlid = DateTime.TryParse((obj as dynamic)[properties[i].Name].ToString(), out DateTime vt);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vt);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "String":
                            properties[i].SetValue(this, ((obj as dynamic)[properties[i].Name] as JValue)?.ToObject(properties[i].PropertyType));
                            break;
                        case "IEnumerable":
                            properties[i].SetValue(this, ((obj as dynamic)[properties[i].Name] as JArray)?.ToObject(properties[i].PropertyType));
                            break;
                        default:
                            properties[i].SetValue(this, Activator.CreateInstance(properties[i].PropertyType, new object[] { (obj as dynamic)[properties[i].Name] }));
                            break;
                    }

                    if (!vlid)
                        ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no es válido.", properties[i].Name));
                }
            }
            catch (Exception ex) { throw ex; }

            if (ExtrictValidation && ValidationErrorsList.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, ValidationErrorsList));
        }

        /// <summary>
        /// Define el tipo de dato usado por la propiedad
        /// </summary>
        /// <param name="name">Nombre de la propiedad</param>
        /// <param name="fullName">Nombre completo de la propiedad</param>
        /// <param name="isNulleable">salida que define si es poosible ser nula la propiedad</param>
        /// <returns>Nombre del listado</returns>
        private string GetDataType(string name, string fullName, out bool isNulleable)
        {
            isNulleable = false;

            if (name.Contains("Nullable"))
            {
                isNulleable = true;
                name = Regex.Match(fullName, "Int16|Int32|Int64|Double|DateTime|String").ToString();
            }
            else if (name.Contains("List") || name.Contains("IEnumerable") || name.Contains("ICollection") || name.Contains("IList"))
            {
                name = "IEnumerable";
            }

            return name;
        }

        /// <summary>
        /// Valida los valores de un Listado de tipo T
        /// </summary>
        /// <typeparam name="T">Tipo de objeto</typeparam>
        /// <param name="value">valor asignable al objeto</param>
        /// <param name="propName">nombre</param>
        /// <returns>Listado de valores</returns>
        public IEnumerable<T> ValidateValue<T>(IEnumerable<T> values, string propName)
        {
            foreach (var value in values)
                ValidateValue<T>(value, propName);
            return values;
        }

        /// <summary>
        /// Valida el valor de un tipo T
        /// </summary>
        /// <typeparam name="T">Tipo de objeto</typeparam>
        /// <param name="value">valor asignable al objeto</param>
        /// <param name="propName">nombre</param>
        /// <returns>Valor</returns>
        public T ValidateValue<T>(T value, string propName)
        {
            var dataType = typeof(T).Name;
            var attrs = this.GetType().GetProperty(propName).GetCustomAttributes(true);

            for (int i = 0; i < attrs.Length; i++)
            {
                var attrName = attrs[i].GetType().Name;

                if (attrName == nameof(FunctionAttribute))
                {
                    if (!InvokeFunction(((FunctionAttribute)attrs[i]).Value, value))
                    {
                        ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "No se cumple la función de validación "));
                    }
                }

                switch (dataType)
                {
                    case "Int64":
                        if (attrName == nameof(MinValueAttribute))
                            if (Convert.ToInt64(value) < ((MinValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor mínimo "));

                        if (attrName == nameof(MaxValueAttribute))
                            if (Convert.ToInt64(value) > ((MaxValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor máximo "));
                        break;
                    case "String":
                        if (attrName == nameof(LengthAttribute))
                            if (Convert.ToString(value).Length > ((LengthAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Longitud "));

                        if (attrName == nameof(RegexAttribute))
                            if (!Regex.IsMatch(Convert.ToString(value), ((RegexAttribute)attrs[i]).Value))
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, ((RegexAttribute)attrs[i]).Message));
                        break;
                    case "Double":
                        if (attrName == nameof(MinValueAttribute))
                            if (Convert.ToInt64(value) < ((MinValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor mínimo "));

                        if (attrName == nameof(MaxValueAttribute))
                            if (Convert.ToInt64(value) > ((MaxValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor máximo "));

                        if (attrName == nameof(DecimalCountAttribute))
                        {
                            var match = Regex.Match(Convert.ToDouble(value).ToString(), "(?<=[\\.|,])[0-9]+");
                            if (match.ToString().Length != ((DecimalCountAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Cantidad de decimales "));
                        }
                        break;
                }
            }

            if (ExtrictValidation && ValidationErrorsList.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, ValidationErrorsList));

            return value;
        }

        /// <summary>
        /// Intenta convertir un JSON a un objeto específico
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json">JSON</param>
        /// <param name="result">Objeto resultado</param>
        /// <param name="messages">mensajes de respuesta</param>
        /// <returns>boleano que define si fue válido a no la conversión</returns>
        public bool TryParseFromJson<T>(string json, out T result, out string messages)
        {
            result = Activator.CreateInstance<T>();
            messages = string.Empty;

            try
            {
                var jsonObj = JsonConvert.DeserializeObject(json);
                JsonSerializer serializer = new JsonSerializer();
                result = (T)serializer.Deserialize(new JTokenReader(jsonObj as JObject), typeof(T));
                return true;
            }
            catch (Exception ex)
            {
                messages = ex.Message;
                return false;
            }
        }

        /// <summary>
        /// Ejecuta una función
        /// </summary>
        /// <param name="commandString"></param>
        /// <param name="parameter"></param>
        /// <returns></returns>
        private bool InvokeFunction(string commandString, object parameter)
        {
            string functClass = "Helper";
            Type thisType = Type.GetType($"{this.GetType().Namespace}.{ functClass}");
            MethodInfo theMethod = thisType.GetMethod(commandString);
            var rst = theMethod.Invoke(this, new object[] { parameter });
            return (bool)rst;
        }
    }

    /// <summary>
    /// Provee métodos para indexar una colección de datos tipo T
    /// y realizar búsquedas más rapidas
    /// </summary>
    /// <typeparam name="T">Tipo de dato de la colección</typeparam>
    public sealed class IndexedCollection<T>
    {
        #region Fields

        /// <summary>
        /// Lista de datos no indexados
        /// </summary>
        internal IList<T> NonIndexedList;
        /// <summary>
        /// Lista de datos indexados
        /// </summary>
        internal readonly IDictionary<string, ILookup<object, T>> IndexedList;
        /// <summary>
        /// Indices
        /// </summary>
        internal readonly IList<Expression<Func<T, object>>> Indexes;

        #endregion

        #region Builders

        /// <summary>
        /// Inicializa una nueva instancia de la clase
        /// </summary>
        /// <param name="source">Fuente de datos</param>
        /// <param name="indexes">Indices usados para organizar los datos</param>
        public IndexedCollection(IEnumerable<T> source, params Expression<Func<T, object>>[] indexes)
        {
            NonIndexedList = new List<T>(source);
            IndexedList = new Dictionary<string, ILookup<object, T>>();
            Indexes = new List<Expression<Func<T, object>>>();
            BuildIndexes(indexes);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Busca un valor sobre una propiedad
        /// </summary>
        /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
        /// <param name="value">Valor a buscar</param>
        /// <returns>Conjunto de resultados</returns>
        public IndexedResult FindValue(Expression<Func<T, object>> property, object value)
        {
            return new IndexedResult(this, new List<T>()).And(property, value);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Construye los indices
        /// </summary>
        /// <param name="indexes">Indices como expresiones</param>
        private void BuildIndexes(Expression<Func<T, object>>[] indexes)
        {
            for (int i = 0; i < indexes.Length; i++)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(PropertyName(indexes[i])));
                if (IndexedList.ContainsKey(indexName))
                {
                    continue;
                }

                Indexes.Add(indexes[i]);
                IndexedList.Add(indexName, NonIndexedList.ToLookup(indexes[i].Compile()));
            }
            NonIndexedList = NonIndexedList.Except(IndexedList.SelectMany(x => x.Value).SelectMany(r => r)).ToList();
        }

        /// <summary>
        /// Obtiene el nombre de la propiedad en la expresión
        /// </summary>
        /// <param name="expression">Expresión a evaluar</param>
        /// <returns>Nombre de la propiedad en base64</returns>
        internal string PropertyName(Expression<Func<T, object>> expression)
        {
            if (!(expression.Body is MemberExpression body))
            {
                body = ((UnaryExpression)expression.Body).Operand as MemberExpression;
            }

            return body.Member.Name;
        }

        #endregion

        #region IEnumerable

        /// <summary>
        /// Obtiene una lista de la colección
        /// </summary>
        /// <returns>Lista de tipo T</returns>
        public IList<T> ToList()
        {
            List<T> res = new List<T>(NonIndexedList);
            res.AddRange(IndexedList.SelectMany(x => x.Value).SelectMany(r => r));

            return res;
        }

        #endregion

        #region Classes

        /// <summary>
        /// Encapsula un conjunto de resultados de la busqueda sobre una colección indexada
        /// </summary>
        public class IndexedResult
        {
            #region Fields

            /// <summary>
            /// Instancia a la colección de datos
            /// </summary>
            private readonly IndexedCollection<T> _indexedCollection;
            /// <summary>
            /// Conjunto de resultados
            /// </summary>
            private readonly IEnumerable<T> _resultSet;

            #endregion

            #region Builders

            /// <summary>
            /// Inicializa una nueva instancia de la clase
            /// </summary>
            /// <param name="indexedCollection">Instancia a la colección de datos</param>
            /// <param name="resultSet">Conjunto de resultados</param>
            internal IndexedResult(IndexedCollection<T> indexedCollection, IEnumerable<T> resultSet)
            {
                _indexedCollection = indexedCollection;
                _resultSet = resultSet;
            }

            #endregion

            #region Methods

            /// <summary>
            /// Retorna un subconjunto de resultados donde los elementos cumplan cualquiera de los dos criterios
            /// </summary>
            /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
            /// <param name="value">Valor a buscar</param>
            /// <returns>Subconjunto de resultados</returns>
            public IndexedResult Or(Expression<Func<T, object>> property, object value)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(_indexedCollection.PropertyName(property)));
                if (_indexedCollection.IndexedList.ContainsKey(indexName))
                {
                    return new IndexedResult(_indexedCollection, (_resultSet.Count() == 0 ? (_indexedCollection.IndexedList[indexName].Contains(value) ? _indexedCollection.IndexedList[indexName][value] : new T[0]) : (_indexedCollection.IndexedList[indexName].Contains(value) ? _resultSet.Union(_indexedCollection.IndexedList[indexName][value]) : _resultSet)));
                }

                var c = property.Compile();
                return new IndexedResult(_indexedCollection, _resultSet.Except(_indexedCollection.NonIndexedList.Where(x => c(x).Equals(value))));
            }

            /// <summary>
            /// Retorna un subconjunto de resultados donde los elementos cumplan con ambos criterios
            /// </summary>
            /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
            /// <param name="value">Valor a buscar</param>
            /// <returns>Subconjunto de resultados</returns>
            public IndexedResult And(Expression<Func<T, object>> property, object value)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(_indexedCollection.PropertyName(property)));
                if (_indexedCollection.IndexedList.ContainsKey(indexName))
                {
                    return new IndexedResult(_indexedCollection, _resultSet != null ? (_resultSet.Count() == 0 ? (_indexedCollection.IndexedList[indexName].Contains(value) ? _indexedCollection.IndexedList[indexName][value] : null) : (_indexedCollection.IndexedList[indexName].Contains(value) ? _resultSet.Intersect(_indexedCollection.IndexedList[indexName][value]) : new T[0])) : new T[0]);
                }

                var c = property.Compile();
                return new IndexedResult(_indexedCollection, _resultSet.Intersect(_indexedCollection.NonIndexedList.Where(x => c(x).Equals(value))));
            }

            #endregion

            #region IEnumerable

            /// <summary>
            /// Obtiene una lista de la colección
            /// </summary>
            /// <returns>Lista de tipo T</returns>
            public IList<T> ToList()
            {
                return _resultSet != null ? _resultSet.ToList() : new List<T>();
            }

            #endregion
        }

        #endregion
    }
    #endregion

    #region Attributes
    /// <summary>
    /// Longitud permitida
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class LengthAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public LengthAttribute(long Value) { this.Value = Value; }
    }
    /// <summary>
    /// Expresión regular a aplicar
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class RegexAttribute : Attribute
    {
        private string _Value;
        private string _Message;
        public string Value { get { return _Value; } set { _Value = value; } }
        public string Message { get { return _Message; } set { _Message = value; } }

        public RegexAttribute(string Value, string Message) { this._Value = Value; this._Message = Message; }
    }
    /// <summary>
    /// Cantidad de decimales
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class DecimalCountAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public DecimalCountAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Valor máximo
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class MaxValueAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public MaxValueAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Valor mínimo
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class MinValueAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public MinValueAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Función
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class FunctionAttribute : Attribute
    {
        private string _Value;
        public string Value { get { return _Value; } set { _Value = value; } }
        public FunctionAttribute(string Value) { this._Value = Value; }
    }
    /// <summary>
    /// Orden
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class OrderAttribute : Attribute
    {
        private readonly int order_;
        public OrderAttribute([CallerLineNumber]int order = 0)
        {
            order_ = order;
        }

        public int Order { get { return order_; } }
    }
    #endregion
}
