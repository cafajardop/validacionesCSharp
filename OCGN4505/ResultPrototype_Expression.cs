
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace OpheliaSuiteV2.BRMRuntime
{
    /// <sumary>
    /// ResultPrototype_Expression
    /// </sumary> 
    public sealed class ResultPrototype_Expression
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// CompanyId
        /// </sumary>
        private long CompanyIdLn;
        /// <sumary>
        /// OperatorId
        /// </sumary>
        private long OperatorIdLn;
        /// <sumary>
        /// LibraryId
        /// </sumary>
        private long LibraryIdLn;
        /// <sumary>
        /// TemplateId
        /// </sumary>
        private long TemplateIdLn;
        /// <sumary>
        /// FrmCodi
        /// </sumary>
        private string FrmCodiLn;
        /// <sumary>
        /// CaseNumber
        /// </sumary>
        private string CaseNumberLn;
        /// <sumary>
        /// Period
        /// </sumary>
        private long PeriodLn;
        /// <sumary>
        /// Year
        /// </sumary>
        private long YearLn;
        /// <sumary>
        /// UserCode
        /// </sumary>
        private string UserCodeLn;
        /// <sumary>
        /// FileId
        /// </sumary>
        private string FileIdLn;
        /// <sumary>
        /// IdTypePopulation
        /// </sumary>
        private long IdTypePopulationLn;
        /// <sumary>
        /// ResultMessage
        /// </sumary>
        private string ResultMessage;
        /// <sumary>
        /// Resultado Prototipo 4505
        /// </sumary>
        private bool ResultPrototype;
        #endregion

        #region Members
        /// <sumary>
        /// Fiebre Amarilla niños de 1 año
        /// </sumary>
        private readonly RUL_YellowFeverOneY RUL_YellowFeverOneY = new RUL_YellowFeverOneY();
        /// <sumary>
        /// Peso en Kilogramos
        /// </sumary>
        private readonly RUL_WeightKg RUL_WeightKg = new RUL_WeightKg();
        /// <sumary>
        /// Suministro de Vitamina A en la Última Consulta del Menor de 10 años
        /// </sumary>
        private readonly RUL_VitALastConsuUnderTenY RUL_VitALastConsuUnderTenY = new RUL_VitALastConsuUnderTenY();
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual 4505 v23
        /// </sumary>
        private readonly RUL_VictimSexViolence RUL_VictimSexViolence = new RUL_VictimSexViolence();
        /// <sumary>
        /// Tipo de registro
        /// </sumary>
        private readonly RUL_TypeRegister RUL_TypeRegister = new RUL_TypeRegister();
        /// <sumary>
        /// Triple Viral Niños
        /// </sumary>
        private readonly RUL_TriViralChild RUL_TriViralChild = new RUL_TriViralChild();
        /// <sumary>
        /// Lepra
        /// </sumary>
        private readonly RUL_TreatmentLeprosy RUL_TreatmentLeprosy = new RUL_TreatmentLeprosy();
        /// <sumary>
        /// Tratamiento para Sífilis gestacional
        /// </sumary>
        private readonly RUL_TreatmentGestationalSyphilis RUL_TreatmentGestationalSyphilis = new RUL_TreatmentGestationalSyphilis();
        /// <sumary>
        /// Tratamiento para Sífilis Congénita
        /// </sumary>
        private readonly RUL_TreatmentCongenitalSyphilis RUL_TreatmentCongenitalSyphilis = new RUL_TreatmentCongenitalSyphilis();
        /// <sumary>
        /// Tratamiento para Hipotiroidismo Congénito
        /// </sumary>
        private readonly RUL_TreatmentCongenitalHypothyroidism RUL_TreatmentCongenitalHypothyroidism = new RUL_TreatmentCongenitalHypothyroidism();
        /// <sumary>
        /// TD o TT Mujeres en Edad Fértil 15 a 49 años
        /// </sumary>
        private readonly RUL_TDorTTWomFertAge RUL_TDorTTWomFertAge = new RUL_TDorTTWomFertAge();
        /// <sumary>
        /// Sintomático Respiratorio
        /// </sumary>
        private readonly RUL_SymptRespiratory RUL_SymptRespiratory = new RUL_SymptRespiratory();
        /// <sumary>
        /// Suministro de Método Anticonceptivo
        /// </sumary>
        private readonly RUL_SupplyContracMethod RUL_SupplyContracMethod = new RUL_SupplyContracMethod();
        /// <sumary>
        /// Infecciones de Trasmisión Sexual
        /// </sumary>
        private readonly RUL_SexTransInfect RUL_SexTransInfect = new RUL_SexTransInfect();
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        private readonly RUL_SecondName RUL_SecondName = new RUL_SecondName();
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        private readonly RUL_SecondLastName RUL_SecondLastName = new RUL_SecondLastName();
        /// <sumary>
        /// Rotavirus
        /// </sumary>
        private readonly RUL_Rotavirus RUL_Rotavirus = new RUL_Rotavirus();
        /// <sumary>
        /// Resultado Serología para Sífilis
        /// </sumary>
        private readonly RUL_ResultSerologySyphilis RUL_ResultSerologySyphilis = new RUL_ResultSerologySyphilis();
        /// <sumary>
        /// Resultado de TSH Neonatal
        /// </sumary>
        private readonly RUL_ResultNeonatalTSH RUL_ResultNeonatalTSH = new RUL_ResultNeonatalTSH();
        /// <sumary>
        /// Resultado Mamografía
        /// </sumary>
        private readonly RUL_ResultMammography RUL_ResultMammography = new RUL_ResultMammography();
        /// <sumary>
        /// Resultado Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private readonly RUL_ResultHepatitisBPregnant RUL_ResultHepatitisBPregnant = new RUL_ResultHepatitisBPregnant();
        /// <sumary>
        /// Hemoglobina
        /// </sumary>
        private readonly RUL_ResultHemoglobin RUL_ResultHemoglobin = new RUL_ResultHemoglobin();
        /// <sumary>
        /// Hemoglobina Glicosilada
        /// </sumary>
        private readonly RUL_ResultGlycosylatedHemoglobin RUL_ResultGlycosylatedHemoglobin = new RUL_ResultGlycosylatedHemoglobin();
        /// <sumary>
        /// Resultado Elisa para VIH
        /// </sumary>
        private readonly RUL_ResultElisaVIH RUL_ResultElisaVIH = new RUL_ResultElisaVIH();
        /// <sumary>
        /// Creatinina
        /// </sumary>
        private readonly RUL_ResultCreatinine RUL_ResultCreatinine = new RUL_ResultCreatinine();
        /// <sumary>
        /// Citología Cervico uterina Resultados según Bethesda
        /// </sumary>
        private readonly RUL_ResultCervicalCytology RUL_ResultCervicalCytology = new RUL_ResultCervicalCytology();
        /// <sumary>
        /// Resultado de Biopsia Cervical
        /// </sumary>
        private readonly RUL_ResultCervicalBiopsy RUL_ResultCervicalBiopsy = new RUL_ResultCervicalBiopsy();
        /// <sumary>
        /// Resultado Biopsia Seno por BACAF
        /// </sumary>
        private readonly RUL_ResultBiopsyBreast RUL_ResultBiopsyBreast = new RUL_ResultBiopsyBreast();
        /// <sumary>
        /// Baciloscopia de Diagnóstico
        /// </sumary>
        private readonly RUL_ResultBacilloscopy RUL_ResultBacilloscopy = new RUL_ResultBacilloscopy();
        /// <sumary>
        /// Calidad en la Muestra de Citología Cervicouterina
        /// </sumary>
        private readonly RUL_QualityCytologySample RUL_QualityCytologySample = new RUL_QualityCytologySample();
        /// <sumary>
        /// Control Prenatal
        /// </sumary>
        private readonly RUL_PrenatalCtrl RUL_PrenatalCtrl = new RUL_PrenatalCtrl();
        /// <sumary>
        /// VPH
        /// </sumary>
        private readonly RUL_PPVPH RUL_PPVPH = new RUL_PPVPH();
        /// <sumary>
        /// BCG
        /// </sumary>
        private readonly RUL_PPBCG RUL_PPBCG = new RUL_PPBCG();
        /// <sumary>
        /// Polio
        /// </sumary>
        private readonly RUL_Polio RUL_Polio = new RUL_Polio();
        /// <sumary>
        /// Neumococo
        /// </sumary>
        private readonly RUL_Pneumococcus RUL_Pneumococcus = new RUL_Pneumococcus();
        /// <sumary>
        /// Pentavalente
        /// </sumary>
        private readonly RUL_Pentavalent RUL_Pentavalent = new RUL_Pentavalent();
        /// <sumary>
        /// Código de ocupación 4505
        /// </sumary>
        private readonly RUL_OccupationCode RUL_OccupationCode = new RUL_OccupationCode();
        /// <sumary>
        /// Obesidad o Desnutrición Proteico Calórica
        /// </sumary>
        private readonly RUL_ObesCaloProtMalnut RUL_ObesCaloProtMalnut = new RUL_ObesCaloProtMalnut();
        /// <sumary>
        /// Tuberculosis Multidrogoresistente
        /// </sumary>
        private readonly RUL_MultiDrugResisTuber RUL_MultiDrugResisTuber = new RUL_MultiDrugResisTuber();
        /// <sumary>
        /// Lepra
        /// </sumary>
        private readonly RUL_Leprosy RUL_Leprosy = new RUL_Leprosy();
        /// <sumary>
        /// Influenza Niños
        /// </sumary>
        private readonly RUL_InfluenzaChildren RUL_InfluenzaChildren = new RUL_InfluenzaChildren();
        /// <sumary>
        /// Sexo
        /// </sumary>
        private readonly RUL_IdSex RUL_IdSex = new RUL_IdSex();
        /// <sumary>
        /// Tipo de documento 
        /// </sumary>
        private readonly RUL_IdentificationType RUL_IdentificationType = new RUL_IdentificationType();
        /// <sumary>
        /// Hipertensión Inducida
        /// </sumary>
        private readonly RUL_HypertenInducPreg RUL_HypertenInducPreg = new RUL_HypertenInducPreg();
        /// <sumary>
        /// HepatitisA
        /// </sumary>
        private readonly RUL_HepatitisA RUL_HepatitisA = new RUL_HepatitisA();
        /// <sumary>
        /// Hepatitis B menores de 1 año
        /// </sumary>
        private readonly RUL_HepatBUnderOneYear RUL_HepatBUnderOneYear = new RUL_HepatBUnderOneYear();
        /// <sumary>
        /// Talla en Centímetros
        /// </sumary>
        private readonly RUL_HeightCm RUL_HeightCm = new RUL_HeightCm();
        /// <sumary>
        /// Código de habilitación IPS donde se toma Mamografía
        /// </sumary>
        private readonly RUL_HabilitationCodeMammography RUL_HabilitationCodeMammography = new RUL_HabilitationCodeMammography();
        /// <sumary>
        /// Código de habilitación IPS donde se toma Citología Cervicouterina
        /// </sumary>
        private readonly RUL_HabilitationCodeCytology RUL_HabilitationCodeCytology = new RUL_HabilitationCodeCytology();
        /// <sumary>
        /// Código de habilitación IPS donde se toma Colposcopia
        /// </sumary>
        private readonly RUL_HabilitationCodeColposcopy RUL_HabilitationCodeColposcopy = new RUL_HabilitationCodeColposcopy();
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Cervical
        /// </sumary>
        private readonly RUL_HabilitationCodeBiopsy RUL_HabilitationCodeBiopsy = new RUL_HabilitationCodeBiopsy();
        /// <sumary>
        /// Recibe codigo de habilitacion IPS
        /// </sumary>
        private readonly RUL_HabilitationCode RUL_HabilitationCode = new RUL_HabilitationCode();
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Seno por BACAF
        /// </sumary>
        private readonly RUL_HabiliationCodeBiopsyBreast RUL_HabiliationCodeBiopsyBreast = new RUL_HabiliationCodeBiopsyBreast();
        /// <sumary>
        /// Gestación
        /// </sumary>
        private readonly RUL_Gestation RUL_Gestation = new RUL_Gestation();
        /// <sumary>
        /// Sífilis Gestacional o congénita
        /// </sumary>
        private readonly RUL_GestaCongeSyphilis RUL_GestaCongeSyphilis = new RUL_GestaCongeSyphilis();
        /// <sumary>
        /// Edad Gestacional al Nacer
        /// </sumary>
        private readonly RUL_GestaAgeBorn RUL_GestaAgeBorn = new RUL_GestaAgeBorn();
        /// <sumary>
        /// Suministro de Ácido Fólico en el Último Control Prenatal
        /// </sumary>
        private readonly RUL_FolicAcidLastPrenaCtrl RUL_FolicAcidLastPrenaCtrl = new RUL_FolicAcidLastPrenaCtrl();
        /// <sumary>
        /// Primer Nombre
        /// </sumary>
        private readonly RUL_FirstName RUL_FirstName = new RUL_FirstName();
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private readonly RUL_FirstLastName RUL_FirstLastName = new RUL_FirstLastName();
        /// <sumary>
        /// Suministro de Sulfato Ferroso en el Último Control Prenatal
        /// </sumary>
        private readonly RUL_FerrSulfLastPrenaCtrl RUL_FerrSulfLastPrenaCtrl = new RUL_FerrSulfLastPrenaCtrl();
        /// <sumary>
        /// Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años
        /// </sumary>
        private readonly RUL_FerrSulfLastConsuUnderTenY RUL_FerrSulfLastConsuUnderTenY = new RUL_FerrSulfLastConsuUnderTenY();
        /// <sumary>
        /// Fecha salida de la atención del parto o cesárea
        /// </sumary>
        private readonly RUL_ExitDateAttenPartiCesar RUL_ExitDateAttenPartiCesar = new RUL_ExitDateAttenPartiCesar();
        /// <sumary>
        /// Fecha de Terminación Tratamiento para Leishmaniasis
        /// </sumary>
        private readonly RUL_EndDateTreatmentLeishmaniasis RUL_EndDateTreatmentLeishmaniasis = new RUL_EndDateTreatmentLeishmaniasis();
        /// <sumary>
        /// DPT menores de 5 años
        /// </sumary>
        private readonly RUL_DPTUnderFiveYears RUL_DPTUnderFiveYears = new RUL_DPTUnderFiveYears();
        /// <sumary>
        /// Enfermedad Mental
        /// </sumary>
        private readonly RUL_DiagMentalIllness RUL_DiagMentalIllness = new RUL_DiagMentalIllness();
        /// <sumary>
        /// Fluorosis Dental
        /// </sumary>
        private readonly RUL_DentalFluorosis RUL_DentalFluorosis = new RUL_DentalFluorosis();
        /// <sumary>
        /// Consulta de Joven Primera vez
        /// </sumary>
        private readonly RUL_DateYoungConsuFirstTime RUL_DateYoungConsuFirstTime = new RUL_DateYoungConsuFirstTime();
        /// <sumary>
        /// Fecha del peso
        /// </sumary>
        private readonly RUL_DateWeight RUL_DateWeight = new RUL_DateWeight();
        /// <sumary>
        /// Valoración de la Agudeza Visual
        /// </sumary>
        private readonly RUL_DateVisualAssessment RUL_DateVisualAssessment = new RUL_DateVisualAssessment();
        /// <sumary>
        /// Fecha Serología para Sífilis
        /// </sumary>
        private readonly RUL_DateSerologySyphilis RUL_DateSerologySyphilis = new RUL_DateSerologySyphilis();
        /// <sumary>
        /// Fecha Resultado Biopsia Seno por BACAF
        /// </sumary>
        private readonly RUL_DateResultBreastBiopsy RUL_DateResultBreastBiopsy = new RUL_DateResultBreastBiopsy();
        /// <sumary>
        /// Consulta de Psicología
        /// </sumary>
        private readonly RUL_DatePsychologyConsult RUL_DatePsychologyConsult = new RUL_DatePsychologyConsult();
        /// <sumary>
        /// Asesoría Pre test Elisa para VIH
        /// </sumary>
        private readonly RUL_DatePreTestElisaVIH RUL_DatePreTestElisaVIH = new RUL_DatePreTestElisaVIH();
        /// <sumary>
        /// Asesoría Pos test Elisa para VIH
        /// </sumary>
        private readonly RUL_DatePostTestElisaVIH RUL_DatePostTestElisaVIH = new RUL_DatePostTestElisaVIH();
        /// <sumary>
        /// Consulta Nutrición
        /// </sumary>
        private readonly RUL_DateNutritionConsult RUL_DateNutritionConsult = new RUL_DateNutritionConsult();
        /// <sumary>
        /// Control Recién Nacido
        /// </sumary>
        private readonly RUL_DateNewbornCtrl RUL_DateNewbornCtrl = new RUL_DateNewbornCtrl();
        /// <sumary>
        /// Fecha TSH Neonatal
        /// </sumary>
        private readonly RUL_DateNeonatalTSH RUL_DateNeonatalTSH = new RUL_DateNeonatalTSH();
        /// <sumary>
        /// Fecha Toma de Microalbuminuria
        /// </sumary>
        private readonly RUL_DateMicroalbuminuria RUL_DateMicroalbuminuria = new RUL_DateMicroalbuminuria();
        /// <sumary>
        /// Fecha Mamografía
        /// </sumary>
        private readonly RUL_DateMammography RUL_DateMammography = new RUL_DateMammography();
        /// <sumary>
        /// Último Control Prenatal
        /// </sumary>
        private readonly RUL_DateLastPrenatalCtrl RUL_DateLastPrenatalCtrl = new RUL_DateLastPrenatalCtrl();
        /// <sumary>
        /// Fecha Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private readonly RUL_DateHepatitisBPregnant RUL_DateHepatitisBPregnant = new RUL_DateHepatitisBPregnant();
        /// <sumary>
        /// Fecha Toma de Hemoglobina
        /// </sumary>
        private readonly RUL_DateHemoglobin RUL_DateHemoglobin = new RUL_DateHemoglobin();
        /// <sumary>
        /// Fecha de la Talla
        /// </sumary>
        private readonly RUL_DateHeight RUL_DateHeight = new RUL_DateHeight();
        /// <sumary>
        /// Fecha Toma de HDL
        /// </sumary>
        private readonly RUL_DateHDL RUL_DateHDL = new RUL_DateHDL();
        /// <sumary>
        /// Consulta de Crecimiento y Desarrollo Primera vez
        /// </sumary>
        private readonly RUL_DateGrowthDev RUL_DateGrowthDev = new RUL_DateGrowthDev();
        /// <sumary>
        /// Fecha Hemoglobina Glicosilada
        /// </sumary>
        private readonly RUL_DateGlycosylatedHemoglobin RUL_DateGlycosylatedHemoglobin = new RUL_DateGlycosylatedHemoglobin();
        /// <sumary>
        /// Fecha de la Toma de Glicemia Basal
        /// </sumary>
        private readonly RUL_DateGlycemia RUL_DateGlycemia = new RUL_DateGlycemia();
        /// <sumary>
        /// Control Prenatal de Primera vez
        /// </sumary>
        private readonly RUL_DateFirstTimePrenaCtrl RUL_DateFirstTimePrenaCtrl = new RUL_DateFirstTimePrenaCtrl();
        /// <sumary>
        /// Planificación Familiar Primera vez
        /// </sumary>
        private readonly RUL_DateFamiPlanFirstTime RUL_DateFamiPlanFirstTime = new RUL_DateFamiPlanFirstTime();
        /// <sumary>
        /// Fecha Probable de Parto
        /// </sumary>
        private readonly RUL_DateEstimPartitium RUL_DateEstimPartitium = new RUL_DateEstimPartitium();
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private readonly RUL_DateElisaTakingVIH RUL_DateElisaTakingVIH = new RUL_DateElisaTakingVIH();
        /// <sumary>
        /// Fecha Diagnóstico Desnutrición Proteico Calórica
        /// </sumary>
        private readonly RUL_DateDiagMalnutrition RUL_DateDiagMalnutrition = new RUL_DateDiagMalnutrition();
        /// <sumary>
        /// Fecha Creatinina
        /// </sumary>
        private readonly RUL_DateCreatinine RUL_DateCreatinine = new RUL_DateCreatinine();
        /// <sumary>
        /// Fecha Suministro de Método Anticonceptivo
        /// </sumary>
        private readonly RUL_DateContracDelivery RUL_DateContracDelivery = new RUL_DateContracDelivery();
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual
        /// </sumary>
        private readonly RUL_DateConsuVictSexViolence RUL_DateConsuVictSexViolence = new RUL_DateConsuVictSexViolence();
        /// <sumary>
        /// Consulta Mujer o Menor Víctima del Maltrato
        /// </sumary>
        private readonly RUL_DateConsuVictimAbuse RUL_DateConsuVictimAbuse = new RUL_DateConsuVictimAbuse();
        /// <sumary>
        /// Consulta por Oftalmología
        /// </sumary>
        private readonly RUL_Dateconsultophthalm RUL_Dateconsultophthalm = new RUL_Dateconsultophthalm();
        /// <sumary>
        /// Fecha Colposcopia
        /// </sumary>
        private readonly RUL_DateColposcopy RUL_DateColposcopy = new RUL_DateColposcopy();
        /// <sumary>
        /// Citología Cervico uterina
        /// </sumary>
        private readonly RUL_DateCervicalCytology RUL_DateCervicalCytology = new RUL_DateCervicalCytology();
        /// <sumary>
        /// Fecha Biopsia Cervical
        /// </sumary>
        private readonly RUL_DateCervicalBiopsy RUL_DateCervicalBiopsy = new RUL_DateCervicalBiopsy();
        /// <sumary>
        /// Fecha de consejería en Lactancia Materna
        /// </sumary>
        private readonly RUL_DateBreastfeeding RUL_DateBreastfeeding = new RUL_DateBreastfeeding();
        /// <sumary>
        /// Fecha Toma Biopsia Seno por BACAF
        /// </sumary>
        private readonly RUL_DateBreastBiopsyBACAF RUL_DateBreastBiopsyBACAF = new RUL_DateBreastBiopsyBACAF();
        /// <sumary>
        /// Tratamiento para Sífilis gestacional
        /// </sumary>
        private readonly RUL_DateBacilloscopy RUL_DateBacilloscopy = new RUL_DateBacilloscopy();
        /// <sumary>
        /// Fecha atención parto o cesárea
        /// </sumary>
        private readonly RUL_DateAttenPartiCesar RUL_DateAttenPartiCesar = new RUL_DateAttenPartiCesar();
        /// <sumary>
        /// consulta adulto primera vez
        /// </sumary>
        private readonly RUL_DateAdultConsuFirstTime RUL_DateAdultConsuFirstTime = new RUL_DateAdultConsuFirstTime();
        /// <sumary>
        /// Hipotiroidismo Congénito
        /// </sumary>
        private readonly RUL_CongeHypothyroidism RUL_CongeHypothyroidism = new RUL_CongeHypothyroidism();
        /// <sumary>
        /// Preservativos entregados a pacientes con ITS
        /// </sumary>
        private readonly RUL_CondomDelivPatientITS RUL_CondomDelivPatientITS = new RUL_CondomDelivPatientITS();
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        private readonly RUL_CodeEthnic RUL_CodeEthnic = new RUL_CodeEthnic();
        /// <sumary>
        /// Nivel de Educación
        /// </sumary>
        private readonly RUL_CodeEducaLevel RUL_CodeEducaLevel = new RUL_CodeEducaLevel();
        /// <sumary>
        /// Cáncer de Cérvix
        /// </sumary>
        private readonly RUL_CervixCancer RUL_CervixCancer = new RUL_CervixCancer();
        /// <sumary>
        /// Tamizaje Cáncer de Cuello Uterino
        /// </sumary>
        private readonly RUL_CervicalCancerScreening RUL_CervicalCancerScreening = new RUL_CervicalCancerScreening();
        /// <sumary>
        /// Suministro de Carbonato de Calcio en el Último Control Prenatal
        /// </sumary>
        private readonly RUL_CalciumLastPrenaCtrl RUL_CalciumLastPrenaCtrl = new RUL_CalciumLastPrenaCtrl();
        /// <sumary>
        /// Cáncer de Seno
        /// </sumary>
        private readonly RUL_BreastCancer RUL_BreastCancer = new RUL_BreastCancer();
        /// <sumary>
        /// Fecha de nacimiento del usuario
        /// </sumary>
        private readonly RUL_BirthDate RUL_BirthDate = new RUL_BirthDate();
        /// <sumary>
        /// Control de Placa Bacteriana
        /// </sumary>
        private readonly RUL_BactPlateCtrl RUL_BactPlateCtrl = new RUL_BactPlateCtrl();
        /// <sumary>
        /// Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo
        /// </sumary>
        private readonly RUL_AttentMentalIllness RUL_AttentMentalIllness = new RUL_AttentMentalIllness();
        /// <sumary>
        /// Víctima de Maltrato
        /// </sumary>
        private readonly RUL_AbuseVictim RUL_AbuseVictim = new RUL_AbuseVictim();
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public ResultPrototype_Expression() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// ResultPrototype_Expression
        /// </sumary>
        /// <param name="CompanyIdLn">CompanyId</param>
        /// <param name="OperatorIdLn">OperatorId</param>
        /// <param name="LibraryIdLn">LibraryId</param>
        /// <param name="TemplateIdLn">TemplateId</param>
        /// <param name="FrmCodiLn">FrmCodi</param>
        /// <param name="CaseNumberLn">CaseNumber</param>
        /// <param name="PeriodLn">Period</param>
        /// <param name="YearLn">Year</param>
        /// <param name="UserCodeLn">UserCode</param>
        /// <param name="FileIdLn">FileId</param>
        /// <param name="IdTypePopulationLn">IdTypePopulation</param>
        public RuntimeResult<bool> Execute(long CompanyIdLn, long OperatorIdLn, long LibraryIdLn, long TemplateIdLn, string FrmCodiLn, string CaseNumberLn, long PeriodLn, long YearLn, string UserCodeLn, string FileIdLn, long IdTypePopulationLn)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.CompanyIdLn = CompanyIdLn;
                this.OperatorIdLn = OperatorIdLn;
                this.LibraryIdLn = LibraryIdLn;
                this.TemplateIdLn = TemplateIdLn;
                this.FrmCodiLn = FrmCodiLn;
                this.CaseNumberLn = CaseNumberLn;
                this.PeriodLn = PeriodLn;
                this.YearLn = YearLn;
                this.UserCodeLn = UserCodeLn;
                this.FileIdLn = FileIdLn;
                this.IdTypePopulationLn = IdTypePopulationLn;
                this.ResultMessage = FUNC_ResultMessage();
                this.ResultPrototype = FUNC_ResultPrototype();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<bool>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private string FUNC_ResultMessage()
        {
            return "";
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_ResultPrototype()
        {
            ENT_parameters4505 parameters4505 = new ENT_parameters4505()
            {
                CompanyId = CompanyIdLn,
                OperatorId = OperatorIdLn,
                LibraryId = LibraryIdLn,
                TemplateId = TemplateIdLn,
                FrmCodi = FrmCodiLn,
                CaseNumber = CaseNumberLn,
                Period = PeriodLn,
                Year = YearLn,
                UserCode = UserCodeLn,
                FileId = FileIdLn,
                IdTypePopulation = IdTypePopulationLn,
            };

            var result = Helper.USR_Main4505(parameters4505);
            if (result.IsError)
            {
                this.FileName = result.FileName;
                this.ResultMessage = result.ErrorMessage;
                return false;
            }

            string[] data = result.FileName.Split(',');
            string head = data[1];
            string[] splitHead = head.Split('|');
            string DateInit = splitHead[2];
            string DateEnd = splitHead[3];
            string nameArchiveYear = data[0].Substring(10, 4);
            string nameArchiveMonth = data[0].Substring(14, 2);

            //Valida que las fechas del archivos sean validas
            if (Helper.USR_ValidateTypeDate(DateInit) != true || string.IsNullOrEmpty(DateInit)) { throw new ArgumentException($"El campo fecha inicial del archivo cargado {DateInit} no es valido"); }
            if (Helper.USR_ValidateTypeDate(DateEnd) != true || string.IsNullOrEmpty(DateEnd)) { throw new ArgumentException($"El campo fecha final del archivo cargado {DateEnd} no es valido"); }

            //Valida que el periodo sea correcto
            List<dynamic> dateslist = new List<dynamic>();
            bool respValidate = Helper.USR_ValidatesMonth4505(parameters4505.Period, dateslist);

            if (!respValidate) { throw new ArgumentException($"El periodo de Cargue {parameters4505.Period} no es valido  debe ser entre (1 a 4)"); }
            if (!(dateslist.Contains(DateInit.Substring(5, 2)) && dateslist.Contains(DateEnd.Substring(5, 2)))) { throw new ArgumentException($"El periodo reportado en el archivo es diferente al seleccionado"); }
            if (parameters4505.Year.ToString() != DateInit.Substring(0, 4)) { throw new ArgumentException($"El Año reportado en el archivo FechaInicial es: {DateInit.Substring(0, 4)} y el seleccionado es: {parameters4505.Year.ToString()} debe seleccionar el mismo año"); }
            if (parameters4505.Year.ToString() != DateEnd.Substring(0, 4)) { throw new ArgumentException($"El Año reportado en el archivo FechaFinal es: {DateEnd.Substring(0, 4)} y el seleccionado es: {parameters4505.Year.ToString()} debe seleccionar el mismo año"); }
            if (result.Result.Count == 0) throw new ArgumentException($"El archivo no contiene registros a esta incorrecto favor validar");
            if (!(string.Concat(nameArchiveYear, "-", nameArchiveMonth).Equals(DateEnd.Substring(0, 7)))) throw new ArgumentException($"La fecha del nombre del archivo no corresponde al periodo reportado");

            //Nombre de archivo Head
            string Filename = result.FileName;

            int adapterId = 1;
            #region Valida Tipo de poblacion
            var sql = new StringBuilder();

            sql.Append(" SELECT Id ");
            sql.Append(" FROM TypeDetail WITH(NOLOCK)");
            sql.Append(" WHERE IdTypeHead = 72");
            sql.AppendFormat(" AND  Code = {0} ", parameters4505.IdTypePopulation);

            var resultTypepopulation = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (!resultTypepopulation.IsSuccessful)
            {
                this.FileName = resultTypepopulation.FileName;
                this.ResultMessage = resultTypepopulation.ErrorMessage;
                return false;
            }
            dynamic idtypepopulation = JsonConvert.DeserializeObject<dynamic>(resultTypepopulation.Result.ToString());
            int info = 0;
            if (idtypepopulation != null && idtypepopulation.Count > 0)
                info = (int)((JProperty)((JContainer)((JContainer)idtypepopulation).First).First).Value;
            else
            {
                this.ResultMessage = "Id tipo de poblacion invalido";
                return false;
            }

            #endregion

            #region ValidaTipoOperador
            sql = new StringBuilder();

            sql.Append(" SELECT Id ");
            sql.Append(" FROM Operator WITH(NOLOCK)");
            sql.AppendFormat(" WHERE  Id = {0} ", parameters4505.OperatorId);

            var resultIdOperator = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (!resultIdOperator.IsSuccessful)
            {
                this.FileName = resultIdOperator.FileName;
                this.ResultMessage = resultIdOperator.ErrorMessage;
                return false;
            }
            var _idOperator = JsonConvert.DeserializeObject<List<dynamic>>(resultIdOperator.Result.ToString());

            if (_idOperator.Count() == 0)
            {
                this.ResultMessage = "Id operador invalido";
                return false;
            }

            #endregion

            #region Validate Dates
            sql = new StringBuilder();

            sql.Append(" SELECT IdOperator,ConsecutiveFile");
            sql.Append(" FROM FileHead4505 WITH(NOLOCK)");
            sql.AppendFormat(" WHERE InitialDate = CONVERT(datetime,'{0}',121)", DateInit);
            sql.AppendFormat(" AND EndDate = CONVERT(datetime,'{0}',121)", DateEnd);
            sql.AppendFormat(" AND  IdOperator = {0} ", parameters4505.OperatorId);
            sql.AppendFormat(" AND  ConsecutiveFile = {0} ", Filename.Substring(33, 2));
            sql.AppendFormat(" AND IdTypePopulation = {0}", info);

            var resultExecute = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

            if (resultExecute.IsError)
            {
                this.ResultMessage = resultExecute.ErrorMessage;
                return false;
            }

            var _head = JsonConvert.DeserializeObject<List<dynamic>>(resultExecute.Result.ToString());
            int consecutiveNow = Convert.ToInt32(Filename.Substring(33, 2));
            int consecutiveHead = _head.Count.Equals(0) ? 0 : (int)_head[0].ConsecutiveFile;

            if (_head != null && _head.Count() > 0)
            {
                if (consecutiveNow - consecutiveHead == 0)
                {
                    this.ResultMessage = "Ya existe un Cargue para este periodo";
                    return false;
                }
                if (consecutiveNow - consecutiveHead != 1)
                {
                    this.ResultMessage = "Consecutivo del nombre del archivo no sigue el orden establecido";
                    return false;
                }
            }
            #endregion

            var entity = result.Result;
            List<ENT_StructureRes4505En> _entity = entity;
            var listErrors = new List<string>();

            const string folder = "Resolucion4505Data";
            int index = 0;

            sql = new StringBuilder();

            // consulta todo los operadores  para validar en memoria
            sql.Append(" SELECT DISTINCT  QualificationCode");
            sql.Append(" FROM Operator WITH(NOLOCK)");
            sql.Append("where IdOperatorType = 70");

            var operatorResul = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

            if (operatorResul.IsError)
            {
                this.FileName = operatorResul.FileName;
                this.ResultMessage = operatorResul.ErrorMessage;
                return false;
            }
            var listaQualification = JsonConvert.DeserializeObject<List<dynamic>>(operatorResul.Result.ToString());

            //Consulta la tabla typedetail para rendimiento optimo
            sql = new StringBuilder();
            sql.Append("SELECT DISTINCT Code  ");
            sql.Append("FROM TypeDetail WITH (NOLOCK)");
            sql.Append("WHERE IdTypeHead=17");

            var codeMunicipalyResul = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());

            if (codeMunicipalyResul.IsError)
            {
                this.FileName = codeMunicipalyResul.FileName;
                this.ResultMessage = codeMunicipalyResul.ErrorMessage;
                return false;
            }
            var listaCodeMunicipaly = JsonConvert.DeserializeObject<List<dynamic>>(codeMunicipalyResul.Result.ToString());

            //Consulta los codigos de ocupacion typedetail
            sql = new StringBuilder();
            sql.Append("SELECT DISTINCT Code ");
            sql.Append("FROM TypeDetail WITH (NOLOCK)");
            sql.Append("WHERE IdTypeHead = 56");

            var occupationCode = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (occupationCode.IsError)
            {
                this.FileName = occupationCode.FileName;
                this.ResultMessage = occupationCode.ErrorMessage;
                return false;
            }
            var listOccupationCode = JsonConvert.DeserializeObject<List<dynamic>>(occupationCode.Result.ToString());

            //Consulta y valida el tipo de poblacion
            sql = new StringBuilder();
            sql.Append(" SELECT Id FROM TypeDetail WITH(NOLOCK)");
            sql.AppendFormat(" WHERE Code = {0} AND IdTypeHead = 72", parameters4505.IdTypePopulation);

            var population = Helper.SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (population.IsError)
            {
                this.FileName = population.FileName;
                this.ResultMessage = population.ErrorMessage;
                return false;
            }
            var typePopulation = JsonConvert.DeserializeObject<List<dynamic>>(population.Result.ToString());

            if (typePopulation == null || typePopulation.Count == 0)
            {
                this.ResultMessage = "El tipo de IPS del afiliado no existe";
                return false;
            }

            //Valida si el usuario existe en la BD 
            var documentTypes = Helper.USR_GetDocumentTypes(adapterId);
            var listDocumentTypesDB = JsonConvert.DeserializeObject<List<dynamic>>(documentTypes.Result.ToString());
            Helper.USR_ValidateDocumentNumber4505(adapterId, _entity, listErrors, index, listDocumentTypesDB, info);

            index = 0;
            foreach (var ent in _entity)
            {
                var CutOffDate = DateTime.Now;
                var InitialDate = Convert.ToDateTime(DateInit);
                var EndDate = Convert.ToDateTime(DateEnd);
                //Valida Codigos de habilitacion existentes en la BD  -  Codigos de Ocupacion 
                Helper.USR_FieldsValidate4505(listErrors, index, listaQualification, listOccupationCode, ent);

                //Ejecuta las reglas del BRM
                var res = Helper.SYS_VerificationPrototype(new Func<object>[]
                {
                     () => RUL_TypeRegister.Execute(Convert.ToInt32(ent.TypeRegister)),
                     () => RUL_HabilitationCode.Execute(ent.HabilitationCode),
                     () => RUL_IdentificationType.Execute(ent.IdentificationType),
                     () => RUL_FirstLastName.Execute(ent.FirstLastName),
                     () => RUL_SecondLastName.Execute(ent.SecondLastName),
                     () => RUL_FirstName.Execute(ent.FirstName),
                     () => RUL_SecondName.Execute(ent.SecondName),
                     () => RUL_BirthDate.Execute(Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_IdSex.Execute(ent.IdSex),
                     () => RUL_CodeEthnic.Execute(Convert.ToInt32(ent.CodeEthnic)),
                     () => RUL_OccupationCode.Execute(ent.OccupationCode),
                     () => RUL_CodeEducaLevel.Execute(Convert.ToInt32(ent.CodeEducaLevel)),
                     () => RUL_Gestation.Execute(Convert.ToInt32(ent.Gestation),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_GestaCongeSyphilis.Execute(Convert.ToInt32(ent.GestaCongeSyphilis),ent.IdSex,Convert.ToInt32(ent.Gestation),Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.SexTransInfect)),
                     () => RUL_HypertenInducPreg.Execute(Convert.ToInt32(ent.HypertenInducPreg),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.Gestation)),
                     () => RUL_CongeHypothyroidism.Execute(Convert.ToInt32(ent.CongeHypothyroidism),Convert.ToInt32(ent.ResultNeonatalTSH),Convert.ToInt32(ent.TreatmentCongenitalHypothyroidism),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_SymptRespiratory.Execute(Convert.ToInt32(ent.SymptRespiratory),Convert.ToInt32(ent.ResultBacilloscopy)),
                     () => RUL_MultiDrugResisTuber.Execute(Convert.ToInt32(ent.MultiDrugResisTuber)),
                     () => RUL_Leprosy.Execute(Convert.ToInt32(ent.Leprosy),Convert.ToInt32(ent.TreatmentLeprosy)),
                     () => RUL_ObesCaloProtMalnut.Execute(Convert.ToInt32(ent.ObesCaloProtMalnut),Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToDateTime(ent.DateDiagMalnutrition),Convert.ToDouble(ent.WeightKg),Convert.ToInt32(ent.HeightCm)),
                     () => RUL_AbuseVictim.Execute(Convert.ToInt32(ent.AbuseVictim),ent.IdSex,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateConsuVictimAbuse),CutOffDate),
                     () => RUL_VictimSexViolence.Execute(Convert.ToInt32(ent.VictimSexViolence),Convert.ToDateTime(ent.DateConsuVictSexViolence)),
                     () => RUL_SexTransInfect.Execute(Convert.ToInt32(ent.SexTransInfect)),
                     () => RUL_DiagMentalIllness.Execute(Convert.ToInt32(ent.DiagMentalIllness)),
                     () => RUL_CervixCancer.Execute(Convert.ToInt32(ent.CervixCancer),ent.IdSex),
                     () => RUL_BreastCancer.Execute(Convert.ToInt32(ent.BreastCancer)),
                     () => RUL_DentalFluorosis.Execute(Convert.ToInt32(ent.DentalFluorosis)),
                     () => RUL_DateWeight.Execute(Convert.ToDateTime(ent.DateWeight),InitialDate,EndDate,Convert.ToDouble(ent.WeightKg)),
                     () => RUL_WeightKg.Execute(Convert.ToDouble(ent.WeightKg),Convert.ToDateTime(ent.DateWeight)),
                     () => RUL_DateHeight.Execute(Convert.ToDateTime(ent.DateHeight),InitialDate,EndDate,Convert.ToDouble(ent.HeightCm)),
                     () => RUL_HeightCm.Execute(Convert.ToDouble(ent.HeightCm),Convert.ToDateTime(ent.DateHeight)),
                     () => RUL_DateEstimPartitium.Execute(InitialDate,CutOffDate,Convert.ToDateTime(ent.DateEstimPartitium),Convert.ToDateTime(ent.BirthDate),ent.IdSex,Convert.ToInt32(ent.Gestation),Convert.ToDateTime(ent.DateFirstTimePrenaCtrl)),
                     () => RUL_GestaAgeBorn.Execute(Convert.ToInt32(ent.GestaAgeBorn),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_PPBCG.Execute(Convert.ToInt32(ent.BCG),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_HepatBUnderOneYear.Execute(Convert.ToInt32(ent.HepatBUnderOneYear),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_Pentavalent.Execute(Convert.ToInt32(ent.Pentavalent),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_Polio.Execute(Convert.ToInt32(ent.Polio),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DPTUnderFiveYears.Execute(Convert.ToInt32(ent.DPTUnderFiveYears),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_Rotavirus.Execute(Convert.ToInt32(ent.Rotavirus),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_Pneumococcus.Execute(Convert.ToInt32(ent.Pneumococcus),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_InfluenzaChildren.Execute(Convert.ToInt32(ent.InfluenzaChildren),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_YellowFeverOneY.Execute(Convert.ToInt32(ent.YellowFeverOneY),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_HepatitisA.Execute(Convert.ToInt32(ent.HepatitisA),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_TriViralChild.Execute(Convert.ToInt32(ent.TriViralChild),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_PPVPH.Execute(Convert.ToInt32(ent.VPH),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_TDorTTWomFertAge.Execute(Convert.ToInt32(ent.TDorTTWomFertAge),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_BactPlateCtrl.Execute(Convert.ToInt32(ent.BactPlateCtrl),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateAttenPartiCesar.Execute(Convert.ToDateTime(ent.DateAttenPartiCesar),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,InitialDate,Convert.ToInt32(ent.Gestation)),
                     () => RUL_ExitDateAttenPartiCesar.Execute(Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToDateTime(ent.ExitDateAttenPartiCesar),ent.IdSex,Convert.ToDateTime(ent.DateAttenPartiCesar)),
                     () => RUL_DateBreastfeeding.Execute(CutOffDate,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateBreastfeeding),InitialDate,ent.IdSex),
                     () => RUL_DateNewbornCtrl.Execute(InitialDate,CutOffDate,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateNewbornCtrl)),
                     () => RUL_DateFamiPlanFirstTime.Execute(InitialDate,CutOffDate,Convert.ToDateTime(ent.BirthDate),Convert.ToDateTime(ent.DateFamiPlanFirstTime)),
                     () => RUL_SupplyContracMethod.Execute(Convert.ToInt32(ent.SupplyContracMethod),Convert.ToDateTime(ent.DateContracDelivery),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateContracDelivery.Execute(Convert.ToDateTime(ent.DateContracDelivery),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateFirstTimePrenaCtrl.Execute(Convert.ToDateTime(ent.DateFirstTimePrenaCtrl),ent.IdSex,Convert.ToDateTime(ent.BirthDate),Convert.ToInt32(ent.Gestation),CutOffDate,Convert.ToDateTime(ent.DateLastPrenatalCtrl)),
                     () => RUL_PrenatalCtrl.Execute(Convert.ToInt32(ent.PrenatalCtrl),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.Gestation)),
                     () => RUL_DateLastPrenatalCtrl.Execute(Convert.ToDateTime(ent.DateLastPrenatalCtrl),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,InitialDate,Convert.ToInt32(ent.Gestation),Convert.ToDateTime(ent.DateFirstTimePrenaCtrl)),
                     () => RUL_FolicAcidLastPrenaCtrl.Execute(Convert.ToInt32(ent.FolicAcidLastPrenaCtrl),Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.Gestation),ent.IdSex),
                     () => RUL_FerrSulfLastPrenaCtrl.Execute(Convert.ToInt32(ent.FerrSulfLastPrenaCtrl),Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.Gestation),ent.IdSex),
                     () => RUL_CalciumLastPrenaCtrl.Execute(Convert.ToInt32(ent.CalciumLastPrenaCtrl),Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.Gestation),ent.IdSex),
                     () => RUL_DateVisualAssessment.Execute(Convert.ToDateTime(ent.DateVisualAssessment),InitialDate,EndDate),
                     () => RUL_Dateconsultophthalm.Execute(Convert.ToDateTime(ent.DateConsultOphthalm),Convert.ToDateTime(ent.BirthDate),InitialDate,EndDate),
                     () => RUL_DateDiagMalnutrition.Execute(Convert.ToDateTime(ent.DateDiagMalnutrition),Convert.ToInt32(ent.ObesCaloProtMalnut),Convert.ToDouble(ent.WeightKg),Convert.ToDouble(ent.HeightCm),InitialDate,EndDate),
                     () => RUL_DateConsuVictimAbuse.Execute(Convert.ToDateTime(ent.DateConsuVictimAbuse),InitialDate,EndDate),
                     () => RUL_DateConsuVictSexViolence.Execute(Convert.ToDateTime(ent.DateConsuVictSexViolence),InitialDate,EndDate),
                     () => RUL_DateNutritionConsult.Execute(Convert.ToDateTime(ent.DateNutritionConsult),InitialDate,CutOffDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_DatePsychologyConsult.Execute(Convert.ToDateTime(ent.DatePsychologyConsult),InitialDate,EndDate),
                     () => RUL_DateGrowthDev.Execute(Convert.ToDateTime(ent.DateGrowthDev),CutOffDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_FerrSulfLastConsuUnderTenY.Execute(Convert.ToInt32(ent.FerrSulfLastConsuUnderTenY),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_VitALastConsuUnderTenY.Execute(Convert.ToInt32(ent.VitALastConsuUnderTenY),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateYoungConsuFirstTime.Execute(Convert.ToDateTime(ent.DateYoungConsuFirstTime),InitialDate,CutOffDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_DateAdultConsuFirstTime.Execute(Convert.ToDateTime(ent.DateAdultConsuFirstTime),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_CondomDelivPatientITS.Execute(Convert.ToInt32(ent.CondomDelivPatientITS)),
                     () => RUL_DatePreTestElisaVIH.Execute(Convert.ToDateTime(ent.DatePreTestElisaVIH),Convert.ToInt32(ent.ResultElisaVIH),Convert.ToDateTime(ent.BirthDate),CutOffDate,InitialDate,Convert.ToDateTime(ent.DatePostTestElisaVIH),Convert.ToDateTime(ent.DateElisaTakingVIH)),
                     () => RUL_DatePostTestElisaVIH.Execute(Convert.ToDateTime(ent.DatePostTestElisaVIH),Convert.ToDateTime(ent.DatePreTestElisaVIH),Convert.ToInt32(ent.ResultElisaVIH),Convert.ToDateTime(ent.BirthDate),CutOffDate,InitialDate,Convert.ToDateTime(ent.DateElisaTakingVIH)),
                     () => RUL_AttentMentalIllness.Execute(Convert.ToInt32(ent.AttentMentalIllness),Convert.ToInt32(ent.DiagMentalIllness)),
                     () => RUL_DateHepatitisBPregnant.Execute(Convert.ToDateTime(ent.DateHepatitisBPregnant),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.Gestation),Convert.ToInt32(ent.ResultHepatitisBPregnant)),
                     () => RUL_ResultHepatitisBPregnant.Execute(Convert.ToInt32(ent.ResultHepatitisBPregnant),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.Gestation),Convert.ToDateTime(ent.DateHepatitisBPregnant)),
                     () => RUL_DateSerologySyphilis.Execute(Convert.ToInt32(ent.ResultSerologySyphilis),Convert.ToDateTime(ent.DateSerologySyphilis)),
                     () => RUL_ResultSerologySyphilis.Execute(Convert.ToInt32(ent.ResultSerologySyphilis),Convert.ToDateTime(ent.DateSerologySyphilis)),
                     () => RUL_DateElisaTakingVIH.Execute(Convert.ToDateTime(ent.DateElisaTakingVIH),Convert.ToInt32(ent.ResultElisaVIH),Convert.ToDateTime(ent.DatePreTestElisaVIH),Convert.ToDateTime(ent.DatePostTestElisaVIH),CutOffDate,InitialDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_ResultElisaVIH.Execute(Convert.ToInt32(ent.ResultElisaVIH),Convert.ToDateTime(ent.DateElisaTakingVIH)),
                     () => RUL_DateNeonatalTSH.Execute(Convert.ToDateTime(ent.DateNeonatalTSH),InitialDate,CutOffDate,Convert.ToDateTime(ent.BirthDate),Convert.ToInt32(ent.ResultNeonatalTSH)),
                     () => RUL_ResultNeonatalTSH.Execute(Convert.ToInt32(ent.ResultNeonatalTSH),Convert.ToDateTime(ent.DateNeonatalTSH)),
                     () => RUL_CervicalCancerScreening.Execute(Convert.ToInt32(ent.CervicalCancerScreening),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateCervicalCytology.Execute(Convert.ToDateTime(ent.DateCervicalCytology),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.ResultCervicalCytology),InitialDate),
                     () => RUL_ResultCervicalCytology.Execute(Convert.ToInt32(ent.ResultCervicalCytology),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToDateTime(ent.DateCervicalCytology)),
                     () => RUL_QualityCytologySample.Execute(Convert.ToInt32(ent.QualityCytologySample),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.ResultCervicalCytology)),
                     () => RUL_HabilitationCodeCytology.Execute(ent.HabilitationCodeCytology,ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.QualityCytologySample)),
                     () => RUL_DateColposcopy.Execute(Convert.ToDateTime(ent.DateColposcopy),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,InitialDate),
                     () => RUL_HabilitationCodeColposcopy.Execute(ent.HabilitationCodeColposcopy,ent.IdSex,Convert.ToDateTime(ent.DateColposcopy),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateCervicalBiopsy.Execute(Convert.ToDateTime(ent.DateCervicalBiopsy),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.ResultCervicalBiopsy),InitialDate),
                     () => RUL_ResultCervicalBiopsy.Execute(Convert.ToInt32(ent.ResultCervicalBiopsy),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToDateTime(ent.DateCervicalBiopsy)),
                     () => RUL_HabilitationCodeBiopsy.Execute(ent.HabilitationCodeBiopsy,ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToInt32(ent.ResultCervicalBiopsy)),
                     () => RUL_DateMammography.Execute(Convert.ToDateTime(ent.DateMammography),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.ResultMammography),InitialDate),
                     () => RUL_ResultMammography.Execute(Convert.ToInt32(ent.ResultMammography),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToDateTime(ent.DateMammography)),
                     () => RUL_HabilitationCodeMammography.Execute(ent.HabilitationCodeMammography,ent.IdSex,Convert.ToInt32(ent.ResultMammography),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateBreastBiopsyBACAF.Execute(Convert.ToDateTime(ent.DateBreastBiopsyBACAF),Convert.ToDateTime(ent.BirthDate),CutOffDate,ent.IdSex,Convert.ToInt32(ent.ResultMammography)),
                     () => RUL_DateResultBreastBiopsy.Execute(Convert.ToDateTime(ent.DateResultBreastBiopsy),CutOffDate,Convert.ToDateTime(ent.BirthDate),ent.IdSex,Convert.ToDateTime(ent.DateBreastBiopsyBACAF)),
                     () => RUL_ResultBiopsyBreast.Execute(Convert.ToInt32(ent.ResultBiopsyBreast),ent.IdSex,Convert.ToDateTime(ent.BirthDate),CutOffDate,Convert.ToDateTime(ent.DateResultBreastBiopsy)),
                     () => RUL_HabiliationCodeBiopsyBreast.Execute(ent.HabiliationCodeBiopsyBreast,ent.IdSex,Convert.ToInt32(ent.ResultBiopsyBreast),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_DateHemoglobin.Execute(Convert.ToDateTime(ent.DateHemoglobin),InitialDate,EndDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_ResultHemoglobin.Execute(Convert.ToDouble(ent.ResultHemoglobin)),
                     () => RUL_DateGlycemia.Execute(Convert.ToDateTime(ent.DateGlycemia)),
                     () => RUL_DateCreatinine.Execute(Convert.ToDateTime(ent.DateCreatinine),Convert.ToDouble(ent.ResultCreatinine),InitialDate,EndDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_ResultCreatinine.Execute(Convert.ToDouble(ent.ResultCreatinine),Convert.ToDateTime(ent.DateCreatinine)),
                     () => RUL_DateGlycosylatedHemoglobin.Execute(Convert.ToDateTime(ent.DateGlycosylatedHemoglobin),Convert.ToDouble(ent.ResultGlycosylatedHemoglobin),InitialDate,EndDate,Convert.ToDateTime(ent.BirthDate)),
                     () => RUL_ResultGlycosylatedHemoglobin.Execute(Convert.ToDouble(ent.ResultGlycosylatedHemoglobin),Convert.ToDateTime(ent.DateGlycosylatedHemoglobin)),
                     () => RUL_DateMicroalbuminuria.Execute(Convert.ToDateTime(ent.DateMicroalbuminuria)),
                     () => RUL_DateHDL.Execute(Convert.ToDateTime(ent.DateHDL)),
                     () => RUL_DateBacilloscopy.Execute(Convert.ToDateTime(ent.DateBacilloscopy),Convert.ToInt32(ent.ResultBacilloscopy)),
                     () => RUL_ResultBacilloscopy.Execute(Convert.ToInt32(ent.ResultBacilloscopy),Convert.ToDateTime(ent.DateBacilloscopy)),
                     () => RUL_TreatmentCongenitalHypothyroidism.Execute(Convert.ToInt32(ent.CongeHypothyroidism),Convert.ToInt32(ent.TreatmentCongenitalHypothyroidism)),
                     () => RUL_TreatmentGestationalSyphilis.Execute(Convert.ToInt32(ent.TreatmentGestationalSyphilis),ent.IdSex,Convert.ToInt32(ent.Gestation),Convert.ToInt32(ent.GestaCongeSyphilis),Convert.ToDateTime(ent.BirthDate),CutOffDate),
                     () => RUL_TreatmentCongenitalSyphilis.Execute(Convert.ToInt32(ent.TreatmentCongenitalSyphilis),Convert.ToInt32(ent.GestaCongeSyphilis)),
                     () => RUL_TreatmentLeprosy.Execute(Convert.ToInt32(ent.Leprosy),Convert.ToInt32(ent.TreatmentLeprosy)),
                     () => RUL_EndDateTreatmentLeishmaniasis.Execute(Convert.ToDateTime(ent.EndDateTreatmentLeishmaniasis),InitialDate,EndDate)
                 });

                //Recorre los registros para insertar en la lista de errores 
                string replaceCharacters = res.GetPropertyValue<string>("Messages").Replace("\r\n", "*").Replace("\n", "*").Replace("\r", "*");
                string[] dataRules = replaceCharacters.Split('*');

                foreach (var fields in dataRules)
                {
                    if (fields != "" && fields != " ")
                    {
                        string mensajeItem = $"Fila {index + 1}";
                        listErrors.Add(string.Concat(mensajeItem, "|", fields.Trim()));
                    }
                }
                index++;
            }
            //Inserta a la lista de errores
            if (listErrors.Count > 0)
            {
                string pathFile = Helper.USR_GenericSaveLog(new Dictionary<string, List<string>>() { ["4505"] = listErrors }, folder);
                var attach = Helper.USR_WSAttachFileToProcess(pathFile, parameters4505.UserCode, parameters4505.CompanyId.ToString(), parameters4505.CaseNumber, "4505");
                if (attach.IsError)
                {
                    this.ResultMessage = "No se pudo asociar el archivo al proceso. " + attach.ErrorMessage;
                    return false;
                }
                this.FileName = attach.FileName;
                this.ResultMessage = "Hubo errores en la validación ";
                return false;
            }

            #region savefile4505

            //string cutOffDate = DateInit;
            string code = Filename.Substring(42, 6);
            var IniDates = DateTime.Parse(Filename.Substring(49, 10));
            var InitialDates = IniDates.ToString("MM/dd/yyyy");
            //string endDate = DateEnd;

            //Guarda la informacion en la Base de datos
            var resultSave = Helper.USR_Save4505File(Filename, DateInit, code, parameters4505.OperatorId, parameters4505.CaseNumber, InitialDates, DateEnd, info, _entity);
            if (resultSave.IsError)
            {
                this.ResultMessage = "Ocurrio un error al guardar el archivo " + resultSave.ErrorMessage;
                return false;
            }
            #endregion
            return true;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<bool> EvaluateCombinations()
        {
            return RuntimeResult<bool>.SetError("No cumple ninguna condición");
        }
        #endregion
    }
    /// <sumary>
    /// Fiebre Amarilla niños de 1 año
    /// </sumary> 
    public sealed class RUL_YellowFeverOneY
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fiebre Amarilla niños de 1 año
        /// </sumary>
        private long PE_YellowFeverOneY;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_YellowFeverOneY() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fiebre Amarilla niños de 1 año
        /// </sumary>
        /// <param name="PE_YellowFeverOneY">Fiebre Amarilla niños de 1 año</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_YellowFeverOneY, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_YellowFeverOneY = PE_YellowFeverOneY;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_YellowFeverOneY == 0 || PE_YellowFeverOneY == 1 || (new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_YellowFeverOneY))) NonValidMessages.Add($"valor no valido, variable 43 'Fiebre Amarilla niños de 1 año'");
            if (!(VC_Age >= 6 || VC_Age < 1 || VC_Age >= 1 && VC_Age <= 5)) NonValidMessages.Add($"valor no valido, variable 9 'Edad' en variable 43 'Fiebre Amarilla niños de 1 año'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_YellowFeverOneY == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_YellowFeverOneY == 0 && VC_Age < 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_YellowFeverOneY == 0 && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra entre 1 y 6 años, debe registrar un dato diferente a 0 en Fiebre Amarilla niños de 1 año, validar variable 43 'Fiebre Amarilla niños de 1 año' y variable 9 'Edad' ", this.FileName);
            }
            else if (PE_YellowFeverOneY == 1 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Fiebre Amarilla niños de 1 año, validar variable 43 'Fiebre Amarilla niños de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_YellowFeverOneY == 1 && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Fiebre Amarilla niños de 1 año, validar variable 43 'Fiebre Amarilla niños de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_YellowFeverOneY == 1 && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_YellowFeverOneY) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Fiebre Amarilla niños de 1 año, validar variable 43 'Fiebre Amarilla niños de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_YellowFeverOneY) && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Fiebre Amarilla niños de 1 año, validar variable 43 'Fiebre Amarilla niños de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Peso en Kilogramos
    /// </sumary> 
    public sealed class RUL_WeightKg
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Peso en Kilogramos
        /// </sumary>
        private double PE_WeightKg;
        /// <sumary>
        /// Fecha del Peso
        /// </sumary>
        private DateTime PE_DateWeight;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_WeightKg() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Peso en Kilogramos
        /// </sumary>
        /// <param name="PE_WeightKg">Peso en Kilogramos</param>
        /// <param name="PE_DateWeight">Fecha del Peso</param>
        public RuntimeResult<string> Execute(double PE_WeightKg, DateTime PE_DateWeight)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_WeightKg = PE_WeightKg;
                this.PE_DateWeight = PE_DateWeight;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_WeightKg == 999 || PE_WeightKg < 250 || PE_WeightKg >= 250)) NonValidMessages.Add($"Valor no valido variable 30 'Peso en Kilogramos'");
            if (!(PE_DateWeight == new DateTime(1800, 01, 01) || PE_DateWeight != new DateTime(1800, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 29 'Fecha del Peso' en  variable 30 'Peso en Kilogramos'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_WeightKg == 999) && (PE_DateWeight == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_WeightKg == 999) && (PE_DateWeight != new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 999 en Peso en Kilogramos, debe registrar fecha 1800-01-01, validar variable 30 'Peso en Kilogramos' o variable 29 'Fecha del Peso'", this.FileName);
            }
            else if ((PE_WeightKg < 250) && (PE_DateWeight == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Peso en Kilogramos, debe registrar Fecha del Peso, validar variable 29 'Fecha del Peso' y variable 30 'Peso en Kilogramos'", this.FileName);
            }
            else if ((PE_WeightKg < 250) && (PE_DateWeight != new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_WeightKg >= 250) && (PE_DateWeight == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El peso en kilogramos no puede ser superior a 250, validar variable 30 'Peso en Kilogramos'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El peso en kilogramos no puede ser superior a 250, validar variable 30 'Peso en Kilogramos'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Vitamina A en la Última Consulta del Menor de 10 años
    /// </sumary> 
    public sealed class RUL_VitALastConsuUnderTenY
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Vitamina A en la Última Consulta del Menor de 10 años
        /// </sumary>
        private long PE_VitALastConsuUnderTenY;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_VitALastConsuUnderTenY() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Vitamina A en la Última Consulta del Menor de 10 años
        /// </sumary>
        /// <param name="PE_VitALastConsuUnderTenY">Suministro de Vitamina A en la Última Consulta del Menor de 10 años</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_VitALastConsuUnderTenY, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VitALastConsuUnderTenY = PE_VitALastConsuUnderTenY;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_VitALastConsuUnderTenY == 0 || (new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_VitALastConsuUnderTenY))) NonValidMessages.Add($"Valor no valido. Validar variable 71 'Suministro de Vitamina A en la Última Consulta del Menor de 10 años'");
            if (!(VC_Age >= 10 || VC_Age < 10)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 71 'Suministro de Vitamina A en la Última Consulta del Menor de 10 años'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_VitALastConsuUnderTenY == 0 && VC_Age >= 10)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_VitALastConsuUnderTenY == 0 && VC_Age < 10)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años, la edad debe ser mayor de 10 años, validar variable 71 'Suministro de Vitamina A en la Última Consulta del Menor de 10 años' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_VitALastConsuUnderTenY) && VC_Age >= 10)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años, la edad de la persona debe ser menor de 10 años, validar variable 71 'Suministro de Vitamina A en la Última Consulta del Menor de 10 años' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta Víctimas de Violencia Sexual 4505 v23
    /// </sumary> 
    public sealed class RUL_VictimSexViolence
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Dato Víctima de Violencia Sexual
        /// </sumary>
        private long PE_VictimSexViolence;
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual
        /// </sumary>
        private DateTime PE_DateConsuVictSexViolence;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_VictimSexViolence() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual 4505 v23
        /// </sumary>
        /// <param name="PE_VictimSexViolence">Dato Víctima de Violencia Sexual</param>
        /// <param name="PE_DateConsuVictSexViolence">Consulta Víctimas de Violencia Sexual</param>
        public RuntimeResult<string> Execute(long PE_VictimSexViolence, DateTime PE_DateConsuVictSexViolence)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VictimSexViolence = PE_VictimSexViolence;
                this.PE_DateConsuVictSexViolence = PE_DateConsuVictSexViolence;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_VictimSexViolence == 1 || (new long[] { 2, 21 }).Contains(PE_VictimSexViolence))) NonValidMessages.Add($"Valor no valido, debe ser 1,2 o 21. Validar variable 23 'Víctima de Violencia Sexual'. ");
            if (!(PE_DateConsuVictSexViolence == new DateTime(1800, 01, 01) || PE_DateConsuVictSexViolence > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictSexViolence))) NonValidMessages.Add($"Valor no valido. Validar variable 66 'Consulta Víctimas de Violencia Sexual' en variable 23 'Víctima de Violencia Sexual'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_VictimSexViolence == 1 && PE_DateConsuVictSexViolence == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (PE_VictimSexViolence == 1 && PE_DateConsuVictSexViolence > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (PE_VictimSexViolence == 1 && (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictSexViolence))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra víctima de violencia sexual, debe registrar fecha de consulta víctima de violencia sexual, validar variable 23 'Víctima de Violencia Sexual' y variable 66 'Consulta Víctimas de Violencia Sexual'", this.FileName);
            }
            else if ((new long[] { 2, 21 }).Contains(PE_VictimSexViolence) && PE_DateConsuVictSexViolence == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta Víctimas de Violencia Sexual, debe registrar 1 en Víctima de Violencia Sexual,  validar variable 23 'Víctima de Violencia Sexual' y variable 66 'Consulta Víctimas de Violencia Sexual'", this.FileName);
            }
            else if ((new long[] { 2, 21 }).Contains(PE_VictimSexViolence) && PE_DateConsuVictSexViolence > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta Víctimas de Violencia Sexual, debe registrar 1 en Víctima de Violencia Sexual,  validar variable 23 'Víctima de Violencia Sexual' y variable 66 'Consulta Víctimas de Violencia Sexual'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de registro
    /// </sumary> 
    public sealed class RUL_TypeRegister
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tipo de registro
        /// </sumary>
        private long PE_Typeregister;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TypeRegister() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de registro
        /// </sumary>
        /// <param name="PE_Typeregister">Tipo de registro</param>
        public RuntimeResult<string> Execute(long PE_Typeregister)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Typeregister = PE_Typeregister;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_Typeregister == 2 || PE_Typeregister != 2)) NonValidMessages.Add($"Valor no valido, Validar variable 0 'Tipo de registro'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_Typeregister == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, Validar variable 0 'Tipo de registro'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Triple Viral Niños
    /// </sumary> 
    public sealed class RUL_TriViralChild
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Triple Viral Niños
        /// </sumary>
        private long PE_TriViralChild;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TriViralChild() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Triple Viral Niños
        /// </sumary>
        /// <param name="PE_TriViralChild">Triple Viral Niños</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_TriViralChild, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TriViralChild = PE_TriViralChild;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TriViralChild == 0 || (new long[] { 1, 2 }).Contains(PE_TriViralChild) || (new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_TriViralChild))) NonValidMessages.Add($"Valor no valido. Validar variable 45 'Triple Viral Niños'");
            if (!(VC_Age >= 6 || VC_Age < 1 || VC_Age >= 1 && VC_Age <= 5)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'edad' en variable 45 'Triple Viral Niños'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_TriViralChild == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_TriViralChild == 0 && VC_Age < 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_TriViralChild == 0 && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra entre 1 y 6 años, debe registrar un dato diferente a 0 en Triple Viral Niños, validar variable 45 'Triple Viral Niños' y variable 9 'Edad' ", this.FileName);
            }
            else if ((new long[] { 1, 2 }).Contains(PE_TriViralChild) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Triple Viral Niños, validar variable 45 'Triple Viral Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 2 }).Contains(PE_TriViralChild) && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Triple Viral Niños, validar variable 45 'Triple Viral Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 2 }).Contains(PE_TriViralChild) && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_TriViralChild) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Triple Viral Niños, validar variable 45 'Triple Viral Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_TriViralChild) && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Triple Viral Niños, validar variable 45 'Triple Viral Niños' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Lepra
    /// </sumary> 
    public sealed class RUL_TreatmentLeprosy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Lepra
        /// </sumary>
        private long PE_Leprosy;
        /// <sumary>
        /// Tratamiento por lepra
        /// </sumary>
        private long PE_TreatmentLeprosy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TreatmentLeprosy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Lepra
        /// </sumary>
        /// <param name="PE_Leprosy">Lepra</param>
        /// <param name="PE_TreatmentLeprosy">Tratamiento por lepra</param>
        public RuntimeResult<string> Execute(long PE_Leprosy, long PE_TreatmentLeprosy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Leprosy = PE_Leprosy;
                this.PE_TreatmentLeprosy = PE_TreatmentLeprosy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TreatmentLeprosy == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentLeprosy))) NonValidMessages.Add($"Valor no valido. Validar variable 117 'Tratamiento para Lepra'");
            if (!((new long[] { 1, 2 }).Contains(PE_Leprosy) || (new long[] { 3, 21 }).Contains(PE_Leprosy))) NonValidMessages.Add($"Valor no valido. Validar variable 20 'Lepra'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_TreatmentLeprosy == 0) && ((new long[] { 1, 2 }).Contains(PE_Leprosy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_TreatmentLeprosy == 0) && ((new long[] { 3, 21 }).Contains(PE_Leprosy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentLeprosy)) && ((new long[] { 1, 2 }).Contains(PE_Leprosy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Lepra la variable 20 'Lepra' debe registrar un dato igual a 1 o 2, validar variable 20 'Lepra' y variable 117 'Tratamiento para Lepra'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tratamiento para Sífilis gestacional
    /// </sumary> 
    public sealed class RUL_TreatmentGestationalSyphilis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Variable tratamiento Sífilis gestacional
        /// </sumary>
        private long PE_TreatmentGestationalSyphilis;
        /// <sumary>
        /// Variable sexo del afiliado
        /// </sumary>
        private string PE_Sexo;
        /// <sumary>
        /// Variable consecutivo de gestación del afiliado
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Variable sífilis congénita gestacional
        /// </sumary>
        private long PE_GestaCongeSyphilis;
        /// <sumary>
        /// Variable Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Variable fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad del afiliado
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TreatmentGestationalSyphilis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tratamiento para Sífilis gestacional
        /// </sumary>
        /// <param name="PE_TreatmentGestationalSyphilis">Variable tratamiento Sífilis gestacional</param>
        /// <param name="PE_Sexo">Variable sexo del afiliado</param>
        /// <param name="PE_Gestation">Variable consecutivo de gestación del afiliado</param>
        /// <param name="PE_GestaCongeSyphilis">Variable sífilis congénita gestacional</param>
        /// <param name="PE_BirthDate">Variable Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Variable fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_TreatmentGestationalSyphilis, string PE_Sexo, long PE_Gestation, long PE_GestaCongeSyphilis, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TreatmentGestationalSyphilis = PE_TreatmentGestationalSyphilis;
                this.PE_Sexo = PE_Sexo;
                this.PE_Gestation = PE_Gestation;
                this.PE_GestaCongeSyphilis = PE_GestaCongeSyphilis;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TreatmentGestationalSyphilis == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis) || PE_TreatmentGestationalSyphilis == 22)) NonValidMessages.Add($"Valor no válido, Variable 115 'Tratamiento para Sífilis gestacional'");
            if (!(PE_Sexo == "F" || PE_Sexo == "M")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 115 'Tratamiento para Sífilis gestacional'");
            if (!((new long[] { 0, 2, 21 }).Contains(PE_Gestation) || PE_Gestation == 1)) NonValidMessages.Add($"Valor no válido, Variable 14 'Gestación' en Variable 115 'Tratamiento para Sífilis gestacional'");
            if (!((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis) || PE_GestaCongeSyphilis == 1)) NonValidMessages.Add($"Valor no válido, Variable 15 'Sífilis Gestacional o congénita' en Variable 115 'Tratamiento para Sífilis gestacional'");
            if (!(VC_Age >= 10 && VC_Age <= 60 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en Variable 115 'Tratamiento para Sífilis gestacional'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en tratamiento para sifilis gestacional, debe registrar un valor diferente a 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en tratamiento para sifilis gestacional, debe registrar un valor diferente a 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en tratamiento para sifilis gestacional, debe registrar un valor diferente a 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en tratamiento para sifilis gestacional, debe registrar un valor diferente a 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 0) && (PE_Sexo == "M") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe se gestante, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe se gestante, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe ser gestante, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe ser gestante, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Sífilis gestacional, debe registrar 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Sífilis gestacional, debe registrar 1 en Sífilis Gestacional o congénita, validar variable 115 'Tratamiento para Sífilis gestacional' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar edad entre 10 y 59 años, validar variable 9 'Edad' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20 }).Contains(PE_TreatmentGestationalSyphilis)) && (PE_Sexo == "M") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "F") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_GestaCongeSyphilis == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && (PE_Gestation == 1) && ((new long[] { 0, 2, 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else if ((PE_TreatmentGestationalSyphilis == 22) && (PE_Sexo == "M") && (PE_Gestation == 1) && (PE_GestaCongeSyphilis == 1) && (VC_Age >= 10 && VC_Age <= 60))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 22 en tratamiento para sifilis gestacional,  debe registrar sexo F, validar variable 10 'Sexo' y variable 115 'Tratamiento para Sífilis gestacional'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tratamiento para Sífilis Congénita
    /// </sumary> 
    public sealed class RUL_TreatmentCongenitalSyphilis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tratamiento para Sífilis Congénita
        /// </sumary>
        private long PE_TreatmentCongenitalSyphilis;
        /// <sumary>
        /// Sífilis Gestacional o congénita
        /// </sumary>
        private long PE_GestaCongeSyphilis;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TreatmentCongenitalSyphilis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tratamiento para Sífilis Congénita
        /// </sumary>
        /// <param name="PE_TreatmentCongenitalSyphilis">Tratamiento para Sífilis Congénita</param>
        /// <param name="PE_GestaCongeSyphilis">Sífilis Gestacional o congénita</param>
        public RuntimeResult<string> Execute(long PE_TreatmentCongenitalSyphilis, long PE_GestaCongeSyphilis)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TreatmentCongenitalSyphilis = PE_TreatmentCongenitalSyphilis;
                this.PE_GestaCongeSyphilis = PE_GestaCongeSyphilis;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TreatmentCongenitalSyphilis == 0 || (new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalSyphilis))) NonValidMessages.Add($"Valor no valido. Validar variable 116 'Tratamiento para Sífilis Congénita'");
            if (!(PE_GestaCongeSyphilis == 2 || (new long[] { 0, 1, 3, 21 }).Contains(PE_GestaCongeSyphilis))) NonValidMessages.Add($"Valor no valido. Validar variable 15 'Sifilis Gestacional o congénita'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_TreatmentCongenitalSyphilis == 0) && (PE_GestaCongeSyphilis == 2))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en tratamiento para sifilis congénita, debe registrar un resultado diferente a 2 en Sífilis Gestacional o congénita, validar variable 116 'Tratamiento para Sífilis Congénita' y variable 15 'Sífilis Gestacional o congénita'", this.FileName);
            }
            else if ((PE_TreatmentCongenitalSyphilis == 0) && ((new long[] { 0, 1, 3, 21 }).Contains(PE_GestaCongeSyphilis)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalSyphilis)) && (PE_GestaCongeSyphilis == 2))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor en Tratamiento para Sífilis Congénita, debe registrar 2 en Sífilis Gestacional o congénita, validar variable 15 'Sífilis Gestacional o congénita' y variable 116 'Tratamiento para Sífilis Congénita'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tratamiento para Hipotiroidismo Congénito
    /// </sumary> 
    public sealed class RUL_TreatmentCongenitalHypothyroidism
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hipotiroidismo congénito
        /// </sumary>
        private long PE_CongeHypothyroidism;
        /// <sumary>
        /// Variable tratamiento para Hipotiroidismo congénito
        /// </sumary>
        private long PE_TreatmentCongenitalHypothyroidism;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TreatmentCongenitalHypothyroidism() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tratamiento para Hipotiroidismo Congénito
        /// </sumary>
        /// <param name="PE_CongeHypothyroidism">Hipotiroidismo congénito</param>
        /// <param name="PE_TreatmentCongenitalHypothyroidism">Variable tratamiento para Hipotiroidismo congénito</param>
        public RuntimeResult<string> Execute(long PE_CongeHypothyroidism, long PE_TreatmentCongenitalHypothyroidism)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CongeHypothyroidism = PE_CongeHypothyroidism;
                this.PE_TreatmentCongenitalHypothyroidism = PE_TreatmentCongenitalHypothyroidism;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TreatmentCongenitalHypothyroidism == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyroidism))) NonValidMessages.Add($"Valor no válido, Variable 114 'Tratamiento para Hipotiroidismo Congénito'");
            if (!(PE_CongeHypothyroidism == 1 || (new long[] { 0, 2, 21 }).Contains(PE_CongeHypothyroidism))) NonValidMessages.Add($"Valor no válido, Variable 17 'Hipotiroidismo Congénito' en Variable 114 'Tratamiento para Hipotiroidismo Congénito'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_TreatmentCongenitalHypothyroidism == 0) && (PE_CongeHypothyroidism == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra hipotiroidismo congénito, debe registrar manejo de tratamiento para Hipotiroidismo Congénito, validar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
            else if ((PE_TreatmentCongenitalHypothyroidism == 0) && ((new long[] { 0, 2, 21 }).Contains(PE_CongeHypothyroidism)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else if (((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyroidism)) && (PE_CongeHypothyroidism == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra tratamiento para hipotiroidismo congénito, debe registrar 1 o 2 en hipotiroidismo congénito, validar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// TD o TT Mujeres en Edad Fértil 15 a 49 años
    /// </sumary> 
    public sealed class RUL_TDorTTWomFertAge
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// TD o TT Mujeres en Edad Fértil 15 a 49 años
        /// </sumary>
        private long PE_TDorTTWomFertAge;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_TDorTTWomFertAge() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// TD o TT Mujeres en Edad Fértil 15 a 49 años
        /// </sumary>
        /// <param name="PE_TDorTTWomFertAge">TD o TT Mujeres en Edad Fértil 15 a 49 años</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_TDorTTWomFertAge, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_TDorTTWomFertAge = PE_TDorTTWomFertAge;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_TDorTTWomFertAge == 0 || (new long[] { 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 22 }).Contains(PE_TDorTTWomFertAge))) NonValidMessages.Add($"Valor no valido. Validar variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Validar variable 10 'Sexo' en variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años'");
            if (!(VC_Age >= 10 && VC_Age <= 49 || !(VC_Age >= 10 && VC_Age <= 49))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_TDorTTWomFertAge == 0 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 49)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_TDorTTWomFertAge == 0 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 49))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_TDorTTWomFertAge == 0 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 49)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es mayor de 10 años y menor de 50, la opcion TD o TT Mujeres en Edad Fértil 15 a 49 años debe ser diferente a 0, validar variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_TDorTTWomFertAge == 0 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 49))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 22 }).Contains(PE_TDorTTWomFertAge) && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 49)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es el sexo es M la opcion TD o TT Mujeres en Edad Fértil 15 a 49 años debe ser 0  no aplica, validar variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años' y variable 10 'sexo'", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 22 }).Contains(PE_TDorTTWomFertAge) && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 49))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es el sexo es M la opcion TD o TT Mujeres en Edad Fértil 15 a 49 años debe ser 0  no aplica, validar variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años' y variable 10 'sexo'", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 22 }).Contains(PE_TDorTTWomFertAge) && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 49)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es menor de 10 y mayor de 50 la opcion TD o TT Mujeres en Edad Fértil 15 a 49 años debe ser 0, validar variable 47 'TD o TT Mujeres en Edad Fértil 15 a 49 años' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Sintomático Respiratorio
    /// </sumary> 
    public sealed class RUL_SymptRespiratory
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Sintomático Respiratorio
        /// </sumary>
        private long PE_SymptRespiratory;
        /// <sumary>
        /// Baciloscopia de Diagnóstico
        /// </sumary>
        private long PE_ResultBacilloscopy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_SymptRespiratory() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Sintomático Respiratorio
        /// </sumary>
        /// <param name="PE_SymptRespiratory">Sintomático Respiratorio</param>
        /// <param name="PE_ResultBacilloscopy">Baciloscopia de Diagnóstico</param>
        public RuntimeResult<string> Execute(long PE_SymptRespiratory, long PE_ResultBacilloscopy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SymptRespiratory = PE_SymptRespiratory;
                this.PE_ResultBacilloscopy = PE_ResultBacilloscopy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_SymptRespiratory == 1 || (new long[] { 2, 21 }).Contains(PE_SymptRespiratory))) NonValidMessages.Add($"Valor no valido. Validar variable 18 'Sintomático Respiratorio'");
            if (!(PE_ResultBacilloscopy == 4 || (new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy))) NonValidMessages.Add($"Valor no valido. Validar variable 113 'Baciloscopia de Diagnóstico' en variable 18 'Sintomático Respiratorio'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_SymptRespiratory == 1 && PE_ResultBacilloscopy == 4)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sintomático Respiratorio, debe registrar un dato diferente a 4 en Baciloscopia de Diagnóstico, validar variable 18 'Sintomático Respiratorio' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
            else if (PE_SymptRespiratory == 1 && (new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 2, 21 }).Contains(PE_SymptRespiratory) && PE_ResultBacilloscopy == 4)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 1 en Sintomático Respiratorio, debe registrar 4 en Baciloscopia de Diagnóstico, validar variable 18 'Sintomático Respiratorio' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Método Anticonceptivo
    /// </sumary> 
    public sealed class RUL_SupplyContracMethod
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Método Anticonceptivo
        /// </sumary>
        private long PE_SupplyContracMethod;
        /// <sumary>
        /// Fecha Suministro de Método Anticonceptivo
        /// </sumary>
        private DateTime PE_DateContracDelivery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_SupplyContracMethod() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Método Anticonceptivo
        /// </sumary>
        /// <param name="PE_SupplyContracMethod">Suministro de Método Anticonceptivo</param>
        /// <param name="PE_DateContracDelivery">Fecha Suministro de Método Anticonceptivo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_SupplyContracMethod, DateTime PE_DateContracDelivery, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SupplyContracMethod = PE_SupplyContracMethod;
                this.PE_DateContracDelivery = PE_DateContracDelivery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_SupplyContracMethod == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod))) NonValidMessages.Add($"Valor no valido. Validar variable 54 'Suministro de Metodo Anticonceptivo'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 54 'Suministro de Método Anticonceptivo'");
            if (!(PE_DateContracDelivery == new DateTime(1800, 01, 01) || PE_DateContracDelivery == new DateTime(1845, 01, 01) || PE_DateContracDelivery > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 55 'Fecha Suministro de Metodo Anticonceptivo' en variable 54 'Suministro de Metodo Anticonceptivo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_SupplyContracMethod == 0 && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual de 10 años y menor de 60 años debe registrar un dato diferente a 0 en Suministro de Método Anticonceptivo, validar variable 54 'Suministro de Método Anticonceptivo' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_SupplyContracMethod == 0 && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery == new DateTime(1845, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual de 10 años y menor de 60 años debe registrar un dato diferente a 0 en Suministro de Método Anticonceptivo, validar variable 54 'Suministro de Método Anticonceptivo' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_SupplyContracMethod == 0 && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual de 10 años y menor de 60 años debe registrar un dato diferente a 0 en Suministro de Método Anticonceptivo, validar variable 54 'Suministro de Método Anticonceptivo' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_SupplyContracMethod == 0 && !(VC_Age >= 10 && VC_Age <= 59) && PE_DateContracDelivery == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra  fecha de suministro de método anticonceptivo, debe registra un dato diferente a 0, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 55 'Fecha Suministro de Método Anticonceptivo'", this.FileName);
            }
            else if (PE_SupplyContracMethod == 0 && !(VC_Age >= 10 && VC_Age <= 59) && PE_DateContracDelivery == new DateTime(1845, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_SupplyContracMethod == 0 && !(VC_Age >= 10 && VC_Age <= 59) && PE_DateContracDelivery > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra  fecha de suministro de método anticonceptivo, debe registra un dato diferente a 0, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 55 'Fecha Suministro de Método Anticonceptivo'", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod) && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod) && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery == new DateTime(1845, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra suministro de método anticonceptivo, debe registra un dato diferente a 1845-01-01, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 9 'Edad'  ", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod) && VC_Age >= 10 && VC_Age <= 59 && PE_DateContracDelivery > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod) && !(VC_Age >= 10 && VC_Age <= 59) && PE_DateContracDelivery == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es menor de 10 años o mayor o igual de 60 años no aplica para suministro de método anticonceptivo, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 9 'Edad' ", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21 }).Contains(PE_SupplyContracMethod) && !(VC_Age >= 10 && VC_Age <= 59) && PE_DateContracDelivery == new DateTime(1845, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es menor de 10 años o mayor o igual de 60 años no aplica para suministro de método anticonceptivo, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 9 'Edad' ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es menor de 10 años o mayor o igual de 60 años no aplica para suministro de método anticonceptivo, Validar variable 54 'Suministro de Método Anticonceptivo' y la variable 9 'Edad' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Infecciones de Trasmisión Sexual
    /// </sumary> 
    public sealed class RUL_SexTransInfect
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Infecciones de Trasmisión Sexual
        /// </sumary>
        private long PE_SexTransInfect;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_SexTransInfect() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Infecciones de Trasmisión Sexual
        /// </sumary>
        /// <param name="PE_SexTransInfect">Infecciones de Trasmisión Sexual</param>
        public RuntimeResult<string> Execute(long PE_SexTransInfect)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SexTransInfect = PE_SexTransInfect;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 21 }).Contains(PE_SexTransInfect) || !(new long[] { 1, 2, 21 }.Contains(PE_SexTransInfect)))) NonValidMessages.Add($"Valor no valido. Validar variable 24 'Infecciones de Trasmisión Sexual'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 1, 2, 21 }).Contains(PE_SexTransInfect))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido. Validar variable 24 'Infecciones de Trasmisión Sexual'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Segundo Nombre
    /// </sumary> 
    public sealed class RUL_SecondName
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        private string PE_SecondName;
        /// <sumary>
        /// Valida Longitud Segundo Nombre
        /// </sumary>
        private long VC_SecondName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// Caracteres Especiales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_SecondName() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        /// <param name="PE_SecondName">Segundo Nombre</param>
        public RuntimeResult<string> Execute(string PE_SecondName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SecondName = PE_SecondName;
                this.VC_SecondName = FUNC_VC_SecondName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_SecondName()
        {
            return PE_SecondName.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_SecondName == PE_SecondName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_SecondName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_SecondName >= 1 && VC_SecondName <= 30)) NonValidMessages.Add($"El valor registrado no puede ser superior a 30 caracteres o estar vacío, validar variable 8 'Segundo nombre del usuario'");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"Los datos deben ser en letras MAYÚSCULAS, validar variable 8 'Segundo nombre del usuario' ");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"Los datos deben ser sin caracteres especiales y sin tildes, validar variable 8 'Segundo nombre del usuario' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Validad Longitud Segundo Nombre
    /// </sumary> 
    public sealed class RUL_SecondLastName
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Segundo Nombre
        /// </sumary>
        private string PE_SecondLastName;
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        private long VC_SecondLastName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// Caracteres Especiales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_SecondLastName() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Validad Longitud Segundo Nombre
        /// </sumary>
        /// <param name="PE_SecondLastName">Segundo Nombre</param>
        public RuntimeResult<string> Execute(string PE_SecondLastName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_SecondLastName = PE_SecondLastName;
                this.VC_SecondLastName = FUNC_VC_SecondLastName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_SecondLastName()
        {
            return PE_SecondLastName.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_SecondLastName == PE_SecondLastName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_SecondLastName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_SecondLastName >= 1 && VC_SecondLastName <= 30)) NonValidMessages.Add($"El valor registrado no puede ser superior a 30 caracteres o estar vacío, validar variable 6 'Segundo apellido del usuario'");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"Los datos deben ser en letras MAYÚSCULAS, validar variable 6 'Segundo apellido del usuario' ");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"Los datos deben ser sin caracteres especiales y sin tildes, validar variable 6 'Segundo apellido del usuario' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Rotavirus
    /// </sumary> 
    public sealed class RUL_Rotavirus
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Rotavirus
        /// </sumary>
        private long PE_Rotavirus;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Rotavirus() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Rotavirus
        /// </sumary>
        /// <param name="PE_Rotavirus">Rotavirus</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_Rotavirus, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Rotavirus = PE_Rotavirus;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Rotavirus) || PE_Rotavirus == 2 || PE_Rotavirus == 0)) NonValidMessages.Add($"Valor no válido, Variable 40 'Rotavirus'");
            if (!(VC_Age >= 1 && VC_Age <= 119 || VC_Age >= 120 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en varible 40");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Rotavirus)) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Rotavirus)) && (VC_Age >= 120 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Rotavirus)) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor ó igual a 6 años debe registrar 0 en Rotavirus, validar variable 40 'Rotavirus' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Rotavirus == 2) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Rotavirus, debe registrar diferente a 2 .Validar variable 40 'Rotavirus' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Rotavirus == 2) && (VC_Age >= 120 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Rotavirus == 2) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor ó igual a 6 años debe registrar 0 en Rotavirus, validar variable 40 'Rotavirus' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Rotavirus == 0) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Rotavirus 0, debe ser mayor o igual de 6 años. Validar variable 40 'Rotavirus' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Rotavirus == 0) && (VC_Age >= 120 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Rotavirus 0, debe ser mayor o igual de 6 años. Validar variable 40 'Rotavirus' y la variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado Serología para Sífilis
    /// </sumary> 
    public sealed class RUL_ResultSerologySyphilis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado Serología para Sífilis
        /// </sumary>
        private long PE_ResultSerologySyphilis;
        /// <sumary>
        /// Fecha Serología para Sífilis
        /// </sumary>
        private DateTime PE_DateSerologySyphilis;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultSerologySyphilis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado Serología para Sífilis
        /// </sumary>
        /// <param name="PE_ResultSerologySyphilis">Resultado Serología para Sífilis</param>
        /// <param name="PE_DateSerologySyphilis">Fecha Serología para Sífilis</param>
        public RuntimeResult<string> Execute(long PE_ResultSerologySyphilis, DateTime PE_DateSerologySyphilis)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultSerologySyphilis = PE_ResultSerologySyphilis;
                this.PE_DateSerologySyphilis = PE_DateSerologySyphilis;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultSerologySyphilis == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis))) NonValidMessages.Add($"Valor no valido. Validar variable 81 'Resultado Serología para Sífilis'");
            if (!((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis) || PE_DateSerologySyphilis == new DateTime(1800, 01, 01) || PE_DateSerologySyphilis > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 80 'Fecha Serología para Sífilis' en variable 81 'Resultado Serología para Sífilis'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_ResultSerologySyphilis == 0 && (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_ResultSerologySyphilis == 0 && PE_DateSerologySyphilis == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si el dato registrado es 0 la Fecha Serología para Sífilis debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 80 'Fecha Serología para Sífilis' o variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
            else if (PE_ResultSerologySyphilis == 0 && PE_DateSerologySyphilis > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si el dato registrado es 0 la Fecha Serología para Sífilis debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 80 'Fecha Serología para Sífilis' o variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis) && (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1,2,22 la Fecha Serología para Sífilis debe registrar un dato diferente a 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 80 'Fecha Serología para Sífilis' o variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis) && PE_DateSerologySyphilis == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado de TSH Neonatal
    /// </sumary> 
    public sealed class RUL_ResultNeonatalTSH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado de TSH Neonatal
        /// </sumary>
        private long PE_ResultNeonatalTSH;
        /// <sumary>
        /// Fecha TSH Neonatal
        /// </sumary>
        private DateTime PE_DateNeonatalTSH;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultNeonatalTSH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado de TSH Neonatal
        /// </sumary>
        /// <param name="PE_ResultNeonatalTSH">Resultado de TSH Neonatal</param>
        /// <param name="PE_DateNeonatalTSH">Fecha TSH Neonatal</param>
        public RuntimeResult<string> Execute(long PE_ResultNeonatalTSH, DateTime PE_DateNeonatalTSH)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultNeonatalTSH = PE_ResultNeonatalTSH;
                this.PE_DateNeonatalTSH = PE_DateNeonatalTSH;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH) || PE_ResultNeonatalTSH == 0)) NonValidMessages.Add($"Valor no valido. Validar variable 85 'Resultado de TSH Neonatal'");
            if (!(PE_DateNeonatalTSH == new DateTime(1800, 01, 01) || PE_DateNeonatalTSH > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH))) NonValidMessages.Add($"Valor no valido. Validar variable 84 'Fecha TSH Neonatal' en variable 85 'Resultado de TSH Neonatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH) && PE_DateNeonatalTSH == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH) && PE_DateNeonatalTSH > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH) && (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1,2,22 la Fecha TSH Neonatal debe registrar un dato diferente a 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 84 'Fecha TSH Neonatal' o variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if (PE_ResultNeonatalTSH == 0 && PE_DateNeonatalTSH == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si la el dato registrado es 0 la Fecha TSH Neonatal debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 84 'Fecha TSH Neonatal' o variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if (PE_ResultNeonatalTSH == 0 && PE_DateNeonatalTSH > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si la el dato registrado es 0 la Fecha TSH Neonatal debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 84 'Fecha TSH Neonatal' o variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado Mamografía
    /// </sumary> 
    public sealed class RUL_ResultMammography
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado Mamografía
        /// </sumary>
        private long PE_ResultMammography;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha Mamografía
        /// </sumary>
        private DateTime PE_DateMammography;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultMammography() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado Mamografía
        /// </sumary>
        /// <param name="PE_ResultMammography">Resultado Mamografía</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_DateMammography">Fecha Mamografía</param>
        public RuntimeResult<string> Execute(long PE_ResultMammography, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_DateMammography)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultMammography = PE_ResultMammography;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_DateMammography = PE_DateMammography;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultMammography == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography))) NonValidMessages.Add($"Valor no válido, Variable 97 'Resultado Mamografía'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 97 'Resultado Mamografía'");
            if (!(VC_Age < 35 || VC_Age >= 35)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 97 'Resultado Mamografia'");
            if (!(PE_DateMammography == new DateTime(1845, 01, 01) || PE_DateMammography == new DateTime(1800, 01, 01) || PE_DateMammography > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography))) NonValidMessages.Add($"Valor no válido, Variable 96 'Fecha Mamografía' en Variable 97 'Resultado Mamografía'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar 1845-01-01 en Fecha Mamografía, validar variable 96 'Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar menor a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar menor a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ResultMammography == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Mamografía, debe registrar menor a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, el sexo debe ser F, validar variable 97 'Resultado Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 97 'Resultado Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, Debe registrar un dato diferente a 1845-01-01, 180501-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-0 en Fecha Mamografía, validar variable 97 'Resultado Mamografía' y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(PE_ResultMammography)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateMammography > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Mamografía, Debe registrar un dato diferente a 1845-01-01, 180501-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-0 en Fecha Mamografía, validar variable 97 'Resultado Mamografía' y variable 96 'Fecha Mamografía'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado Antígeno de Superficie Hepatitis B en Gestantes
    /// </sumary> 
    public sealed class RUL_ResultHepatitisBPregnant
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private long PE_ResultHepatitisBPregnant;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Fecha Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private DateTime PE_DateHepatitisBPregnant;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultHepatitisBPregnant() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        /// <param name="PE_ResultHepatitisBPregnant">Resultado Antígeno de Superficie Hepatitis B en Gestantes</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_DateHepatitisBPregnant">Fecha Antígeno de Superficie Hepatitis B en Gestantes</param>
        public RuntimeResult<string> Execute(long PE_ResultHepatitisBPregnant, string PE_IdSex, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_Gestation, DateTime PE_DateHepatitisBPregnant)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultHepatitisBPregnant = PE_ResultHepatitisBPregnant;
                this.PE_IdSex = PE_IdSex;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_Gestation = PE_Gestation;
                this.PE_DateHepatitisBPregnant = PE_DateHepatitisBPregnant;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultHepatitisBPregnant == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant))) NonValidMessages.Add($"Valor no válido, Variable: 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable: 10 'sexo' en variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable: 9 'Edad' en variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_Gestation == 1 || (new long[] { 0, 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no valido, Variable 14 'Gestación' en variable 79 'Resultado Antigeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01) || PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant))) NonValidMessages.Add($"Valor no valido, Variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes' en variable 79 'Resultado Antigeno de Superficie Hepatitis B en Gestantes'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Registra sexo Femenino y gestante. Validar Variable 10 'Sexo' y 14'Gestacion'", this.FileName);
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultHepatitisBPregnant == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor para Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar sexo F, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar Fecha Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra gestacion debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 14 'Gestación'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Antígeno de Superficie Hepatitis B en Gestantes, debe registrar entre 10 y 59 años, validar variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Hemoglobina
    /// </sumary> 
    public sealed class RUL_ResultHemoglobin
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hemoglobina
        /// </sumary>
        private double PE_ResultHemoglobin;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultHemoglobin() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Hemoglobina
        /// </sumary>
        /// <param name="PE_ResultHemoglobin">Hemoglobina</param>
        public RuntimeResult<string> Execute(double PE_ResultHemoglobin)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultHemoglobin = PE_ResultHemoglobin;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultHemoglobin == 0 || PE_ResultHemoglobin >= 1.5 && PE_ResultHemoglobin <= 20 || !(PE_ResultHemoglobin >= 1.5 && PE_ResultHemoglobin <= 20))) NonValidMessages.Add($"Valor no válido, Variable 104 'Hemoglobina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultHemoglobin == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultHemoglobin >= 1.5 && PE_ResultHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 104 'Hemoglobina'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Hemoglobina Glicosilada
    /// </sumary> 
    public sealed class RUL_ResultGlycosylatedHemoglobin
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hemoglobina Glicosilada
        /// </sumary>
        private double PE_ResultGlycosylatedHemoglobin;
        /// <sumary>
        /// Fecha Hemoglobina Glicosilada
        /// </sumary>
        private DateTime PE_DateGlycosylatedHemoglobin;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultGlycosylatedHemoglobin() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Hemoglobina Glicosilada
        /// </sumary>
        /// <param name="PE_ResultGlycosylatedHemoglobin">Hemoglobina Glicosilada</param>
        /// <param name="PE_DateGlycosylatedHemoglobin">Fecha Hemoglobina Glicosilada</param>
        public RuntimeResult<string> Execute(double PE_ResultGlycosylatedHemoglobin, DateTime PE_DateGlycosylatedHemoglobin)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultGlycosylatedHemoglobin = PE_ResultGlycosylatedHemoglobin;
                this.PE_DateGlycosylatedHemoglobin = PE_DateGlycosylatedHemoglobin;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultGlycosylatedHemoglobin == 0 || PE_ResultGlycosylatedHemoglobin == 999 || PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20)) NonValidMessages.Add($"Los posibles valores son 0, 999 o estar entre 5 y 20, validar variable 109 'Hemoglobina Glicosilada'");
            if (!((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin) || PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01) || PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido, Variable 108 'Fecha Hemoglobina Glicosilada' en variable 109 'Hemoglobina Glicosilada'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultGlycosylatedHemoglobin == 0) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultGlycosylatedHemoglobin == 0) && (PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hemoglobina Glicosilada, debe registrar 1845-01-01 en Fecha Creatinina, validar variable 108 'Fecha Hemoglobina Glicosilada' y variable 109 'Hemoglobina Glicosilada'", this.FileName);
            }
            else if ((PE_ResultGlycosylatedHemoglobin == 0) && (PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hemoglobina Glicosilada, debe registrar 1845-01-01 en Fecha Creatinina, validar variable 108 'Fecha Hemoglobina Glicosilada' y variable 109 'Hemoglobina Glicosilada'", this.FileName);
            }
            else if ((PE_ResultGlycosylatedHemoglobin == 999) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor de Hemoglobina Glicosilada, debe registrar Fecha Hemoglobina Glicosilada, validar variable 108 'Fecha Hemoglobina Glicosilada' y variable 109 'Hemoglobina Glicosilada'", this.FileName);
            }
            else if ((PE_ResultGlycosylatedHemoglobin == 999) && (PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultGlycosylatedHemoglobin == 999) && (PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor de Hemoglobina Glicosilada, debe registrar Fecha Hemoglobina Glicosilada, validar variable 108 'Fecha Hemoglobina Glicosilada' y variable 109 'Hemoglobina Glicosilada'", this.FileName);
            }
            else if ((PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20) && (PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado Elisa para VIH
    /// </sumary> 
    public sealed class RUL_ResultElisaVIH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado Elisa para VIH
        /// </sumary>
        private long PE_ResultElisaVIH;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private DateTime PE_DateElisaTakingVIH;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultElisaVIH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado Elisa para VIH
        /// </sumary>
        /// <param name="PE_ResultElisaVIH">Resultado Elisa para VIH</param>
        /// <param name="PE_DateElisaTakingVIH">Fecha de Toma de Elisa para VIH</param>
        public RuntimeResult<string> Execute(long PE_ResultElisaVIH, DateTime PE_DateElisaTakingVIH)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultElisaVIH = PE_ResultElisaVIH;
                this.PE_DateElisaTakingVIH = PE_DateElisaTakingVIH;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH) || PE_ResultElisaVIH == 0)) NonValidMessages.Add($"Valor no valido. Validar variable 83 'Resultado elisa para VIH'");
            if (!(PE_DateElisaTakingVIH == new DateTime(1800, 01, 01) || PE_DateElisaTakingVIH > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateElisaTakingVIH))) NonValidMessages.Add($"Valor no valido. Validar variable 82 'Fecha de Toma de Elisa para VIH' en variable 83 'Resultado Elisa para VIH'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH) && PE_DateElisaTakingVIH == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH) && PE_DateElisaTakingVIH > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH) && (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateElisaTakingVIH))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1,2,22 la Fecha de Toma de Elisa para VIH debe registrar un dato diferente a 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 82 'Fecha de Toma de Elisa para VIH' o variable 83 'Resultado Elisa para VIH'", this.FileName);
            }
            else if (PE_ResultElisaVIH == 0 && PE_DateElisaTakingVIH == new DateTime(1800, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si la el dato registrado es 0 la Fecha de Toma de Elisa para VIH debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 82 'Fecha de Toma de Elisa para VIH' o variable 83 'Resultado Elisa para VIH'", this.FileName);
            }
            else if (PE_ResultElisaVIH == 0 && PE_DateElisaTakingVIH > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si la el dato registrado es 0 la Fecha de Toma de Elisa para VIH debe registrar 1845-01-01, 1805-01-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-01, validar variable 82 'Fecha de Toma de Elisa para VIH' o variable 83 'Resultado Elisa para VIH'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Creatinina
    /// </sumary> 
    public sealed class RUL_ResultCreatinine
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// parámetro de entrada de plantilla
        /// </sumary>
        private double PE_ResultCreatinine;
        /// <sumary>
        /// Fecha Creatinina
        /// </sumary>
        private DateTime PE_DateCreatinine;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultCreatinine() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Creatinina
        /// </sumary>
        /// <param name="PE_ResultCreatinine">parámetro de entrada de plantilla</param>
        /// <param name="PE_DateCreatinine">Fecha Creatinina</param>
        public RuntimeResult<string> Execute(double PE_ResultCreatinine, DateTime PE_DateCreatinine)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultCreatinine = PE_ResultCreatinine;
                this.PE_DateCreatinine = PE_DateCreatinine;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultCreatinine == 0 || PE_ResultCreatinine == 999 || PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)) NonValidMessages.Add($"Los datos validos son 0, 999 y un resultado entre 0.2 y 25 validar variable 107 'Creatinina'");
            if (!((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCreatinine) || PE_DateCreatinine == new DateTime(1800, 01, 01) || PE_DateCreatinine > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 106 'Fecha Creatinina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultCreatinine == 0) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCreatinine)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultCreatinine == 0) && (PE_DateCreatinine == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Creatinina, debe registrar 1845-01-01 en Fecha Creatinina, validar variable 107 'Creatinina', y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_ResultCreatinine == 0) && (PE_DateCreatinine > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Creatinina, debe registrar 1845-01-01 en Fecha Creatinina, validar variable 107 'Creatinina', y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_ResultCreatinine == 999) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCreatinine)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor de creatinina, debe registrar fecha de creatinina, validar variable 106 'Fecha Creatinina' y variable 107 'Creatinina'", this.FileName);
            }
            else if ((PE_ResultCreatinine == 999) && (PE_DateCreatinine == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultCreatinine == 999) && (PE_DateCreatinine > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCreatinine)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra valor de creatinina, debe registrar fecha de creatinina, validar variable 106 'Fecha Creatinina' y variable 107 'Creatinina'", this.FileName);
            }
            else if ((PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25) && (PE_DateCreatinine == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Citología Cervico uterina Resultados según Bethesda
    /// </sumary> 
    public sealed class RUL_ResultCervicalCytology
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Citología Cervico uterina Resultados según Bethesda
        /// </sumary>
        private long PE_ResultCervicalCytology;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Citología Cervico uterina
        /// </sumary>
        private DateTime PE_DateCervicalCytology;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultCervicalCytology() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Citología Cervico uterina Resultados según Bethesda
        /// </sumary>
        /// <param name="PE_ResultCervicalCytology">Citología Cervico uterina Resultados según Bethesda</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_DateCervicalCytology">Citología Cervico uterina</param>
        public RuntimeResult<string> Execute(long PE_ResultCervicalCytology, string PE_IdSex, DateTime PE_Birthdate, DateTime PE_Cutoffdate, DateTime PE_DateCervicalCytology)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultCervicalCytology = PE_ResultCervicalCytology;
                this.PE_IdSex = PE_IdSex;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_DateCervicalCytology = PE_DateCervicalCytology;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultCervicalCytology == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology))) NonValidMessages.Add($"Valor no valido, Variable 88 'Citología Cérvico uterina Resultados según Bethesda'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo'  en variable 88 'Citología Cervico uterina Resultados según Bethesda'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 88 'Citología Cervico uterina Resultados según Bethesda'");
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology) || PE_DateCervicalCytology == new DateTime(1845, 01, 01) || PE_DateCervicalCytology == new DateTime(1800, 01, 01) || PE_DateCervicalCytology > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 87 'Citología Cervico uterina' en variable 88 'Citología Cervico uterina Resultados según Bethesda'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina debe registrar sexo F, validar variable 87 'Citología Cervico uterina', variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina de 1845-01-01, debe registrar sexo M o ser menor de 10 años, validar variable 87 'Citología Cervico uterina', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina de 1845-01-01, debe registrar sexo M o ser menor de 10 años, validar variable 87 'Citología Cervico uterina', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de citologia cérvico uterina de 1845-01-01, debe registrar sexo M o ser menor de 10 años, validar variable 87 'Citología Cervico uterina', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Citología Cervico uterina debe registrar un dato diferente a 0 en Citología Cervico uterina Resultados según Bethesda, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' o variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Citología Cervico uterina debe registrar un dato diferente a 0 en Citología Cervico uterina Resultados según Bethesda, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' o variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_ResultCervicalCytology == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Citología Cervico uterina debe registrar un dato diferente a 0 en Citología Cervico uterina Resultados según Bethesda, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' o variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra resultado de citologia cervico uterina, debe registrar sexo F. Validar  variable 87 ''Citologia Cervico uterina'' y variable 10 'sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registrar resultado de citologia cérvico uterina, debe registar mayor de 10 años, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registrar resultado de citologia cérvico uterina, debe registar mayor de 10 años, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registrar resultado de citologia cérvico uterina, debe registar mayor de 10 años, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalCytology > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registrar resultado de citologia cérvico uterina, debe registar mayor de 10 años, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra resultado de citología cérvico uterina, debe registrar fecha de citología cérvico uterina, Validar variable 87 'Citología Cervico uterina'  y la variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra resultado de citología cérvico uterina, debe registrar fecha de citología cérvico uterina, Validar variable 87 'Citología Cervico uterina'  y la variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 999 }).Contains(PE_ResultCervicalCytology)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalCytology == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado de Biopsia Cervical
    /// </sumary> 
    public sealed class RUL_ResultCervicalBiopsy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado de Biopsia Cervical
        /// </sumary>
        private long PE_ResultCervicalBiopsy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha Biopsia Cervical
        /// </sumary>
        private DateTime PE_DateCervicalBiopsy;
        /// <sumary>
        /// Edad de la persona
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultCervicalBiopsy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado de Biopsia Cervical
        /// </sumary>
        /// <param name="PE_ResultCervicalBiopsy">Resultado de Biopsia Cervical</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_DateCervicalBiopsy">Fecha Biopsia Cervical</param>
        public RuntimeResult<string> Execute(long PE_ResultCervicalBiopsy, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, DateTime PE_DateCervicalBiopsy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultCervicalBiopsy = PE_ResultCervicalBiopsy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_DateCervicalBiopsy = PE_DateCervicalBiopsy;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy) || PE_ResultCervicalBiopsy == 0)) NonValidMessages.Add($"Valor no válido, Variable 94 'Resultado de Biopsia Cervical'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 94 'Resultado de Biopsia Cervical'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad'  en Variable 94  'Resultado de Biopsia Cervical'");
            if (!(PE_DateCervicalBiopsy == new DateTime(1800, 01, 01) || PE_DateCervicalBiopsy > new DateTime(1900, 01, 01) || PE_DateCervicalBiopsy == new DateTime(1845, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy))) NonValidMessages.Add($"Valor no válido, Variable 93 'Fecha Biopsia Cervical' en Variable 94 'Resultado de Biopsia Cervical'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de Biopsia Cervical, el sexo debe ser F, validar variable 10 'Sexo' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Resultado de Biopsia Cervical, la edad debe ser mayor a 10 años, validar variable 94 'Resultado de Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Resultado de Biopsia Cervical, la edad debe ser mayor a 10 años, validar variable 94 'Resultado de Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Resultado de Biopsia Cervical, la edad debe ser mayor a 10 años, validar variable 94 'Resultado de Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Resultado de Biopsia Cervical, la edad debe ser mayor a 10 años, validar variable 94 'Resultado de Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra resultado de biopsia cervical, debe registrar fecha de biopsia cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra resultado de biopsia cervical, debe registrar fecha de biopsia cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age < 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe registrar 1845-01-01 en Fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe ser sexo M o ser menor de 10 años, validar variable 94 'Resultado de Biopsia Cervical', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe ser sexo M o ser menor de 10 años, validar variable 94 'Resultado de Biopsia Cervical', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ResultCervicalBiopsy == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado de Biopsia Cervical, debe ser sexo M o ser menor de 10 años, validar variable 94 'Resultado de Biopsia Cervical', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Resultado Biopsia Seno por BACAF
    /// </sumary> 
    public sealed class RUL_ResultBiopsyBreast
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado Biopsia Seno por BACAF
        /// </sumary>
        private long PE_ResultBiopsyBreast;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha Resultado Biopsia Seno por BACAF
        /// </sumary>
        private DateTime PE_DateResultBreastBiopsy;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultBiopsyBreast() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Resultado Biopsia Seno por BACAF
        /// </sumary>
        /// <param name="PE_ResultBiopsyBreast">Resultado Biopsia Seno por BACAF</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_DateResultBreastBiopsy">Fecha Resultado Biopsia Seno por BACAF</param>
        public RuntimeResult<string> Execute(long PE_ResultBiopsyBreast, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_DateResultBreastBiopsy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultBiopsyBreast = PE_ResultBiopsyBreast;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_DateResultBreastBiopsy = PE_DateResultBreastBiopsy;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ResultBiopsyBreast == 0 || (new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast))) NonValidMessages.Add($"Valor no válido, Variable 101 'Biopsia Seno por BACAF'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 101 'Biopsia Seno por BACAF'");
            if (!(VC_Age < 35 || VC_Age >= 35)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en Variable 101 'Biopsia Seno por BACAF'");
            if (!(PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01) || PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01) || PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy))) NonValidMessages.Add($"Valor no valido, Variable 100 'Fecha Resultado Biopsia Seno por BACAF' en Variable 101  'Biopsia Seno por BACAF'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar 1845-01-01 en Fecha Resultado Biopsia Seno por BACAF, validar variable 100 'Fecha Resultado Biopsia Seno por BACAF' y variable 101 'Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar menor a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar menor a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ResultBiopsyBreast == 0) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Resultado Biopsia Seno por BACAF, debe registrar menor a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age < 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, el sexo debe ser F, validar variable 101 'Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age < 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age < 35) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 101 'Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, Debe registrar un dato diferente a 1845-01-01, 180501-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-0 en Fecha Resultado Biopsia Seno por BACAF, validar variable 101 'Biopsia Seno por BACAF' y variable 100 'Fecha Resultado Biopsia Seno por BACAF'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado Biopsia Seno por BACAF, Debe registrar un dato diferente a 1845-01-01, 180501-01,1810 -01-01, 1825-01-01,1830-01-01,1835-01-0 en Fecha Resultado Biopsia Seno por BACAF, validar variable 101 'Biopsia Seno por BACAF' y variable 100 'Fecha Resultado Biopsia Seno por BACAF'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Baciloscopia de Diagnóstico
    /// </sumary> 
    public sealed class RUL_ResultBacilloscopy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Baciloscopia de Diagnóstico
        /// </sumary>
        private long PE_ResultBacilloscopy;
        /// <sumary>
        /// Fecha Toma de Baciloscopia de Diagnóstico
        /// </sumary>
        private DateTime PE_DateBacilloscopy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ResultBacilloscopy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Baciloscopia de Diagnóstico
        /// </sumary>
        /// <param name="PE_ResultBacilloscopy">Baciloscopia de Diagnóstico</param>
        /// <param name="PE_DateBacilloscopy">Fecha Toma de Baciloscopia de Diagnóstico</param>
        public RuntimeResult<string> Execute(long PE_ResultBacilloscopy, DateTime PE_DateBacilloscopy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultBacilloscopy = PE_ResultBacilloscopy;
                this.PE_DateBacilloscopy = PE_DateBacilloscopy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy) || PE_ResultBacilloscopy == 4)) NonValidMessages.Add($"Valor no válido, Variable 113 'Baciloscopia de Diagnóstico'");
            if (!(PE_DateBacilloscopy == new DateTime(1800, 01, 01) || PE_DateBacilloscopy > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBacilloscopy))) NonValidMessages.Add($"Valor no valido, Variable 112 'Fecha Toma de Baciloscopia de Diagnostico' en Variable 113 'Baciloscopia de Diagnostico'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy)) && (PE_DateBacilloscopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy)) && (PE_DateBacilloscopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy)) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBacilloscopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra  valor de baciloscopia de diagnóstico, debe registrar valor de fecha toma de baciloscopia, validar variable 112 'Fecha Toma de Baciloscopia de Diagnóstico' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
            else if ((PE_ResultBacilloscopy == 4) && (PE_DateBacilloscopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Toma de Baciloscopia de Diagnostico, debe registrar un valor diferente a 4 en Baciloscopia de Diagnostico.  validar variable 112 ''Fecha Toma de Baciloscopia de Diagnostico'' y variable 113 ''Baciloscopia de Diagnostico'''", this.FileName);
            }
            else if ((PE_ResultBacilloscopy == 4) && (PE_DateBacilloscopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Toma de Baciloscopia de Diagnostico, debe registrar un valor diferente a 4 en Baciloscopia de Diagnostico.  validar variable 112 ''Fecha Toma de Baciloscopia de Diagnostico'' y variable 113 ''Baciloscopia de Diagnostico'''", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Calidad en la Muestra de Citología Cervicouterina
    /// </sumary> 
    public sealed class RUL_QualityCytologySample
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Calidad en la Muestra de Citología Cervicouterina
        /// </sumary>
        private long PE_QualityCytologySample;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Citología Cervico uterina Resultados según Bethesda
        /// </sumary>
        private long PE_ResultCervicalCytology;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_QualityCytologySample() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Calidad en la Muestra de Citología Cervicouterina
        /// </sumary>
        /// <param name="PE_QualityCytologySample">Calidad en la Muestra de Citología Cervicouterina</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_ResultCervicalCytology">Citología Cervico uterina Resultados según Bethesda</param>
        public RuntimeResult<string> Execute(long PE_QualityCytologySample, string PE_IdSex, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_ResultCervicalCytology)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_QualityCytologySample = PE_QualityCytologySample;
                this.PE_IdSex = PE_IdSex;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_ResultCervicalCytology = PE_ResultCervicalCytology;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample) || PE_QualityCytologySample == 0 || PE_QualityCytologySample == 999)) NonValidMessages.Add($"Valor no valido, Variable 89 'Calidad en la Muestra de Citología Cervicouterina'");
            if (!(PE_IdSex == "F" || PE_IdSex == "M")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 89 'Calidad en la Muestra de Citología Cervicouterina'");
            if (!(VC_Age >= 10 || VC_Age < 10)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 89 'Calidad en la Muestra de Citología Cervicouterina'");
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology) || PE_ResultCervicalCytology == 0 || PE_ResultCervicalCytology == 999)) NonValidMessages.Add($"Valor no válido, Variable:88 en variable 89 'Calidad en la Muestra de Citología Cervicouterina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra calidad en la Muestra de Citologia Cervicouterina debe registrar un valor diferente a 0 en la Citología Cervico uterina Resultados según Bethesda, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 4 }).Contains(PE_QualityCytologySample)) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Calidad en la Muestra de Citologia Cervicouterina, el sexo debe ser F. validar variable 89 ''Calidad en la Muestra de Citologia Cervicouterina'' y variable 10 'Sexo''", this.FileName);
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Calidad en la Muestra de Citología Cervicouterina debe ser menor de 10 años o ser sexo M, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Calidad en la Muestra de Citología Cervicouterina debe ser menor de 10 años o ser sexo M, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Calidad en la Muestra de Citología Cervicouterina no debe registrar un resultado en Citología Cervico uterina Resultados según Bethesda, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 89 'Calidad en la Muestra de Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Calidad en la Muestra de Citología Cervicouterina no debe registrar un resultado en Citología Cervico uterina Resultados según Bethesda, validar variable 88 'Citología Cervico uterina Resultados según Bethesda' y variable 89 'Calidad en la Muestra de Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 0) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra en Calidad en la Muestra de Citología Cervicouterina 999, debe registrar 999 en Citología Cervico uterina Resultados según Bethesda, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra en Calidad en la Muestra de Citología Cervicouterina 999, debe registrar 999 en Citología Cervico uterina Resultados según Bethesda, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Calidad en la Muestra de Citología Cervicouterina, la edad debe ser mayor a 10 años, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_QualityCytologySample == 999) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra 'Calidad en la Muestra de Citología Cervicouterina' , el sexo debe ser F . Validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Control Prenatal
    /// </sumary> 
    public sealed class RUL_PrenatalCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Control Prenatal
        /// </sumary>
        private long PE_PrenatalCtrl;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Gestacion
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_PrenatalCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Control Prenatal
        /// </sumary>
        /// <param name="PE_PrenatalCtrl">Control Prenatal</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Gestation">Gestacion</param>
        public RuntimeResult<string> Execute(long PE_PrenatalCtrl, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_Gestation)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_PrenatalCtrl = PE_PrenatalCtrl;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_Gestation = PE_Gestation;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_PrenatalCtrl == 999 || PE_PrenatalCtrl == 0 || PE_PrenatalCtrl <= 25)) NonValidMessages.Add($"Valor no valido. Validar variable 57 'Control Prenatal'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no valido. Validar variable  10 'Sexo' en variable 57 'Control Prenatal'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 57 'Control Prenatal'");
            if (!(PE_Gestation == 0 || PE_Gestation == 1 || (new long[] { 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 57 'Control Prenatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, debe ser gestante, validar variable 57 'Control Prenatal' y la variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, debe ser gestante, validar variable 57 'Control Prenatal' y la variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 999 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetValid(() => { return "0"; }, $"Si es mayor o igual de 10 años y menor de 60 debe registrar un dato diferente a 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante debe registrar un dato diferente a 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años o mayor o igual de 60 años debe registrar 0 en gestacion, validar variable 57 'Control Prenatal' y variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl == 0 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años o mayor o igual de 60 años debe registrar 0 en gestacion, validar variable 57 'Control Prenatal' y variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "M" && !(VC_Age >= 10 && VC_Age <= 59) && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, el sexo debe ser F, validar variable 57 'Control Prenatal' y la variable 10 'Sexo'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, debe ser gestante, validar variable 57 'Control Prenatal' y la variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "F" && VC_Age >= 10 && VC_Age <= 59 && (new long[] { 2, 21 }).Contains(PE_Gestation))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si tiene Control Prenatal, debe ser gestante, validar variable 57 'Control Prenatal' y la variable 14 'Gestación'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_PrenatalCtrl <= 25 && PE_IdSex == "F" && !(VC_Age >= 10 && VC_Age <= 59) && PE_Gestation == 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor o igual de 60 años debe registrar 0 en control prenatal, validar variable 57 'Control Prenatal' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// VPH
    /// </sumary> 
    public sealed class RUL_PPVPH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// VPH
        /// </sumary>
        private long PE_VPH;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_PPVPH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// VPH
        /// </sumary>
        /// <param name="PE_VPH">VPH</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de Corte</param>
        public RuntimeResult<string> Execute(long PE_VPH, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_VPH = PE_VPH;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_VPH == 0 || (new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_VPH))) NonValidMessages.Add($"Valor no valido. Validar variable 46 'Virus del Papiloma Humano (VPH)'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Validar variable 10 'Sexo' en variable 46 'Virus del Papiloma Humano (VPH)'");
            if (!(VC_Age >= 9 || VC_Age < 9)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 46 'Virus del Papiloma Humano (VPH)'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_VPH == 0 && PE_IdSex == "M" && VC_Age >= 9)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_VPH == 0 && PE_IdSex == "M" && VC_Age < 9)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_VPH == 0 && PE_IdSex == "F" && VC_Age >= 9)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Virus del Papiloma Humano (VPH), debe ser sexo M o ser menor de 9 años, validar variable 46 'Virus del Papiloma Humano (VPH)',variable 10 'sexo y variable 9 'Edad'", this.FileName);
            }
            else if (PE_VPH == 0 && PE_IdSex == "F" && VC_Age < 9)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_VPH) && PE_IdSex == "M" && VC_Age >= 9)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si aplicó vacuna contra Virus del Papiloma Humano (VPH), el sexo debe ser F, validar variable 46 'Virus del Papiloma Humano (VPH)' y la variable 10 'Sexo' ", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_VPH) && PE_IdSex == "M" && VC_Age < 9)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si aplicó vacuna contra Virus del Papiloma Humano (VPH), el sexo debe ser F, validar variable 46 'Virus del Papiloma Humano (VPH)' y la variable 10 'Sexo' ", this.FileName);
            }
            else if ((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_VPH) && PE_IdSex == "F" && VC_Age >= 9)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en variable 46 'Virus del Papiloma Humano (VPH)', debe ser mayor o igual a 9 años. Validar variable 9 'Edad' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// BCG
    /// </sumary> 
    public sealed class RUL_PPBCG
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// BCG
        /// </sumary>
        private long PE_BCG;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Variable que calcula la edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_PPBCG() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// BCG
        /// </sumary>
        /// <param name="PE_BCG">BCG</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_BCG, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BCG = PE_BCG;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_BCG == 0 || (new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_BCG))) NonValidMessages.Add($"Valor no valido debe ser 0, 1 ,16,17,18,19,20 y 22. Validar variable 35 'BCG'");
            if (!(VC_Age >= 6 || VC_Age < 6)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 35 'BCG'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_BCG == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_BCG == 0 && VC_Age < 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 6 años BCG debe tener dato de aplicación, validar variable 9 'Edad' y variable 35 'BCG'", this.FileName);
            }
            else if ((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_BCG) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra BCG, debe ser menor de 6 años, validar variable 9 'Edad' y variable 35 'BCG'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Polio
    /// </sumary> 
    public sealed class RUL_Polio
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Polio
        /// </sumary>
        private long Polio;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Polio() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Polio
        /// </sumary>
        /// <param name="Polio">Polio</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        public RuntimeResult<string> Execute(long Polio, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.Polio = Polio;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(Polio == 0 || Polio == 2 || Polio == 3 || Polio == 4 || Polio == 5 || (new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio))) NonValidMessages.Add($"Valor no valido, Variable 38 'Polio'");
            if (!(VC_Age >= 1 && VC_Age <= 119 || VC_Age >= 120 && VC_Age <= 179 || VC_Age >= 180 && VC_Age <= 359 || VC_Age >= 360 && VC_Age <= 539 || VC_Age >= 540 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en variable 38 'Polio'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((Polio == 0) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Polio,debe ser menor de 6 años. Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 0) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Polio,debe ser menor de 6 años. Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 0) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Polio,debe ser menor de 6 años. Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 0) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Polio,debe ser menor de 6 años. Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 0) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Polio,debe ser menor de 6 años. Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 0) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 2) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 2, 3, 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 2) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 2) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 2) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 2) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 2) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años en variable 38 'Polio' , no aplica. Validar variable 9 'Edad' ", this.FileName);
            }
            else if ((Polio == 3) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion  3, 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 3) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion  3, 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 3) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 3) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 3) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 3) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años en variable 38 'Polio' , no aplica. Validar variable 9 'Edad' ", this.FileName);
            }
            else if ((Polio == 4) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 4) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 4) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 4 y 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 4) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 4) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 4) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años en variable 38 'Polio' , no aplica. Validar variable 9 'Edad' ", this.FileName);
            }
            else if ((Polio == 5) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 5) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 5) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 5) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Polio,no debe ser opcion 5 .Validar variable 38 'Polio' y la variable 9 'Edad'", this.FileName);
            }
            else if ((Polio == 5) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((Polio == 5) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años en variable 38 'Polio' , no aplica. Validar variable 9 'Edad' ", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio)) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio)) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio)) && (VC_Age >= 180 && VC_Age <= 359))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio)) && (VC_Age >= 360 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(Polio)) && (VC_Age >= 540 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años en variable 38 'Polio' , no aplica. Validar variable 9 'Edad' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Neumococo
    /// </sumary> 
    public sealed class RUL_Pneumococcus
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Neumococo
        /// </sumary>
        private long PE_Pneumococcus;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Pneumococcus() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Neumococo
        /// </sumary>
        /// <param name="PE_Pneumococcus">Neumococo</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_Pneumococcus, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Pneumococcus = PE_Pneumococcus;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pneumococcus) || PE_Pneumococcus == 2 || PE_Pneumococcus == 3 || PE_Pneumococcus == 0)) NonValidMessages.Add($"Valor no válido, Variable 41 'Neumococo'");
            if (!(VC_Age >= 1 && VC_Age <= 119 || VC_Age >= 120 && VC_Age <= 179 || VC_Age >= 180 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 41 'Neumococo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pneumococcus)) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pneumococcus)) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pneumococcus)) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pneumococcus)) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor ó igual a 6 años , debe registrar 0-no aplica en Neumococo, validar variable 41 'Neumococo' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 2) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Neumococo, debe ser diferente a 2 o 3.Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 2) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pneumococcus == 2) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pneumococcus == 2) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor ó igual a 6 años , debe registrar 0-no aplica en Neumococo, validar variable 41 'Neumococo' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 3) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Neumococo, debe ser diferente a  3.Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 3) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Neumococo, debe ser diferente a  3.Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 3) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pneumococcus == 3) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor ó igual a 6 años , debe registrar 0-no aplica en Neumococo, validar variable 41 'Neumococo' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 0) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Neumococo,debe ser mayor o igual de 6 años. Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 0) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Neumococo,debe ser mayor o igual de 6 años. Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pneumococcus == 0) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Neumococo,debe ser mayor o igual de 6 años. Validar variable 41 'Neumococo' y la variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Pentavalente
    /// </sumary> 
    public sealed class RUL_Pentavalent
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Pentavalente
        /// </sumary>
        private long PE_Pentavalent;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Pentavalent() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Pentavalente
        /// </sumary>
        /// <param name="PE_Pentavalent">Pentavalente</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_Pentavalent, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Pentavalent = PE_Pentavalent;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pentavalent) || PE_Pentavalent == 2 || PE_Pentavalent == 3 || PE_Pentavalent == 0)) NonValidMessages.Add($"Valor no valido, Variable 37 'Pentavalente'");
            if (!(VC_Age >= 1 && VC_Age <= 119 || VC_Age >= 120 && VC_Age <= 179 || VC_Age >= 180 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 37 'Pentavalente'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pentavalent)) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pentavalent)) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pentavalent)) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_Pentavalent)) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente debe registrar una edad menor a 6 años, validar variable 37 'Pentavalente' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 2) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Pentavalente,no debe ser opción 2 y 3 .Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 2) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pentavalent == 2) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pentavalent == 2) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente debe registrar una edad menor a 6 años, validar variable 37 'Pentavalente' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 3) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Pentavalente,no debe ser opción 2 y 3 .Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 3) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad Pentavalente,no debe ser opción 2 y 3 .Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 3) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_Pentavalent == 3) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente debe registrar una edad menor a 6 años, validar variable 37 'Pentavalente' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 0) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente ,debe ser menor de 6 años. Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 0) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente ,debe ser menor de 6 años. Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Pentavalent == 0) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Pentavalente ,debe ser menor de 6 años. Validar variable 37 'Pentavalente' y la variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de ocupación 4505
    /// </sumary> 
    public sealed class RUL_OccupationCode
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de ocupacion
        /// </sumary>
        private string PE_OccupationCode;
        /// <sumary>
        /// Longitud Código de Ocupación
        /// </sumary>
        private long LongOccupationCode;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_OccupationCode() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de ocupación 4505
        /// </sumary>
        /// <param name="PE_OccupationCode">Codigo de ocupacion</param>
        public RuntimeResult<string> Execute(string PE_OccupationCode)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_OccupationCode = PE_OccupationCode;
                this.LongOccupationCode = FUNC_LongOccupationCode();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LongOccupationCode()
        {
            return PE_OccupationCode.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LongOccupationCode == 4 || LongOccupationCode != 4)) NonValidMessages.Add($"Valor no valido. Validar variable 12 'Código de ocupación'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LongOccupationCode == 4))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El código de ocupación no cumple con la longitud establecida, máximo 4 caracteres, validar variable 12 'Código de ocupación'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Obesidad o Desnutrición Proteico Calórica
    /// </sumary> 
    public sealed class RUL_ObesCaloProtMalnut
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Obesidad o Desnutrición Proteico Calórica
        /// </sumary>
        private long PE_ObesCaloProtMalnut;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte 4505
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha Diagnóstico Desnutrición Proteico Calórica
        /// </sumary>
        private DateTime PE_DateDiagMalnutrition;
        /// <sumary>
        /// Peso en kilogramos
        /// </sumary>
        private double PE_WeightKg;
        /// <sumary>
        /// Estatura o Talla  en Cm
        /// </sumary>
        private double PE_HeightCm;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Calculo del IMC
        /// </sumary>
        private double VC_WeightKg_HeightCm;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ObesCaloProtMalnut() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Obesidad o Desnutrición Proteico Calórica
        /// </sumary>
        /// <param name="PE_ObesCaloProtMalnut">Obesidad o Desnutrición Proteico Calórica</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte 4505</param>
        /// <param name="PE_DateDiagMalnutrition">Fecha Diagnóstico Desnutrición Proteico Calórica</param>
        /// <param name="PE_WeightKg">Peso en kilogramos</param>
        /// <param name="PE_HeightCm">Estatura o Talla  en Cm</param>
        public RuntimeResult<string> Execute(long PE_ObesCaloProtMalnut, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_DateDiagMalnutrition, double PE_WeightKg, double PE_HeightCm)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ObesCaloProtMalnut = PE_ObesCaloProtMalnut;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_DateDiagMalnutrition = PE_DateDiagMalnutrition;
                this.PE_WeightKg = PE_WeightKg;
                this.PE_HeightCm = PE_HeightCm;
                this.VC_Age = FUNC_VC_Age();
                this.VC_WeightKg_HeightCm = FUNC_VC_WeightKg_HeightCm();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private double FUNC_VC_WeightKg_HeightCm()
        {
            return (PE_WeightKg / (Math.Pow((PE_HeightCm * 0.01), 2)));
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ObesCaloProtMalnut == 1 || PE_ObesCaloProtMalnut == 2 || PE_ObesCaloProtMalnut == 3 || PE_ObesCaloProtMalnut == 21)) NonValidMessages.Add($"Valor no válido, debe ser 1-2-3 o 21 validar variable 21 'Obesidad o Desnutrición Proteico Calórica'");
            if (!(VC_Age >= 18 || VC_Age >= 0 && VC_Age <= 17)) NonValidMessages.Add($"Valor no válido, Revisar variable 9 'Fecha de Nacimiento'");
            if (!(VC_WeightKg_HeightCm >= 30 || VC_WeightKg_HeightCm < 30)) NonValidMessages.Add($"Valor no válido, para calculo de IMC. Validar variable 29 'peso' y variable 32 'talla'");
            if (!(PE_DateDiagMalnutrition == new DateTime(1800, 01, 01) || PE_DateDiagMalnutrition > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition))) NonValidMessages.Add($"Valor no válido, Variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar IMC mayor o igual a 30, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y para el IMC validar variable 30 Peso en Kilogramos y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar IMC mayor o igual a 30, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y para el IMC validar variable 30 Peso en Kilogramos y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar IMC mayor o igual a 30, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y para el IMC validar variable 30 Peso en Kilogramos y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 1) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Obesidad o Desnutrición Proteico Calórica debe registrar mayor o igual a 18 años, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en  Obesidad o Desnutrición Proteico Calórica, debe registrar Fecha Diagnóstico Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en  Obesidad o Desnutrición Proteico Calórica, debe registrar Fecha Diagnóstico Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en  Obesidad o Desnutrición Proteico Calórica, debe registrar Fecha Diagnóstico Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_ObesCaloProtMalnut == 2) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en  Obesidad o Desnutrición Proteico Calórica, debe registrar Fecha Diagnóstico Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra IMC mayor a 30 debe registrar 1 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica'  y para el IMC validar variable 30 Peso en Kilogramos y variable 32 Talla en Centímetros", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra IMC mayor a 30 debe registrar 1 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica'  y para el IMC validar variable 30 Peso en Kilogramos y variable 32 Talla en Centímetros", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra IMC mayor a 30 debe registrar 1 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica'  y para el IMC validar variable 30 Peso en Kilogramos y variable 32 Talla en Centímetros", this.FileName);
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 3) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 18) && (VC_WeightKg_HeightCm < 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm >= 30) && ((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateDiagMalnutrition)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_ObesCaloProtMalnut == 21) && (VC_Age >= 0 && VC_Age <= 17) && (VC_WeightKg_HeightCm < 30) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tuberculosis Multidrogoresistente
    /// </sumary> 
    public sealed class RUL_MultiDrugResisTuber
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tuberculosis Multidrogoresistente
        /// </sumary>
        private long PE_MultiDrugResisTuber;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_MultiDrugResisTuber() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tuberculosis Multidrogoresistente
        /// </sumary>
        /// <param name="PE_MultiDrugResisTuber">Tuberculosis Multidrogoresistente</param>
        public RuntimeResult<string> Execute(long PE_MultiDrugResisTuber)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_MultiDrugResisTuber = PE_MultiDrugResisTuber;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 0, 1, 2, 21 }).Contains(PE_MultiDrugResisTuber))) NonValidMessages.Add($"Valor no valido debe ser 0,1,2,21 Validar variable 19 'Tuberculosis Multidrogoresistente'.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"OK");
        }
        #endregion
    }
    /// <sumary>
    /// Lepra
    /// </sumary> 
    public sealed class RUL_Leprosy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Lepra
        /// </sumary>
        private long PE_Leprosy;
        /// <sumary>
        /// Tratamiento para Lepra
        /// </sumary>
        private long PE_TreatmentLeprosy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Leprosy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Lepra
        /// </sumary>
        /// <param name="PE_Leprosy">Lepra</param>
        /// <param name="PE_TreatmentLeprosy">Tratamiento para Lepra</param>
        public RuntimeResult<string> Execute(long PE_Leprosy, long PE_TreatmentLeprosy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Leprosy = PE_Leprosy;
                this.PE_TreatmentLeprosy = PE_TreatmentLeprosy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2 }).Contains(PE_Leprosy) || (new long[] { 3, 21 }).Contains(PE_Leprosy))) NonValidMessages.Add($"Valor no valido, debe ser 1.2.3 o 21. Validar variable 20 'Lepra'.");
            if (!(PE_TreatmentLeprosy == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentLeprosy))) NonValidMessages.Add($"Valor no valido. Validar variable 117 'Tratamiento para Lepra' en variable 20 'Lepra'.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 1, 2 }).Contains(PE_Leprosy) && PE_TreatmentLeprosy == 0)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Lepra, debe registrar en Tratamiento para Lepra un resultado diferente a 0, validar variable 20 'Lepra' y variable 117 'Tratamiento para Lepra'", this.FileName);
            }
            else if ((new long[] { 1, 2 }).Contains(PE_Leprosy) && (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentLeprosy))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 3, 21 }).Contains(PE_Leprosy) && PE_TreatmentLeprosy == 0)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra un dato diferente a 1 o 2 en Lepra, debe registrar 0 en Tratamiento para Lepra, validar variable 20 'Lepra' y variable 117 'Tratamiento para Lepra'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Influenza Niños
    /// </sumary> 
    public sealed class RUL_InfluenzaChildren
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Influenza Niños
        /// </sumary>
        private long PE_InfluenzaChildren;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_InfluenzaChildren() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Influenza Niños
        /// </sumary>
        /// <param name="PE_InfluenzaChildren">Influenza Niños</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_InfluenzaChildren, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InfluenzaChildren = PE_InfluenzaChildren;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_InfluenzaChildren) || PE_InfluenzaChildren == 2 || PE_InfluenzaChildren == 3 || PE_InfluenzaChildren == 0)) NonValidMessages.Add($"Valor no válido, Variable 42 'Influenza Niños'");
            if (!(VC_Age >= 1 && VC_Age <= 119 || VC_Age >= 120 && VC_Age <= 179 || VC_Age >= 180 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 42 'Influenza Niños'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_InfluenzaChildren)) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_InfluenzaChildren)) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_InfluenzaChildren)) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_InfluenzaChildren)) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor o igual a 6 años, debe registrar 0-No aplica en Influenza Niños, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 2) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Influenza niños,  debe ser diferente a  2 y 3.Validar variable 42 'Influenza Niños' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 2) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InfluenzaChildren == 2) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InfluenzaChildren == 2) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor o igual a 6 años, debe registrar 0-No aplica en Influenza Niños, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 3) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Influenza niños,  debe ser diferente a  3.Validar variable 42 'Influenza Niños' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 3) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Dosis registrada no corresponde para la edad Influenza niños,  debe ser diferente a  3.Validar variable 42 'Influenza Niños' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 3) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_InfluenzaChildren == 3) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mayor o igual a 6 años, debe registrar 0-No aplica en Influenza Niños, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 0) && (VC_Age >= 1 && VC_Age <= 119))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Influenza Niños, debe ser mayor o igual a 6 años, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 0) && (VC_Age >= 120 && VC_Age <= 179))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Influenza Niños, debe ser mayor o igual a 6 años, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_InfluenzaChildren == 0) && (VC_Age >= 180 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Influenza Niños, debe ser mayor o igual a 6 años, validar variable 42 'Influenza Niños' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Sexo
    /// </sumary> 
    public sealed class RUL_IdSex
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_IdSex() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Sexo
        /// </sumary>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IdSex = PE_IdSex;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "M", "F" }).Contains(PE_IdSex) || !(new string[] { "M", "F" }.Contains(PE_IdSex)))) NonValidMessages.Add($"Valor no valido. Validar variable 10 'sexo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new string[] { "M", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido. Debe ser M o F.Validar variable 10 'Sexo'.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tipo de documento 
    /// </sumary> 
    public sealed class RUL_IdentificationType
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tipo de identificacion 
        /// </sumary>
        private string PE_IdentificationType;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_IdentificationType() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tipo de documento 
        /// </sumary>
        /// <param name="PE_IdentificationType">Tipo de identificacion </param>
        public RuntimeResult<string> Execute(string PE_IdentificationType)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_IdentificationType = PE_IdentificationType;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new string[] { "RC", "TI", "CE", "CC", "PA", "CD", "NV", "MS", "AS" }).Contains(PE_IdentificationType))) NonValidMessages.Add($"Valor no valido para Tipo de identificación del usuario. Validar variable 3 'Tipo de identificación del usuario'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Hipertensión Inducida
    /// </sumary> 
    public sealed class RUL_HypertenInducPreg
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hipertensión Inducida
        /// </sumary>
        private long PE_HypertenInducPreg;
        /// <sumary>
        /// Genero de la persona
        /// </sumary>
        private string PE_Gender;
        /// <sumary>
        /// Fecha de Nascimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Obtiene La Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HypertenInducPreg() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Hipertensión Inducida
        /// </sumary>
        /// <param name="PE_HypertenInducPreg">Hipertensión Inducida</param>
        /// <param name="PE_Gender">Genero de la persona</param>
        /// <param name="PE_BirthDate">Fecha de Nascimiento</param>
        /// <param name="PE_CutDate">Fecha de Corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        public RuntimeResult<string> Execute(long PE_HypertenInducPreg, string PE_Gender, DateTime PE_BirthDate, DateTime PE_CutDate, long PE_Gestation)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HypertenInducPreg = PE_HypertenInducPreg;
                this.PE_Gender = PE_Gender;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutDate = PE_CutDate;
                this.PE_Gestation = PE_Gestation;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HypertenInducPreg == 0 || PE_HypertenInducPreg == 1 || (new long[] { 2, 21 }).Contains(PE_HypertenInducPreg))) NonValidMessages.Add($"Valor no valido. Validar variable 16 'Hipertensión Inducida por la Gestación'");
            if (!(PE_Gender == "M" || PE_Gender == "F")) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo' en variable 16 'Hipertensión Inducida por la Gestación'");
            if (!(PE_Gestation == 0 || PE_Gestation == 1 || (new long[] { 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 16 'Hipertensión Inducida por la Gestación'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 16 'Hipertensión Inducida por la Gestación'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra 0 en Hipertensión Inducida por la Gestación, debe registrar menos de 10 años o mayor o igual a 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'");
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra 0 en Hipertensión Inducida por la Gestación, debe registrar menos de 10 años o mayor o igual a 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'");
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HypertenInducPreg == 0) && (PE_Gender == "F") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 0 en  Hipertensión Inducida por la Gestación, debe registrar 0 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra 1 en Hipertensión Inducida por la Gestación, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipertensión Inducida por la Gestación, debe registrar 1 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación' ", this.FileName);
            }
            else if ((PE_HypertenInducPreg == 1) && (PE_Gender == "F") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipertensión Inducida por la Gestación, debe registrar 1 en Gestación, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 14 'Gestación' ", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "M") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar sexo F, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "F") && (PE_Gestation == 0) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "F") && (PE_Gestation == 0) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar entre 10 y 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "F") && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "F") && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar entre 10 y 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_HypertenInducPreg)) && (PE_Gender == "F") && ((new long[] { 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipertensión Inducida por la Gestación, debe registrar entre 10 y 60 años, validar variable 16 'Hipertensión Inducida por la Gestación' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// HepatitisA
    /// </sumary> 
    public sealed class RUL_HepatitisA
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// HepatitisA
        /// </sumary>
        private long PE_HepatitisA;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HepatitisA() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// HepatitisA
        /// </sumary>
        /// <param name="PE_HepatitisA">HepatitisA</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_HepatitisA, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HepatitisA = PE_HepatitisA;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HepatitisA == 0 || PE_HepatitisA == 1 || (new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_HepatitisA))) NonValidMessages.Add($"Valor no valido. Validar variable 44 'Hepatitis A'");
            if (!(VC_Age >= 6 || VC_Age < 1 || VC_Age >= 1 && VC_Age <= 5)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 44 'Hepatitis A'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_HepatitisA == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_HepatitisA == 0 && VC_Age < 1)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_HepatitisA == 0 && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra entre 1 y 6 años, debe registrar un dato diferente a 0 en Hepatitis A, validar variable 44 'Hepatitis A' y variable 9 'Edad' ", this.FileName);
            }
            else if (PE_HepatitisA == 1 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Hepatitis A, validar variable 44 'Hepatitis A' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_HepatitisA == 1 && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Hepatitis A, validar variable 44 'Hepatitis A' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_HepatitisA == 1 && VC_Age >= 1 && VC_Age <= 5)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_HepatitisA) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor o igual a 6 años debe registrar 0- no aplica en Hepatitis A, validar variable 44 'Hepatitis A' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_HepatitisA) && VC_Age < 1)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor a 1 años debe registrar 0- no aplica en Hepatitis A, validar variable 44 'Hepatitis A' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Hepatitis B menores de 1 año
    /// </sumary> 
    public sealed class RUL_HepatBUnderOneYear
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hepatitis B menores de 1 año
        /// </sumary>
        private long PE_HepatBUnderOneYear;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad 
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HepatBUnderOneYear() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Hepatitis B menores de 1 año
        /// </sumary>
        /// <param name="PE_HepatBUnderOneYear">Hepatitis B menores de 1 año</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_HepatBUnderOneYear, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HepatBUnderOneYear = PE_HepatBUnderOneYear;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HepatBUnderOneYear == 0 || (new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_HepatBUnderOneYear))) NonValidMessages.Add($"Valor no valido, debe ser 0, 1,16,17,18,19,20 o 22.. Validar variable 36 'Hepatitis B menores de 1 año'");
            if (!(VC_Age >= 6 || VC_Age < 6)) NonValidMessages.Add($"Valor no valido. Validar variable9 'edad' en variable 36 'Hepatitis B menores de 1 año'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_HepatBUnderOneYear == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_HepatBUnderOneYear == 0 && VC_Age < 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es menor a 6 años la opcion de Hepatitis B menores de 1 año debe ser diferente a 0, validar variable 36 'Hepatitis B menores de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 16, 17, 18, 19, 20, 22 }).Contains(PE_HepatBUnderOneYear) && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si es mayor de 6 años la opcion de Hepatitis B menores de 1 año debe ser 0 no aplica, validar variable 36 'Hepatitis B menores de 1 año' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Talla en Centímetros
    /// </sumary> 
    public sealed class RUL_HeightCm
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Talla en Centímetros
        /// </sumary>
        private double PE_HeightCm;
        /// <sumary>
        /// Talla en Centímetros
        /// </sumary>
        private DateTime PE_DateHeightCm;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HeightCm() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Talla en Centímetros
        /// </sumary>
        /// <param name="PE_HeightCm">Talla en Centímetros</param>
        /// <param name="PE_DateHeightCm">Talla en Centímetros</param>
        public RuntimeResult<string> Execute(double PE_HeightCm, DateTime PE_DateHeightCm)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HeightCm = PE_HeightCm;
                this.PE_DateHeightCm = PE_DateHeightCm;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HeightCm == 999 || PE_HeightCm < 225 || PE_HeightCm >= 225)) NonValidMessages.Add($"Valor no valido. Validar variable 32 'Talla en Centímetros'");
            if (!(PE_DateHeightCm == new DateTime(1800, 01, 01) || PE_DateHeightCm != new DateTime(1800, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 31 'Fecha de la Talla' en variable 32 'Talla en Centímetros'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HeightCm == 999) && (PE_DateHeightCm == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HeightCm == 999) && (PE_DateHeightCm != new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 999 en Talla en Centimetros, debe registrar 1845-01-01 en Fecha de la Talla, validar variable 31 'Fecha de la Talla' y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((PE_HeightCm < 225) && (PE_DateHeightCm == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Talle en Centimetros, debe registrar Fecha de la Talla , validar variable 32 'Talla en Centímetros' o variable 31 'Fecha de la Talla'", this.FileName);
            }
            else if ((PE_HeightCm < 225) && (PE_DateHeightCm != new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HeightCm >= 225) && (PE_DateHeightCm == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La talla en centimetros debe ser menor a 225, validar variable 32 'Talla en Centímetros'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La talla en centimetros debe ser menor a 225, validar variable 32 'Talla en Centímetros'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de habilitación IPS donde se toma Mamografía
    /// </sumary> 
    public sealed class RUL_HabilitationCodeMammography
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Mamografía
        /// </sumary>
        private string PE_HabilitationCodeMammography;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Resultado Mamografía
        /// </sumary>
        private long ResultMammography;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Longitud variable Código de habilitación IPS donde se toma Mamografía
        /// </sumary>
        private long VC_HabilitationCodeMammography;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabilitationCodeMammography() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de habilitación IPS donde se toma Mamografía
        /// </sumary>
        /// <param name="PE_HabilitationCodeMammography">Código de habilitación IPS donde se toma Mamografía</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="ResultMammography">Resultado Mamografía</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha corte</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCodeMammography, string PE_IdSex, long ResultMammography, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCodeMammography = PE_HabilitationCodeMammography;
                this.PE_IdSex = PE_IdSex;
                this.ResultMammography = ResultMammography;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_HabilitationCodeMammography = FUNC_VC_HabilitationCodeMammography();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_HabilitationCodeMammography()
        {
            return PE_HabilitationCodeMammography.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HabilitationCodeMammography == "999" || PE_HabilitationCodeMammography == "0" || !(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography)))) NonValidMessages.Add($"Valor no válido, Variable 98 'Código de habilitación IPS donde se toma Mamografía'");
            if (!(VC_HabilitationCodeMammography == 12 || VC_HabilitationCodeMammography != 12)) NonValidMessages.Add($"Valor no válido, Variable 98 'Código de habilitación IPS donde se toma Mamografía'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 98 'Código de habilitación IPS donde se toma Mamografía'");
            if (!(ResultMammography == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography))) NonValidMessages.Add($"Valor no válido, Variable 97 'Resultado Mamografía' en Variable 98 'Código de habilitación IPS donde se toma Mamografía'");
            if (!(VC_Age < 35 || VC_Age >= 35)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, debe registrar en Resultado Mamografía un dato diferente a 0, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, debe registrar en Resultado Mamografía un dato diferente a 0, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "999") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97 'Resultado Mamografía' y variable 98 ' Código de habilitación IPS donde se toma Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97 'Resultado Mamografía' y variable 98 ' Código de habilitación IPS donde se toma Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe ser menor de 35 años o ser sexo M, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' , variable 9 'Fecha de Nacimiento' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97' Código de habilitación IPS donde se toma Mamografía' y variable 98 ' Resultado Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe ser menor de 35 años o ser sexo M, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' , variable 9 'Fecha de Nacimiento' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97 'Resultado Mamografía' y variable 98 ' Código de habilitación IPS donde se toma Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97 'Resultado Mamografía' y variable 98 ' Código de habilitación IPS donde se toma Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe registrar 0 en Resultado Mamografía, validar variable 97' Código de habilitación IPS donde se toma Mamografía' y variable 98 ' Resultado Mamografía'", this.FileName);
            }
            else if ((PE_HabilitationCodeMammography == "0") && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Mamografía, debe ser menor de 35 años o ser sexo M, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' , variable 9 'Fecha de Nacimiento' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, el sexo registrado debe ser F, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, debe registrar en Resultado Mamografía un dato diferente a 0, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Mamografía, la edad debe ser mayor o igual a 35 años, validar variable 98 'Código de habilitación IPS donde se toma Mamografía' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && (ResultMammography == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeMammography))) && (VC_HabilitationCodeMammography != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 999 }).Contains(ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en  varible 98 'Código de habilitación IPS donde se toma Mamografía'', debe ser de 12 caracteres.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de habilitación IPS donde se toma Citología Cervicouterina
    /// </sumary> 
    public sealed class RUL_HabilitationCodeCytology
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Citología Cervicouterina
        /// </sumary>
        private string PE_HabilitationCodeCytology;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Calidad en la Muestra de Citología Cervicouterina
        /// </sumary>
        private long PE_QualityCytologySample;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Citología Cervicouterina
        /// </sumary>
        private long VC_HabilitationCodeCytology;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabilitationCodeCytology() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de habilitación IPS donde se toma Citología Cervicouterina
        /// </sumary>
        /// <param name="PE_HabilitationCodeCytology">Código de habilitación IPS donde se toma Citología Cervicouterina</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha corte</param>
        /// <param name="PE_QualityCytologySample">Calidad en la Muestra de Citología Cervicouterina</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCodeCytology, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, long PE_QualityCytologySample)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCodeCytology = PE_HabilitationCodeCytology;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_QualityCytologySample = PE_QualityCytologySample;
                this.VC_Age = FUNC_VC_Age();
                this.VC_HabilitationCodeCytology = FUNC_VC_HabilitationCodeCytology();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_HabilitationCodeCytology()
        {
            return PE_HabilitationCodeCytology.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HabilitationCodeCytology == "999" || PE_HabilitationCodeCytology == "0" || !(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology)))) NonValidMessages.Add($"Valor no válido, Variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'");
            if (!(VC_HabilitationCodeCytology == 12 || VC_HabilitationCodeCytology != 12)) NonValidMessages.Add($"Valor no válido, Variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'");
            if (!(PE_QualityCytologySample == 0 || (new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample))) NonValidMessages.Add($"Valor no válido, Variable 89 'Calidad en la Muestra de Citología Cervicouterina' en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'.", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'.", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, la edad debe ser mayor o igual a 10 años, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, la edad debe ser mayor o igual a 10 años, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, debe registrar en Calidad en la Muestra de Citología Cervicouterina un dato diferente a 0, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'.", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "999") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Citología Cervicouterina, debe registrar 0 en Calidad en la Muestra de Citología Cervicouterina, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'.", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Citología Cervicouterina, debe registrar 0 en Calidad en la Muestra de Citología Cervicouterina, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'.", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Citología Cervicouterina, debe registrar 0 en Calidad en la Muestra de Citología Cervicouterina, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Citología Cervicouterina, debe ser menor de 10 años o ser sexo M, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina', variable 9 'Edad' y variable 10 'Sexo'");
            }
            else if ((PE_HabilitationCodeCytology == "0") && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Citología Cervicouterina, debe ser menor de 10 años o ser sexo M, validar variable 9 'Edad'0 'Código de habilitación IPS donde se toma Citología Cervicouterina', variable 9 'Edad' y variable 10 'Sexo'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, el sexo registrado debe ser F, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, la edad debe ser mayor o igual a 10 años, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 9 'Edad'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, la edad debe ser mayor o igual a 10 años, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina' y variable 9 'Edad'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Citología Cervicouterina, debe registrar en Calidad en la Muestra de Citología Cervicouterina un dato diferente a 0, validar variable 89 'Calidad en la Muestra de Citología Cervicouterina' y variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'.", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 999 }).Contains(PE_QualityCytologySample)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeCytology))) && (VC_HabilitationCodeCytology != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_QualityCytologySample == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Citología Cervicouterina, no cumple con la longitud establecida, validar variable 90 'Código de habilitación IPS donde se toma Citología Cervicouterina'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de habilitación IPS donde se toma Colposcopia
    /// </sumary> 
    public sealed class RUL_HabilitationCodeColposcopy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Colposcopia
        /// </sumary>
        private string PE_HabilitationCodeColposcopy;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha Colposcopia
        /// </sumary>
        private DateTime PE_DateColposcopy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Longitud variable Código de habilitación IPS donde se toma Colposcopia
        /// </sumary>
        private long VC_HabilitationCodeColposcopy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabilitationCodeColposcopy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de habilitación IPS donde se toma Colposcopia
        /// </sumary>
        /// <param name="PE_HabilitationCodeColposcopy">Código de habilitación IPS donde se toma Colposcopia</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_DateColposcopy">Fecha Colposcopia</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha corte</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCodeColposcopy, string PE_IdSex, DateTime PE_DateColposcopy, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCodeColposcopy = PE_HabilitationCodeColposcopy;
                this.PE_IdSex = PE_IdSex;
                this.PE_DateColposcopy = PE_DateColposcopy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_HabilitationCodeColposcopy = FUNC_VC_HabilitationCodeColposcopy();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_HabilitationCodeColposcopy()
        {
            return PE_HabilitationCodeColposcopy.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HabilitationCodeColposcopy == "999" || PE_HabilitationCodeColposcopy == "0" || !(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy)))) NonValidMessages.Add($"Valor no válido, Variable 92 'Código de habilitación IPS donde se toma Colposcopia'");
            if (!(VC_HabilitationCodeColposcopy == 12 || VC_HabilitationCodeColposcopy != 12)) NonValidMessages.Add($"Valor no válido, Variable 92 'Código de habilitación IPS donde se toma Colposcopia'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 92 'Código de habilitación IPS donde se toma Colposcopia'");
            if (!(VC_Age >= 10 || VC_Age >= 0 && VC_Age <= 9)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en variable 92 'Código de habilitación IPS donde se toma Colposcopia'");
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy) || PE_DateColposcopy == new DateTime(1800, 01, 01) || PE_DateColposcopy > new DateTime(1900, 01, 01) || PE_DateColposcopy == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 91 'Fecha Colposcopia' en variable 92 'Código de habilitación IPS donde se toma Colposcopia'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, debe registrar en Fecha Colposcopia 1800-01-01 ó >1900-01-01, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, debe registrar en Fecha Colposcopia 1800-01-01 ó >1900-01-01, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "999") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido  en variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe ser menor de 10 años o ser sexo M, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe ser menor de 10 años o ser sexo M, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe ser menor de 10 años o ser sexo M, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Colposcopia, debe registrar 1845-01-01 en Fecha Colposcopia, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((PE_HabilitationCodeColposcopy == "0") && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, el sexo registrado debe ser F, validar variable 91 'Fecha Colposcopia' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, debe registrar en Fecha Colposcopia 1800-01-01 ó >1900-01-01, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, debe registrar en Fecha Colposcopia 1800-01-01 ó >1900-01-01, validar variable 91 'Fecha Colposcopia' y variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy == 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Colposcopia, la edad debe ser mayor o igual a 10 años, validar variable 91 'Fecha Colposcopia' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_DateColposcopy == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabilitationCodeColposcopy))) && (VC_HabilitationCodeColposcopy != 12) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_DateColposcopy > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Colposcopia, no cumple con la longitud establecida, validar variable 92 'Código de habilitación IPS donde se toma Colposcopia'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de habilitación IPS donde se toma Biopsia Cervical
    /// </sumary> 
    public sealed class RUL_HabilitationCodeBiopsy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Cervical
        /// </sumary>
        private string PE_HabilitationCodeBiopsy;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Resultado de Biopsia Cervical
        /// </sumary>
        private long PE_ResultCervicalBiopsy;
        /// <sumary>
        /// Variable de plantilla
        /// </sumary>
        private long VC_HabilitationCodeBiopsy;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabilitationCodeBiopsy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Cervical
        /// </sumary>
        /// <param name="PE_HabilitationCodeBiopsy">Código de habilitación IPS donde se toma Biopsia Cervical</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_ResultCervicalBiopsy">Resultado de Biopsia Cervical</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCodeBiopsy, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, long PE_ResultCervicalBiopsy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCodeBiopsy = PE_HabilitationCodeBiopsy;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_ResultCervicalBiopsy = PE_ResultCervicalBiopsy;
                this.VC_HabilitationCodeBiopsy = FUNC_VC_HabilitationCodeBiopsy();
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_HabilitationCodeBiopsy()
        {
            return PE_HabilitationCodeBiopsy.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HabilitationCodeBiopsy == "0" || PE_HabilitationCodeBiopsy == "999" || !(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy)))) NonValidMessages.Add($"Valor no válido, Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'");
            if (!(VC_HabilitationCodeBiopsy == 12 || VC_HabilitationCodeBiopsy != 12)) NonValidMessages.Add($"Valor no válido, Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'");
            if (!(PE_ResultCervicalBiopsy == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy))) NonValidMessages.Add($"Valor no válido, Variable 94 'Resultado de Biopsia Cervical' en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Biopsia Cervical, debe registrar 0 en Resultado de Biopsia Cervical, validar variable 94 'Resultado de Biopsia Cervical' y variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Biopsia Cervical, debe registrar 0 en Resultado de Biopsia Cervical, validar variable 94 'Resultado de Biopsia Cervical' y variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Biopsia Cervical, debe registrar 0 en Resultado de Biopsia Cervical, validar variable 94 'Resultado de Biopsia Cervical' y variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabilitationCodeBiopsy == "0") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Biopsia Cervical, debe ser menor de 10 años o ser sexo M, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en Variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, la edad debe ser mayor o igual a 10 años, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, la edad debe ser mayor o igual a 10 años, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, debe registrar en Resultado de Biopsia Cervical un dato diferente a 0, validar variable 94 'Resultado de Biopsia Cervical' y variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((PE_HabilitationCodeBiopsy == "999") && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, el sexo registrado debe ser F, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, la edad debe ser mayor o igual a 10 años, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, la edad debe ser mayor o igual a 10 años, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Cervical, debe registrar en Resultado de Biopsia Cervical un dato diferente a 0, validar variable 94 'Resultado de Biopsia Cervical' y variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy == 12) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age < 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 999 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else if ((!(new string[] { "0", "999" }.Contains(PE_HabilitationCodeBiopsy))) && (VC_HabilitationCodeBiopsy != 12) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El Código de habilitación IPS donde se toma Biopsia Cervical, no cumple con la longitud establecida, validar variable 95 'Código de habilitación IPS donde se toma Biopsia Cervical'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Recibe codigo de habilitacion IPS
    /// </sumary> 
    public sealed class RUL_HabilitationCode
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Codigo de habilitacion
        /// </sumary>
        private string PE_HabilitationCode;
        /// <sumary>
        /// Longitud variable codigo de habiltiacion
        /// </sumary>
        private long LenghtHabilitation;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabilitationCode() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Recibe codigo de habilitacion IPS
        /// </sumary>
        /// <param name="PE_HabilitationCode">Codigo de habilitacion</param>
        public RuntimeResult<string> Execute(string PE_HabilitationCode)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabilitationCode = PE_HabilitationCode;
                this.LenghtHabilitation = FUNC_LenghtHabilitation();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_LenghtHabilitation()
        {
            return PE_HabilitationCode.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(LenghtHabilitation == 12 || LenghtHabilitation != 12)) NonValidMessages.Add($"Valor no valido. Máximo 12 caracteres o 999. Validar variable 3 'Tipo de identificación del usuario'");
            if (!(PE_HabilitationCode == "999" || PE_HabilitationCode != "999")) NonValidMessages.Add($"Valor no valido, variable 2 'Código de habilitación IPS primaria'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((LenghtHabilitation == 12) && (PE_HabilitationCode == "999"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido. Máximo 12 caracteres o 999. Validar variable 3 'Tipo de identificación del usuario'", this.FileName);
            }
            else if ((LenghtHabilitation == 12) && (PE_HabilitationCode != "999"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((LenghtHabilitation != 12) && (PE_HabilitationCode == "999"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"El codigo de habilitacion no cumple con la longitud establecida, validar variable 2 'Código de habilitación IPS primaria'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código de habilitación IPS donde se toma Biopsia Seno por BACAF
    /// </sumary> 
    public sealed class RUL_HabiliationCodeBiopsyBreast
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Seno por BACAF
        /// </sumary>
        private string PE_HabiliationCodeBiopsyBreast;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Resultado Biopsia Seno por BACAF
        /// </sumary>
        private long PE_ResultBiopsyBreast;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Longitud variable Código de habilitación IPS donde se toma Biopsia Seno por BACAF
        /// </sumary>
        private long VC_HabiliationCodeBiopsyBreast;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_HabiliationCodeBiopsyBreast() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código de habilitación IPS donde se toma Biopsia Seno por BACAF
        /// </sumary>
        /// <param name="PE_HabiliationCodeBiopsyBreast">Código de habilitación IPS donde se toma Biopsia Seno por BACAF</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_ResultBiopsyBreast">Resultado Biopsia Seno por BACAF</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha corte</param>
        public RuntimeResult<string> Execute(string PE_HabiliationCodeBiopsyBreast, string PE_IdSex, long PE_ResultBiopsyBreast, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_HabiliationCodeBiopsyBreast = PE_HabiliationCodeBiopsyBreast;
                this.PE_IdSex = PE_IdSex;
                this.PE_ResultBiopsyBreast = PE_ResultBiopsyBreast;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_HabiliationCodeBiopsyBreast = FUNC_VC_HabiliationCodeBiopsyBreast();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_HabiliationCodeBiopsyBreast()
        {
            return PE_HabiliationCodeBiopsyBreast.ToString().Length;
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_HabiliationCodeBiopsyBreast == "999" || PE_HabiliationCodeBiopsyBreast == "0" || !(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast)))) NonValidMessages.Add($"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'");
            if (!(VC_HabiliationCodeBiopsyBreast == 12 || VC_HabiliationCodeBiopsyBreast != 12)) NonValidMessages.Add($"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'");
            if (!(PE_ResultBiopsyBreast == 0 || (new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast))) NonValidMessages.Add($"Valor no válido, Variable 101 'Biopsia Seno por BACAF' en Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'");
            if (!(VC_Age < 35 || VC_Age >= 35)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, debe registrar en Resultado Biopsia Seno por BACAF un dato diferente a 0, validar variable 101 'Resultado Biopsia Seno por BACAF' y variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "999") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_HabiliationCodeBiopsyBreast == "0") && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Código de habilitación IPS donde se toma Biopsia Seno por BACAF, debe ser menor de 35 años o ser sexo M, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF', variable 9 'Edad' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, el sexo registrado debe ser F, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, debe registrar en Resultado Biopsia Seno por BACAF un dato diferente a 0, validar variable 101 'Resultado Biopsia Seno por BACAF' y variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Código de habilitación IPS donde se toma Biopsia Seno por BACAF, la edad debe ser mayor o igual a 35 años, validar variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast == 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "M") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && (PE_ResultBiopsyBreast == 0) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else if ((!(new string[] { "999", "0" }.Contains(PE_HabiliationCodeBiopsyBreast))) && (VC_HabiliationCodeBiopsyBreast != 12) && (PE_IdSex == "F") && ((new long[] { 1, 2, 3, 4, 5, 999 }).Contains(PE_ResultBiopsyBreast)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no válido, Variable 102 'Código de habilitación IPS donde se toma Biopsia Seno por BACAF' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Gestación
    /// </sumary> 
    public sealed class RUL_Gestation
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Gestation
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Genero
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_CutDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Gestation() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Gestación
        /// </sumary>
        /// <param name="PE_Gestation">Gestation</param>
        /// <param name="PE_IdSex">Genero</param>
        /// <param name="PE_BirthDate">Fecha de Nacimiento</param>
        /// <param name="PE_CutDate">Fecha de Corte</param>
        public RuntimeResult<string> Execute(long PE_Gestation, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Gestation = PE_Gestation;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutDate = PE_CutDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_Gestation == 0 || PE_Gestation == 21 || (new long[] { 1, 2 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no valido, debe ser 0,1,2 o 21. Validar variable 14 'Gestación'.");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Validar variable 10 'Sexo', en variable 14 'Gestación'");
            if (!(!(VC_Age >= 10 && VC_Age <= 59) || VC_Age >= 10 && VC_Age <= 59)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 14 'Gestación'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_Gestation == 0) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Gestation == 0) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Gestation == 0) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Gestation == 0) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en gestación debe registrar sexo M o ser menor de 10 años o mayor o igual de 60 años, validar variable 14 'Gestación' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_Gestation == 21) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 21 en Gestación debe registrar sexo F, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_Gestation == 21) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 21 en Gestación debe registrar sexo F, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_Gestation == 21) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_Gestation == 21) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 2 }).Contains(PE_Gestation)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 o 2 en Gestación debe registrar sexo F, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(PE_Gestation)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 o 2 en Gestación debe registrar sexo F, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new long[] { 1, 2 }).Contains(PE_Gestation)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en gestación debe registrar entre 10 y 60 años, validar variable 14 'Gestación' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Sífilis Gestacional o congénita
    /// </sumary> 
    public sealed class RUL_GestaCongeSyphilis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Sífilis Gestacional o congénita
        /// </sumary>
        private long PE_GestaCongeSyphilis;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Infecciones de Trasmisión Sexual
        /// </sumary>
        private long PE_SexTransInfect;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_GestaCongeSyphilis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Sífilis Gestacional o congénita
        /// </sumary>
        /// <param name="PE_GestaCongeSyphilis">Sífilis Gestacional o congénita</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        /// <param name="PE_SexTransInfect">Infecciones de Trasmisión Sexual</param>
        public RuntimeResult<string> Execute(long PE_GestaCongeSyphilis, string PE_IdSex, long PE_Gestation, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_SexTransInfect)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_GestaCongeSyphilis = PE_GestaCongeSyphilis;
                this.PE_IdSex = PE_IdSex;
                this.PE_Gestation = PE_Gestation;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_SexTransInfect = PE_SexTransInfect;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_GestaCongeSyphilis == 0 || PE_GestaCongeSyphilis == 1 || PE_GestaCongeSyphilis == 2 || (new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis))) NonValidMessages.Add($"Valor no válido, Variable 15 'Sífilis Gestacional o congénita'");
            if (!(PE_IdSex == "F" || PE_IdSex == "M")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 15 'Sífilis Gestacional o congénita' ");
            if (!((new long[] { 0, 2, 21 }).Contains(PE_Gestation) || PE_Gestation == 1)) NonValidMessages.Add($"Valor no válido, Variable 14 'Gestación' en variable 15 'Sífilis Gestacional o congénita' ");
            if (!(VC_Age >= 1 && VC_Age <= 89 || VC_Age >= 90 && VC_Age <= 21899 || VC_Age >= 21900)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 15 'Sífilis Gestacional o congénita' ");
            if (!(PE_SexTransInfect == 1 || PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21)) NonValidMessages.Add($"Valor no válido, Variable 24 'Infecciones de Trasmisión Sexual' en variable 15 'Sífilis Gestacional o congénita' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe ser mayor de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe ser mayor de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Sífilis Gestacional o congénita, debe registrar un valor diferente a 1 en Gestación, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 0) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en gestación,validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en Infecciones de Trasmisión Sexual, validar variable 15 'Sífilis Gestacional o congénita' y variable 24 'Infecciones de Trasmisión Sexual'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar 1 en Infecciones de Trasmisión Sexual, validar variable 15 'Sífilis Gestacional o congénita' y variable 24 'Infecciones de Trasmisión Sexual'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar menos de 60 años, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar menos de 60 años, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 1) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Sífilis Gestacional o congénita, debe registrar sexo M, validar variable 15 'Sífilis Gestacional o congénita' y variable 14 'Gestación'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_GestaCongeSyphilis == 2) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Sífilis Gestacional o congénita debe ser menos de 3 meses, validar variable 15 'Sífilis Gestacional o congénita' y variable 9 'Edad'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "F") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 21900) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 1 && VC_Age <= 89) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 90 && VC_Age <= 21899) && (PE_SexTransInfect >= 2 && PE_SexTransInfect <= 21))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_GestaCongeSyphilis)) && (PE_IdSex == "M") && (PE_Gestation == 1) && (VC_Age >= 21900) && (PE_SexTransInfect == 1))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Edad Gestacional al Nacer
    /// </sumary> 
    public sealed class RUL_GestaAgeBorn
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Edad Gestacional al Nacer
        /// </sumary>
        private long PE_GestaAgeBorn;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Calcula la edad de la persona
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_GestaAgeBorn() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Edad Gestacional al Nacer
        /// </sumary>
        /// <param name="PE_GestaAgeBorn">Edad Gestacional al Nacer</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_GestaAgeBorn, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_GestaAgeBorn = PE_GestaAgeBorn;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_GestaAgeBorn == 999 || PE_GestaAgeBorn == 0 || PE_GestaAgeBorn <= 43 || PE_GestaAgeBorn > 43)) NonValidMessages.Add($"Valor no valido. Validar variable 34 'Edad Gestacional al Nacer'");
            if (!(VC_Age >= 6 || VC_Age < 6)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 34 'Edad Gestacional al Nacer'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_GestaAgeBorn == 999 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es mayor ó igual a 6 años, en edad gestacional al nacer debe ser no aplica, validar variable 34 'Edad Gestacional al Nacer' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_GestaAgeBorn == 999 && VC_Age < 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_GestaAgeBorn == 0 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_GestaAgeBorn == 0 && VC_Age < 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Edad Gestacional al Nacer, debe ser mayor o igual a 6 años, validar variable 34 'Edad Gestacional al Nacer' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_GestaAgeBorn <= 43 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Edad Gestacional al Nacer, la edad de la persona debe ser menor a 6 años, validar variable 34 'Edad Gestacional al Nacer' y variable 9 'Edad'", this.FileName);
            }
            else if (PE_GestaAgeBorn <= 43 && VC_Age < 6)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_GestaAgeBorn > 43 && VC_Age >= 6)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Edad gestacional al nacer no acorde  a semanas de gestación, validar variable 34 'Edad Gestacional al Nacer' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Edad gestacional al nacer no acorde  a semanas de gestación, validar variable 34 'Edad Gestacional al Nacer' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Ácido Fólico en el Último Control Prenatal
    /// </sumary> 
    public sealed class RUL_FolicAcidLastPrenaCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Ácido Fólico en el Último Control Prenatal
        /// </sumary>
        private long PE_FolicAcidLastPrenaCtrl;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_FolicAcidLastPrenaCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Ácido Fólico en el Último Control Prenatal
        /// </sumary>
        /// <param name="PE_FolicAcidLastPrenaCtrl">Suministro de Ácido Fólico en el Último Control Prenatal</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(long PE_FolicAcidLastPrenaCtrl, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_Gestation, string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FolicAcidLastPrenaCtrl = PE_FolicAcidLastPrenaCtrl;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_Gestation = PE_Gestation;
                this.PE_IdSex = PE_IdSex;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_FolicAcidLastPrenaCtrl == 0 || (new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl))) NonValidMessages.Add($"Valor no valido. Validar variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'");
            if (!(!(VC_Age >= 10 && VC_Age <= 60) || VC_Age >= 10 && VC_Age <= 60)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'");
            if (!(PE_Gestation == 0 || PE_Gestation == 1 || PE_Gestation == 2 || PE_Gestation == 21)) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'");
            if (!((new string[] { "m", "M" }).Contains(PE_IdSex) || (new string[] { "f", "F" }).Contains(PE_IdSex))) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo' en variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si es mayor o igual a 10 años y menor de 60 años debe registrar un dato diferente a 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestacion, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestacion, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_FolicAcidLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y vaiable 59", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y vaiable 59", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser Sexo F, validar variable 10 'Sexo' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && ((new string[] { "f", "F" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FolicAcidLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && ((new string[] { "m", "M" }).Contains(PE_IdSex)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Primer Nombre
    /// </sumary> 
    public sealed class RUL_FirstName
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Valida el primer nombre
        /// </sumary>
        private string PE_FirstName;
        /// <sumary>
        /// Validad Longitud Primer nombre
        /// </sumary>
        private long VC_FirstName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_FirstName() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Primer Nombre
        /// </sumary>
        /// <param name="PE_FirstName">Valida el primer nombre</param>
        public RuntimeResult<string> Execute(string PE_FirstName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FirstName = PE_FirstName;
                this.VC_FirstName = FUNC_VC_FirstName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_FirstName()
        {
            return PE_FirstName.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_FirstName == PE_FirstName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_FirstName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_FirstName >= 1 && VC_FirstName <= 30)) NonValidMessages.Add($"El valor registrado no puede ser superior a 30 caracteres o estar vacío, validar variable 7 'Primer nombre del usuario'");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"Los datos deben ser en letras MAYÚSCULAS, validar variable 7 'Primer nombre del usuario' ");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"Los datos deben ser sin caracteres especiales y sin tildes, validar variable 7 'Primer nombre del usuario' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
        }
        #endregion
    }
    /// <sumary>
    /// Primer apellido
    /// </sumary> 
    public sealed class RUL_FirstLastName
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private string PE_FirstLastName;
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        private long VC_FirstLastName;
        /// <sumary>
        /// Valida mayuscula
        /// </sumary>
        private bool VC_Mayus;
        /// <sumary>
        /// Caracteres Espciales
        /// </sumary>
        private bool VC_CaractEspec;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_FirstLastName() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Primer apellido
        /// </sumary>
        /// <param name="PE_FirstLastName">Primer apellido</param>
        public RuntimeResult<string> Execute(string PE_FirstLastName)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FirstLastName = PE_FirstLastName;
                this.VC_FirstLastName = FUNC_VC_FirstLastName();
                this.VC_Mayus = FUNC_VC_Mayus();
                this.VC_CaractEspec = FUNC_VC_CaractEspec();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_FirstLastName()
        {
            return PE_FirstLastName.ToString().Length;
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Mayus()
        {
            return
    (PE_FirstLastName == PE_FirstLastName.ToUpper());
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_CaractEspec()
        {
            return Helper.USR_ValidateSpecialCharacters(PE_FirstLastName);
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_FirstLastName >= 1 && VC_FirstLastName <= 30)) NonValidMessages.Add($"El valor registrado no puede ser superior a 30 caracteres o estar vacio, validar variable 5 'Primer apellido del usuario'");
            if (!(VC_Mayus == true)) NonValidMessages.Add($"Los datos deben ser en letras MAYÚSCULAS, validar variable 5 'Primer apellido del usuario' ");
            if (!(VC_CaractEspec == true)) NonValidMessages.Add($"Los datos deben ser sin caracteres especiales y sin tildes, validar variable 5 'Primer apellido del usuario' ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Sulfato Ferroso en el Último Control Prenatal
    /// </sumary> 
    public sealed class RUL_FerrSulfLastPrenaCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Sulfato Ferroso en el Último Control Prenatal
        /// </sumary>
        private long PE_FerrSulfLastPrenaCtrl;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_FerrSulfLastPrenaCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Sulfato Ferroso en el Último Control Prenatal
        /// </sumary>
        /// <param name="PE_FerrSulfLastPrenaCtrl">Suministro de Sulfato Ferroso en el Último Control Prenatal</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(long PE_FerrSulfLastPrenaCtrl, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_Gestation, string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FerrSulfLastPrenaCtrl = PE_FerrSulfLastPrenaCtrl;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_Gestation = PE_Gestation;
                this.PE_IdSex = PE_IdSex;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_FerrSulfLastPrenaCtrl == 0 || (new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl))) NonValidMessages.Add($"Valor no valido. Validar variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'");
            if (!(!(VC_Age >= 10 && VC_Age <= 60) || VC_Age >= 10 && VC_Age <= 60)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'");
            if (!(PE_Gestation == 0 || PE_Gestation == 1 || PE_Gestation == 2 || PE_Gestation == 21)) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo' en variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si es mayor o igual a 10 años y menor de 60 años debe registrar un dato diferente a 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestación, validar variable 14 'Gestación' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestación, validar variable 14 'Gestación' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_FerrSulfLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y vaiable 60 ' Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en  Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y vaiable 60 ' Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser Sexo F, validar variable 10 'Sexo' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Sulfato Ferroso en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestacion' y variable 60 'Suministro de Sulfato Ferroso en el Último Control Prenatal'			", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años
    /// </sumary> 
    public sealed class RUL_FerrSulfLastConsuUnderTenY
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años
        /// </sumary>
        private long PE_FerrSulfLastConsuUnderTenY;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_FerrSulfLastConsuUnderTenY() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años
        /// </sumary>
        /// <param name="PE_FerrSulfLastConsuUnderTenY">Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_FerrSulfLastConsuUnderTenY, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_FerrSulfLastConsuUnderTenY = PE_FerrSulfLastConsuUnderTenY;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_FerrSulfLastConsuUnderTenY == 0 || (new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastConsuUnderTenY))) NonValidMessages.Add($"Valor no valido. Validar variable 70 'Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años'");
            if (!(VC_Age >= 10 || VC_Age < 10)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 70 'Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_FerrSulfLastConsuUnderTenY == 0 && VC_Age >= 10)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_FerrSulfLastConsuUnderTenY == 0 && VC_Age < 10)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años, la edad debe ser mayor de 10 años, validar variable 70 'Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_FerrSulfLastConsuUnderTenY) && VC_Age >= 10)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años, la edad de la persona debe ser menor de 10 años, validar variable 70 'Suministro de Sulfato Ferroso en la Última Consulta del Menor de 10 años' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha salida de la atención del parto o cesárea
    /// </sumary> 
    public sealed class RUL_ExitDateAttenPartiCesar
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha salida de la atención del parto o cesárea
        /// </sumary>
        private DateTime PE_ExitDateAttenPartiCesar;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha atención parto o cesárea
        /// </sumary>
        private DateTime PE_DateAttenPartiCesar;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Fecha atención parto o cesárea
        /// </sumary>
        private bool VC_DateAttenPartiCesar;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_ExitDateAttenPartiCesar() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha salida de la atención del parto o cesárea
        /// </sumary>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_ExitDateAttenPartiCesar">Fecha salida de la atención del parto o cesárea</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_DateAttenPartiCesar">Fecha atención parto o cesárea</param>
        public RuntimeResult<string> Execute(DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_ExitDateAttenPartiCesar, string PE_IdSex, DateTime PE_DateAttenPartiCesar)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_ExitDateAttenPartiCesar = PE_ExitDateAttenPartiCesar;
                this.PE_IdSex = PE_IdSex;
                this.PE_DateAttenPartiCesar = PE_DateAttenPartiCesar;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateAttenPartiCesar = FUNC_VC_DateAttenPartiCesar();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_ExitDateAttenPartiCesar == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_ExitDateAttenPartiCesar, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateAttenPartiCesar()
        {
            {
                return (PE_DateAttenPartiCesar == new DateTime(1800, 1, 1)
                || PE_DateAttenPartiCesar == new DateTime(1845, 1, 1)
                || PE_ExitDateAttenPartiCesar == new DateTime(1800, 1, 1)
                || PE_ExitDateAttenPartiCesar == new DateTime(1845, 1, 1)
                 || (PE_DateAttenPartiCesar <= PE_ExitDateAttenPartiCesar));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01) || PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01) || PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 50 'Fecha salida de la atención del parto o cesárea'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 50 'Fecha salida de la atención del parto o cesárea'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 50 'Fecha salida de la atención del parto o cesárea'");
            if (!(VC_DateAttenPartiCesar == true || VC_DateAttenPartiCesar != true)) NonValidMessages.Add($"Valor no válido, Variable 49 'Fecha atención parto o cesárea' en variable 50 'Fecha salida de la atención del parto o cesárea'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo F, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo F, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo F, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo F, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" si registra Fecha salida de la atención del parto o cesárea, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 50 'Fecha salida de la atención del parto o cesárea'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" si registra Fecha salida de la atención del parto o cesárea, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 50 'Fecha salida de la atención del parto o cesárea'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo M, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'+", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo M, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'+", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo M, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'+", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha salida de la atención del parto o cesárea debe registrar sexo M, validar variable 50 'Fecha salida de la atención del parto o cesárea' y variable 10 'Sexo'+", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" la Fecha salida de atención del parto o cesárea, debe ser mayor a la Fecha atención parto o cesárea, validar variable 49 'Fecha atención parto o cesárea' y variable 50 'Fecha salida de la atención del parto o cesárea'", this.FileName);
            }
            else if ((PE_ExitDateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" si registra Fecha salida de la atención del parto o cesárea, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 50 'Fecha salida de la atención del parto o cesárea'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" si registra Fecha salida de la atención del parto o cesárea, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 50 'Fecha salida de la atención del parto o cesárea'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de Terminación Tratamiento para Leishmaniasis
    /// </sumary> 
    public sealed class RUL_EndDateTreatmentLeishmaniasis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de Terminación Tratamiento para Leishmaniasis
        /// </sumary>
        private DateTime PE_EndDateTreatmentLeishmanias;
        /// <sumary>
        /// Fecha Inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha Calculada
        /// </sumary>
        private bool VC_EndDateTreatmentLeishmanias;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_EndDateTreatmentLeishmaniasis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de Terminación Tratamiento para Leishmaniasis
        /// </sumary>
        /// <param name="PE_EndDateTreatmentLeishmanias">Fecha de Terminación Tratamiento para Leishmaniasis</param>
        /// <param name="PE_InitDate">Fecha Inicial</param>
        /// <param name="PE_EndDate">Fecha Final</param>
        public RuntimeResult<string> Execute(DateTime PE_EndDateTreatmentLeishmanias, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EndDateTreatmentLeishmanias = PE_EndDateTreatmentLeishmanias;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_EndDateTreatmentLeishmanias = FUNC_VC_EndDateTreatmentLeishmanias();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_EndDateTreatmentLeishmanias()
        {
            {
                return (PE_EndDateTreatmentLeishmanias == new DateTime(1800, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1805, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1810, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1825, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1830, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1835, 1, 1)
                || PE_EndDateTreatmentLeishmanias == new DateTime(1845, 1, 1)
                || (PE_EndDateTreatmentLeishmanias <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_EndDateTreatmentLeishmanias != true || VC_EndDateTreatmentLeishmanias == true)) NonValidMessages.Add($"Valor no valido, variable 118 'Fecha de Terminación Tratamiento para Leishmaniasis'");
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_EndDateTreatmentLeishmanias) || PE_EndDateTreatmentLeishmanias > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido, variable 118 'Fecha de Terminación Tratamiento para Leishmaniasis'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_EndDateTreatmentLeishmanias != true) && ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_EndDateTreatmentLeishmanias)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de corte es menor a la fecha de Tratamiento para Leishmaniasis. validar variable 118 'Fecha de Terminación Tratamiento para Leishmaniasis' ", this.FileName);
            }
            else if ((VC_EndDateTreatmentLeishmanias != true) && (PE_EndDateTreatmentLeishmanias > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de corte es menor a la fecha de Tratamiento para Leishmaniasis. validar variable 118 'Fecha de Terminación Tratamiento para Leishmaniasis' ", this.FileName);
            }
            else if ((VC_EndDateTreatmentLeishmanias == true) && ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_EndDateTreatmentLeishmanias)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// DPT menores de 5 años
    /// </sumary> 
    public sealed class RUL_DPTUnderFiveYears
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// DPT menores de 5 años
        /// </sumary>
        private long PE_DPTUnderFiveYears;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DPTUnderFiveYears() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// DPT menores de 5 años
        /// </sumary>
        /// <param name="PE_DPTUnderFiveYears">DPT menores de 5 años</param>
        /// <param name="PE_Birthdate">Fecha de nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_DPTUnderFiveYears, DateTime PE_Birthdate, DateTime PE_Cutoffdate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DPTUnderFiveYears = PE_DPTUnderFiveYears;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "d");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_DPTUnderFiveYears) || PE_DPTUnderFiveYears == 4 || PE_DPTUnderFiveYears == 5 || PE_DPTUnderFiveYears == 0)) NonValidMessages.Add($"Valor no válido, Variable 39 'DPT menores de 5 años'");
            if (!(VC_Age >= 1 && VC_Age <= 539 || VC_Age >= 540 && VC_Age <= 1799 || VC_Age >= 1800 && VC_Age <= 2189 || VC_Age >= 2190)) NonValidMessages.Add($"Valor no valido, Variable: Edad 9 'Edad' en variable 39 'DPT menores de 5 años'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_DPTUnderFiveYears)) && (VC_Age >= 1 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_DPTUnderFiveYears)) && (VC_Age >= 540 && VC_Age <= 1799))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_DPTUnderFiveYears)) && (VC_Age >= 1800 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 16, 17, 18, 19, 20, 22 }).Contains(PE_DPTUnderFiveYears)) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra DPT menores de 5 años, debe registrar una edad menor a 6 años, validar variable 39 'DPT menores de 5 años' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 4) && (VC_Age >= 1 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad DPT menores de 5 años  o si no aplica para refuerzo ingresar opcion 0 , no debe ser opcion 4 o 5. Validar variable 39 'DPT menores de 5 años' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 4) && (VC_Age >= 540 && VC_Age <= 1799))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DPTUnderFiveYears == 4) && (VC_Age >= 1800 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DPTUnderFiveYears == 4) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra DPT menores de 5 años, debe registrar una edad menor a 6 años, validar variable 39 'DPT menores de 5 años' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 5) && (VC_Age >= 1 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad DPT menores de 5 años,no debe ser 5 .Validar variable 39 'DPT menores de 5 años' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 5) && (VC_Age >= 540 && VC_Age <= 1799))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Dosis no corresponde para la edad DPT menores de 5 años,no debe ser 5 .Validar variable 39 'DPT menores de 5 años' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 5) && (VC_Age >= 1800 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DPTUnderFiveYears == 5) && (VC_Age >= 2190))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra DPT menores de 5 años, debe registrar una edad menor a 6 años, validar variable 39 'DPT menores de 5 años' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 0) && (VC_Age >= 1 && VC_Age <= 539))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DPTUnderFiveYears == 0) && (VC_Age >= 540 && VC_Age <= 1799))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra '0' en DPT menores de 5 años, debe ser mayor o igual de 6 años o menor de 18 meses. Validar variable 39 'DPT menores de 5 años' y la variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DPTUnderFiveYears == 0) && (VC_Age >= 1800 && VC_Age <= 2189))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra '0' en DPT menores de 5 años, debe ser mayor o igual de 6 años o menor de 18 meses. Validar variable 39 'DPT menores de 5 años' y la variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Enfermedad Mental
    /// </sumary> 
    public sealed class RUL_DiagMentalIllness
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Enfermedad Mental
        /// </sumary>
        private long PE_DiagMentalIllness;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DiagMentalIllness() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Enfermedad Mental
        /// </sumary>
        /// <param name="PE_DiagMentalIllness">Enfermedad Mental</param>
        public RuntimeResult<string> Execute(long PE_DiagMentalIllness)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DiagMentalIllness = PE_DiagMentalIllness;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 21 }).Contains(PE_DiagMentalIllness))) NonValidMessages.Add($"Valor no valido. Validar variable 25 'Enfermedad Mental'.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Fluorosis Dental
    /// </sumary> 
    public sealed class RUL_DentalFluorosis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fluorosis Dental
        /// </sumary>
        private long PE_DentalFluorosis;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DentalFluorosis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fluorosis Dental
        /// </sumary>
        /// <param name="PE_DentalFluorosis">Fluorosis Dental</param>
        public RuntimeResult<string> Execute(long PE_DentalFluorosis)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DentalFluorosis = PE_DentalFluorosis;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 21 }).Contains(PE_DentalFluorosis))) NonValidMessages.Add($"Valor no valido. Validar variable 28 'Fluorosis Dental'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
        }
        #endregion
    }
    /// <sumary>
    /// Consulta de Joven Primera vez
    /// </sumary> 
    public sealed class RUL_DateYoungConsuFirstTime
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta de Joven Primera vez
        /// </sumary>
        private DateTime PE_DateYoungConsuFirstTime;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Calculo de que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_DateYoungConsuFirstTime;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateYoungConsuFirstTime() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta de Joven Primera vez
        /// </sumary>
        /// <param name="PE_DateYoungConsuFirstTime">Consulta de Joven Primera vez</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateYoungConsuFirstTime, DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateYoungConsuFirstTime = PE_DateYoungConsuFirstTime;
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateYoungConsuFirstTime = FUNC_VC_DateYoungConsuFirstTime();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateYoungConsuFirstTime == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateYoungConsuFirstTime, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateYoungConsuFirstTime()
        {
            {
                return (PE_DateYoungConsuFirstTime == new DateTime(1800, 1, 1)
    || PE_DateYoungConsuFirstTime == new DateTime(1845, 1, 1)
     || PE_DateYoungConsuFirstTime == new DateTime(1805, 1, 1)
     || PE_DateYoungConsuFirstTime == new DateTime(1810, 1, 1)
    || PE_DateYoungConsuFirstTime == new DateTime(1825, 1, 1)
     || PE_DateYoungConsuFirstTime == new DateTime(1830, 1, 1)
      || PE_DateYoungConsuFirstTime == new DateTime(1835, 1, 1)
   || (PE_DateYoungConsuFirstTime >= PE_BirthDate && PE_DateYoungConsuFirstTime <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateYoungConsuFirstTime) || PE_DateYoungConsuFirstTime == new DateTime(1800, 01, 01) || PE_DateYoungConsuFirstTime == new DateTime(1845, 01, 01) || PE_DateYoungConsuFirstTime > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 72 'Consulta de Joven Primera vez'");
            if (!(VC_DateYoungConsuFirstTime == true || VC_DateYoungConsuFirstTime != true)) NonValidMessages.Add($"Valor no válido, Variable 72 'Consulta de Joven Primera vez'");
            if (!(VC_Age >= 10 && VC_Age <= 29 || !(VC_Age >= 10 && VC_Age <= 29))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 72 'Consulta de Joven Primera vez'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateYoungConsuFirstTime)) && (VC_DateYoungConsuFirstTime == true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateYoungConsuFirstTime)) && (VC_DateYoungConsuFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez, debe ser mayor o igual a 10 años y menor de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateYoungConsuFirstTime)) && (VC_DateYoungConsuFirstTime != true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateYoungConsuFirstTime)) && (VC_DateYoungConsuFirstTime != true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez, debe ser mayor o igual a 10 años y menor de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1800, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1800, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez, debe ser mayor o igual a 10 años y menor de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1800, 01, 01)) && (VC_DateYoungConsuFirstTime != true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1800, 01, 01)) && (VC_DateYoungConsuFirstTime != true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez, debe ser mayor o igual a 10 años y menor de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez 1845-01-01, debe ser menor a 10 años y mayor o igual de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_DateYoungConsuFirstTime != true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez 1845-01-01, debe ser menor a 10 años y mayor o igual de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_DateYoungConsuFirstTime != true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateYoungConsuFirstTime > new DateTime(1900, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateYoungConsuFirstTime > new DateTime(1900, 01, 01)) && (VC_DateYoungConsuFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 29)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Consulta de Joven Primera vez, debe ser mayor o igual a 10 años y menor de 30 años, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateYoungConsuFirstTime > new DateTime(1900, 01, 01)) && (VC_DateYoungConsuFirstTime != true) && (VC_Age >= 10 && VC_Age <= 29))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La fecha de Consulta de Joven Primera vez debe estar entre la fecha de nacimiento y la fecha de corte, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La fecha de Consulta de Joven Primera vez debe estar entre la fecha de nacimiento y la fecha de corte, validar variable 72 'Consulta de Joven Primera vez' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha del peso
    /// </sumary> 
    public sealed class RUL_DateWeight
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha del peso
        /// </sumary>
        private DateTime PE_DateWeight;
        /// <sumary>
        /// Fecha Inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Peso en Kilogramos
        /// </sumary>
        private double WeightKg;
        /// <sumary>
        /// Variable de plantilla
        /// </sumary>
        private bool VC_DateWeight;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateWeight() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha del peso
        /// </sumary>
        /// <param name="PE_DateWeight">Fecha del peso</param>
        /// <param name="PE_InitDate">Fecha Inicial</param>
        /// <param name="PE_EndDate">Fecha Final</param>
        /// <param name="WeightKg">Peso en Kilogramos</param>
        public RuntimeResult<string> Execute(DateTime PE_DateWeight, DateTime PE_InitDate, DateTime PE_EndDate, double WeightKg)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateWeight = PE_DateWeight;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.WeightKg = WeightKg;
                this.VC_DateWeight = FUNC_VC_DateWeight();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateWeight()
        {
            {
                return (PE_DateWeight == new DateTime(1800, 1, 1)
                 || (PE_DateWeight <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_DateWeight == true || VC_DateWeight != true)) NonValidMessages.Add($"Valor no valido. Validar variable 29 'Fecha del Peso'");
            if (!(PE_DateWeight == new DateTime(1800, 01, 01) || PE_DateWeight > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 29 'Fecha del Peso'");
            if (!(WeightKg == 999 || WeightKg != 999)) NonValidMessages.Add($"Valor no valido variable 30 'Peso en Kilogramos'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_DateWeight == true) && (PE_DateWeight == new DateTime(1800, 01, 01)) && (WeightKg == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateWeight == true) && (PE_DateWeight == new DateTime(1800, 01, 01)) && (WeightKg != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha del peso 1800-01-01, debe registrar 999 en Peso en Kilogramos, validar variable 30 'peso en kilogramos' y variable 29 'fecha de peso'", this.FileName);
            }
            else if ((VC_DateWeight == true) && (PE_DateWeight > new DateTime(1900, 01, 01)) && (WeightKg == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha del peso, debe registrar Peso en Kilogramos, validar variable 30 'Peso en Kilogramos' y variable 29 'Fecha del Peso'", this.FileName);
            }
            else if ((VC_DateWeight == true) && (PE_DateWeight > new DateTime(1900, 01, 01)) && (WeightKg != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateWeight != true) && (PE_DateWeight == new DateTime(1800, 01, 01)) && (WeightKg == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 29 'Fecha del peso'", this.FileName);
            }
            else if ((VC_DateWeight != true) && (PE_DateWeight == new DateTime(1800, 01, 01)) && (WeightKg != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido en variable 29 'Fecha del peso'", this.FileName);
            }
            else if ((VC_DateWeight != true) && (PE_DateWeight > new DateTime(1900, 01, 01)) && (WeightKg == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de la  variable 29 'Fecha del peso' es mayor a la fecha de corte.", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de la  variable 29 'Fecha del peso' es mayor a la fecha de corte.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Valoración de la Agudeza Visual
    /// </sumary> 
    public sealed class RUL_DateVisualAssessment
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Valoracion de la agudeza visual
        /// </sumary>
        private DateTime PE_DateVisualAssessment;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha calculada
        /// </sumary>
        private bool VC_DateVisualAssessment;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateVisualAssessment() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Valoración de la Agudeza Visual
        /// </sumary>
        /// <param name="PE_DateVisualAssessment">Valoracion de la agudeza visual</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha fin</param>
        public RuntimeResult<string> Execute(DateTime PE_DateVisualAssessment, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateVisualAssessment = PE_DateVisualAssessment;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_DateVisualAssessment = FUNC_VC_DateVisualAssessment();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateVisualAssessment()
        {

            {
                return (PE_DateVisualAssessment == new DateTime(1800, 1, 1)
                || PE_DateVisualAssessment == new DateTime(1845, 1, 1)
                 || PE_DateVisualAssessment == new DateTime(1805, 1, 1)
                 || PE_DateVisualAssessment == new DateTime(1810, 1, 1)
                || PE_DateVisualAssessment == new DateTime(1825, 1, 1)
                 || PE_DateVisualAssessment == new DateTime(1830, 1, 1)
                  || PE_DateVisualAssessment == new DateTime(1835, 1, 1)
               || (PE_DateVisualAssessment <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateVisualAssessment) || PE_DateVisualAssessment > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 62 'Valoración de la Agudeza Visual' ");
            if (!(VC_DateVisualAssessment == true)) NonValidMessages.Add($"la fecha de la variable 62 'Valoración de la Agudeza Visual' es mayor a la fecha de corte");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateVisualAssessment)) && (VC_DateVisualAssessment == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Serología para Sífilis
    /// </sumary> 
    public sealed class RUL_DateSerologySyphilis
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Resultado de serologia
        /// </sumary>
        private long PE_ResultSerologySyphilis;
        /// <sumary>
        /// Fecha Serología para Sífilis
        /// </sumary>
        private DateTime PE_DateSerologySyphilis;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateSerologySyphilis() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Serología para Sífilis
        /// </sumary>
        /// <param name="PE_ResultSerologySyphilis">Resultado de serologia</param>
        /// <param name="PE_DateSerologySyphilis">Fecha Serología para Sífilis</param>
        public RuntimeResult<string> Execute(long PE_ResultSerologySyphilis, DateTime PE_DateSerologySyphilis)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_ResultSerologySyphilis = PE_ResultSerologySyphilis;
                this.PE_DateSerologySyphilis = PE_DateSerologySyphilis;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis) || PE_DateSerologySyphilis == new DateTime(1800, 01, 01) || PE_DateSerologySyphilis > new DateTime(1900, 01, 01) || PE_DateSerologySyphilis == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no valido, Variable 80 'Fecha Serología para Sífilis'");
            if (!(PE_ResultSerologySyphilis == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis))) NonValidMessages.Add($"Valor no valido, Variable 81 'Resultado Serología para Sífilis' en variable 80 'Fecha Serologia para Sifilis'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis)) && (PE_ResultSerologySyphilis == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateSerologySyphilis)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateSerologySyphilis == new DateTime(1800, 01, 01)) && (PE_ResultSerologySyphilis == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha Serología para Sífilis, debe registrar Resultado Serología para Sífilis, validar variable 80 'Fecha Serología para Sífilis' y variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
            else if ((PE_DateSerologySyphilis == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateSerologySyphilis > new DateTime(1900, 01, 01)) && (PE_ResultSerologySyphilis == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha Serología para Sífilis, debe registrar Resultado Serología para Sífilis, validar variable 80 'Fecha Serología para Sífilis' y variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
            else if ((PE_DateSerologySyphilis > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultSerologySyphilis)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateSerologySyphilis == new DateTime(1845, 01, 01)) && (PE_ResultSerologySyphilis == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Serología para Sífilis, debe registrar 0 en Resultado Serología para Sífilis, validar variable 80 'Fecha Serología para Sífilis' y variable 81 'Resultado Serología para Sífilis'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Resultado Biopsia Seno por BACAF
    /// </sumary> 
    public sealed class RUL_DateResultBreastBiopsy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Resultado Biopsia Seno por BACAF
        /// </sumary>
        private DateTime PE_DateResultBreastBiopsy;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha Toma Biopsia Seno por BACAF
        /// </sumary>
        private DateTime PE_DateBreastBiopsyBACAF;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Valida que la fecha sea mayor a la variable 99
        /// </sumary>
        private bool VC_DateResultBreastBiopsy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateResultBreastBiopsy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Resultado Biopsia Seno por BACAF
        /// </sumary>
        /// <param name="PE_DateResultBreastBiopsy">Fecha Resultado Biopsia Seno por BACAF</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_DateBreastBiopsyBACAF">Fecha Toma Biopsia Seno por BACAF</param>
        public RuntimeResult<string> Execute(DateTime PE_DateResultBreastBiopsy, DateTime PE_CutOffDate, DateTime PE_BirthDate, string PE_IdSex, DateTime PE_DateBreastBiopsyBACAF)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateResultBreastBiopsy = PE_DateResultBreastBiopsy;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_DateBreastBiopsyBACAF = PE_DateBreastBiopsyBACAF;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateResultBreastBiopsy = FUNC_VC_DateResultBreastBiopsy();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateResultBreastBiopsy == Convert.ToDateTime("01/01/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateResultBreastBiopsy == Convert.ToDateTime("01/01/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateResultBreastBiopsy, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateResultBreastBiopsy()
        {
            {
                return (
   PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)
   || PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)

   || PE_DateBreastBiopsyBACAF == new DateTime(1800, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1805, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1810, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1825, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1830, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1835, 01, 01)
   || PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)

   || (PE_DateBreastBiopsyBACAF <= PE_DateResultBreastBiopsy));
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy) || PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01) || PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01) || PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 100 'Fecha Resultado Biopsia Seno por BACAF'");
            if (!(VC_DateResultBreastBiopsy == true)) NonValidMessages.Add($"'la fecha de la Variable 100 ''Fecha Resultado Biopsia Seno por BACAF'' debe ser mayor a la variable 99 'Fecha Toma Biopsia Seno por BACAF'.'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 100  'Fecha Resultado Biopsia Seno por BACAF'");
            if (!(VC_Age >= 35 || VC_Age >= 0 && VC_Age <= 34)) NonValidMessages.Add($"Valor no válido, Variable: 9 'Edad' en Variable 100 'Fecha Resultado Biopsia Seno por BACAF'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateResultBreastBiopsy)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Resultado Biopsia Seno por BACAF, debe registrar mayor o igual de 35 años, validar variable 9 'Edad' y variable 100 'Fecha Resultado Biopsia Seno por BACAF'", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1800, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si el usuario es una mujer menor de 35 años se debe ingresar con fecha 1845-01-01. Validar variable 10 'Sexo’, variable 9 ‘Edad’ y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateResultBreastBiopsy == new DateTime(1845, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino en ‘Fecha Resultado Biopsia Seno por BACAF’, el dato a registrar debe ser 1845-01-01. Validar variable 10 'Sexo' y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
            else if ((PE_DateResultBreastBiopsy > new DateTime(1900, 01, 01)) && (VC_DateResultBreastBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si el usuario es una mujer menor de 35 años se debe ingresar con fecha 1845-01-01. Validar variable 10 'Sexo’, variable 9 ‘Edad’ y variable 100 ‘Fecha Resultado Biopsia Seno por BACAF’", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta de Psicología
    /// </sumary> 
    public sealed class RUL_DatePsychologyConsult
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta de Psicología
        /// </sumary>
        private DateTime PE_DatePsychologyConsult;
        /// <sumary>
        /// Fecha inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha calculada
        /// </sumary>
        private bool VC_DatePsychologyConsult;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DatePsychologyConsult() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta de Psicología
        /// </sumary>
        /// <param name="PE_DatePsychologyConsult">Consulta de Psicología</param>
        /// <param name="PE_InitDate">Fecha inicial</param>
        /// <param name="PE_EndDate">Fecha fin</param>
        public RuntimeResult<string> Execute(DateTime PE_DatePsychologyConsult, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DatePsychologyConsult = PE_DatePsychologyConsult;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_DatePsychologyConsult = FUNC_VC_DatePsychologyConsult();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DatePsychologyConsult()
        {
            {
                return (PE_DatePsychologyConsult == new DateTime(1800, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1805, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1810, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1825, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1830, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1845, 01, 01)
                || PE_DatePsychologyConsult == new DateTime(1845, 01, 01)
                || (PE_DatePsychologyConsult <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DatePsychologyConsult) || !(new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }.Contains(PE_DatePsychologyConsult)))) NonValidMessages.Add($"Valor no valido. Validar variable  68 'Consulta de Psicología'");
            if (!(VC_DatePsychologyConsult == true || VC_DatePsychologyConsult != true)) NonValidMessages.Add($"Valor no valido. Validar variable 68 'Consulta de Psicología'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DatePsychologyConsult) && VC_DatePsychologyConsult == true)
            {
                return RuntimeResult<string>.SetValid(() => { return "0"; }, $"error");
            }
            else if ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DatePsychologyConsult) && VC_DatePsychologyConsult != true)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (!(new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }.Contains(PE_DatePsychologyConsult)) && VC_DatePsychologyConsult == true)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La fecha de Consulta de Psicología es mayor a la fecha de corte, validar variable 68 'Consulta de Psicología'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Asesoría Pre test Elisa para VIH
    /// </sumary> 
    public sealed class RUL_DatePreTestElisaVIH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Asesoría Pre test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePreTestElisaVIH;
        /// <sumary>
        /// ResultElisaVIH
        /// </sumary>
        private long PE_ResultElisaVIH;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Asesoría Pos test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePostTestElisaVIH;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private DateTime PE_DateElisaTakingVIH;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private bool VC_DatePreTestElisaVIH;
        /// <sumary>
        /// Comparación con fecha del ultimo control prenatal
        /// </sumary>
        private bool VC_Com_DatePostTestElisaVIH;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private bool VC_Com_DateElisaTakingVIH;
        /// <sumary>
        /// Comparación con fecha de nacimiento
        /// </sumary>
        private bool VC_Com_BirthDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DatePreTestElisaVIH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Asesoría Pre test Elisa para VIH
        /// </sumary>
        /// <param name="PE_DatePreTestElisaVIH">Asesoría Pre test Elisa para VIH</param>
        /// <param name="PE_ResultElisaVIH">ResultElisaVIH</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_DatePostTestElisaVIH">Asesoría Pos test Elisa para VIH</param>
        /// <param name="PE_DateElisaTakingVIH">Fecha de Toma de Elisa para VIH</param>
        public RuntimeResult<string> Execute(DateTime PE_DatePreTestElisaVIH, long PE_ResultElisaVIH, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_InitDate, DateTime PE_DatePostTestElisaVIH, DateTime PE_DateElisaTakingVIH)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DatePreTestElisaVIH = PE_DatePreTestElisaVIH;
                this.PE_ResultElisaVIH = PE_ResultElisaVIH;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_DatePostTestElisaVIH = PE_DatePostTestElisaVIH;
                this.PE_DateElisaTakingVIH = PE_DateElisaTakingVIH;
                this.VC_DatePreTestElisaVIH = FUNC_VC_DatePreTestElisaVIH();
                this.VC_Com_DatePostTestElisaVIH = FUNC_VC_Com_DatePostTestElisaVIH();
                this.VC_Com_DateElisaTakingVIH = FUNC_VC_Com_DateElisaTakingVIH();
                this.VC_Com_BirthDate = FUNC_VC_Com_BirthDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DatePreTestElisaVIH()
        {
            {
                return (PE_DatePreTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 01, 01)
   || (PE_CutOffDate >= PE_DatePreTestElisaVIH));
            }


        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DatePostTestElisaVIH()
        {
            {
                return (

      PE_DatePreTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 01, 01)

    || PE_DatePostTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePostTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePostTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePostTestElisaVIH == new DateTime(1835, 01, 01)

   || (PE_DatePreTestElisaVIH <= PE_DatePostTestElisaVIH));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DateElisaTakingVIH()
        {
            {
                return
    (PE_DatePreTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 01, 01)

    || PE_DateElisaTakingVIH == new DateTime(1800, 01, 01)
    || PE_DateElisaTakingVIH == new DateTime(1845, 01, 01)
     || PE_DateElisaTakingVIH == new DateTime(1805, 01, 01)
     || PE_DateElisaTakingVIH == new DateTime(1810, 01, 01)
    || PE_DateElisaTakingVIH == new DateTime(1825, 01, 01)
     || PE_DateElisaTakingVIH == new DateTime(1830, 01, 01)
      || PE_DateElisaTakingVIH == new DateTime(1835, 01, 01)

      || (PE_DatePreTestElisaVIH <= PE_DateElisaTakingVIH));
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_BirthDate()
        {
            {
                return
    (PE_DatePreTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 01, 01)
      || (PE_DatePreTestElisaVIH >= PE_BirthDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DatePreTestElisaVIH > new DateTime(1900, 01, 01) || PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DatePreTestElisaVIH))) NonValidMessages.Add($"Valor no valido. Validar variable 75 'Asesoría Pre test Elisa para VIH'");
            if (!(PE_ResultElisaVIH == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH))) NonValidMessages.Add($"Valor no valido. Validar variable 83 'Resultado Elisa para VIH' en variable 75 'Asesoría Pre test Elisa para VIH'");
            if (!(VC_DatePreTestElisaVIH == true)) NonValidMessages.Add($"la fecha de la  variable 75 'Asesoría Pre test Elisa para VIH' debe ser menor a la fecha de corte");
            if (!(VC_Com_DatePostTestElisaVIH == true)) NonValidMessages.Add($"la fecha de la variable 75 'Asesoría Pre test Elisa para VIH' debe ser menor a la fecha de 76  'Asesoría Pos test Elisa para VIH' ");
            if (!(VC_Com_DateElisaTakingVIH == true)) NonValidMessages.Add($"la fecha de la  Variable 82 'Fecha de Toma de Elisa para VIH' debe ser mayor  a la fecha de la variable 75 'Asesoría Pre test Elisa para VIH'");
            if (!(VC_Com_BirthDate == true)) NonValidMessages.Add($"la fecha de nacimiento es mayor a la fecha de Asesoría Pre test Elisa para VIH. validar variable 9 'Edad'  en variable 75 'Asesoría Pre test Elisa para VIH'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DatePreTestElisaVIH > new DateTime(1900, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePreTestElisaVIH > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePreTestElisaVIH == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si realizo toma de Elisa para VIH debe registrar Asesoría Pre test Elisa para VIH. Validar variable 83 'Resultado elisa para VIH'  y variable 75  'Asesoría Pre test Elisa para VIH'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DatePreTestElisaVIH)) && (PE_ResultElisaVIH == 0) && (VC_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Asesoría Pos test Elisa para VIH
    /// </sumary> 
    public sealed class RUL_DatePostTestElisaVIH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Asesoría Pos test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePostTestElisaVIH;
        /// <sumary>
        /// Asesoría Pre test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePreTestElisaVIH;
        /// <sumary>
        /// ResultElisaVIH
        /// </sumary>
        private long PE_ResultElisaVIH;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private DateTime PE_DateElisaTakingVIH;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private bool VC_DatePostTestElisaVIH;
        /// <sumary>
        /// Comparación con fecha del ultimo control prenatal
        /// </sumary>
        private bool VC_Com_DatePreTestElisaVIH;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private bool VC_Com_DateElisaTakingVIH;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DatePostTestElisaVIH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Asesoría Pos test Elisa para VIH
        /// </sumary>
        /// <param name="PE_DatePostTestElisaVIH">Asesoría Pos test Elisa para VIH</param>
        /// <param name="PE_DatePreTestElisaVIH">Asesoría Pre test Elisa para VIH</param>
        /// <param name="PE_ResultElisaVIH">ResultElisaVIH</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_DateElisaTakingVIH">Fecha de Toma de Elisa para VIH</param>
        public RuntimeResult<string> Execute(DateTime PE_DatePostTestElisaVIH, DateTime PE_DatePreTestElisaVIH, long PE_ResultElisaVIH, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_InitDate, DateTime PE_DateElisaTakingVIH)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DatePostTestElisaVIH = PE_DatePostTestElisaVIH;
                this.PE_DatePreTestElisaVIH = PE_DatePreTestElisaVIH;
                this.PE_ResultElisaVIH = PE_ResultElisaVIH;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_DateElisaTakingVIH = PE_DateElisaTakingVIH;
                this.VC_DatePostTestElisaVIH = FUNC_VC_DatePostTestElisaVIH();
                this.VC_Com_DatePreTestElisaVIH = FUNC_VC_Com_DatePreTestElisaVIH();
                this.VC_Com_DateElisaTakingVIH = FUNC_VC_Com_DateElisaTakingVIH();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DatePostTestElisaVIH()
        {
            {
                return (PE_DatePostTestElisaVIH == new DateTime(1800, 01, 01)
    || PE_DatePostTestElisaVIH == new DateTime(1845, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1805, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1810, 01, 01)
    || PE_DatePostTestElisaVIH == new DateTime(1825, 01, 01)
     || PE_DatePostTestElisaVIH == new DateTime(1830, 01, 01)
      || PE_DatePostTestElisaVIH == new DateTime(1835, 01, 01)
   || (PE_DatePostTestElisaVIH >= PE_BirthDate && PE_DatePostTestElisaVIH <= PE_CutOffDate));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DatePreTestElisaVIH()
        {
            {
                return (PE_DatePostTestElisaVIH == new DateTime(1800, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1845, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1805, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1810, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1825, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1830, 1, 1)
      || PE_DatePostTestElisaVIH == new DateTime(1835, 1, 1)

     || PE_DatePreTestElisaVIH == new DateTime(1800, 1, 1)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 1, 1)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 1, 1)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 1, 1)

   || (PE_DatePreTestElisaVIH <= PE_DatePostTestElisaVIH));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DateElisaTakingVIH()
        {
            {
                return (PE_DatePostTestElisaVIH == new DateTime(1800, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1845, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1805, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1810, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1825, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1830, 1, 1)
      || PE_DatePostTestElisaVIH == new DateTime(1835, 1, 1)

     || PE_DateElisaTakingVIH == new DateTime(1800, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1845, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1805, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1810, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1825, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1830, 1, 1)
      || PE_DateElisaTakingVIH == new DateTime(1835, 1, 1)

   || (PE_DateElisaTakingVIH <= PE_DatePostTestElisaVIH));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DatePostTestElisaVIH > new DateTime(1900, 01, 01) || PE_DatePostTestElisaVIH == new DateTime(1845, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DatePostTestElisaVIH))) NonValidMessages.Add($"Valor no válido, Variable 76 'Asesoría post test Elisa para VIH'");
            if (!(PE_ResultElisaVIH == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH))) NonValidMessages.Add($"Valor no válido, validar variable 83 'Resultado elisa para VIH' en variable 76 'Asesoría Pos test Elisa para VIH'");
            if (!(VC_Com_DatePreTestElisaVIH == true)) NonValidMessages.Add($"la fecha de Asesoría pre test Elisa para VIH es mayor que la  Asesoría post test Elisa para VIH. validar Variable 75 'Asesoría pre test Elisa para VIH' en variable 76 'Asesoría Pos test Elisa para VIH'");
            if (!(VC_Com_DateElisaTakingVIH == true)) NonValidMessages.Add($"la fecha de la toma de elisa para VIH  es mayor a  Asesoría post test Elisa para VIH validar variable  82 'Fecha de toma de elisa para VIH'  en variable 76 'Asesoría Pos test Elisa para VIH'");
            if (!(VC_DatePostTestElisaVIH == true)) NonValidMessages.Add($"la fecha de la Asesoría Pos test Elisa para VIH debe ser menor a la fecha de corte. validar variable variable 76 'Asesoría Pos test Elisa para VIH'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DatePostTestElisaVIH > new DateTime(1900, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_DatePostTestElisaVIH == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePostTestElisaVIH > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_DatePostTestElisaVIH == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePostTestElisaVIH == new DateTime(1845, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_DatePostTestElisaVIH == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DatePostTestElisaVIH == new DateTime(1845, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_DatePostTestElisaVIH == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si realizo toma de Elisa para VIH debe registrar fecha en Asesoría Pos test Elisa para VIH . Validar variable 83 'Resultado elisa para VIH' y variable 76 'Asesoría Pos test Elisa para VIH'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DatePostTestElisaVIH)) && (PE_ResultElisaVIH == 0) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DateElisaTakingVIH == true) && (VC_DatePostTestElisaVIH == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta Nutrición
    /// </sumary> 
    public sealed class RUL_DateNutritionConsult
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta Nutrición
        /// </sumary>
        private DateTime PE_DateNutritionConsult;
        /// <sumary>
        /// Fecha inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Calculo de fecha en el periodo reportado
        /// </sumary>
        private bool VC_DateNutritionConsult;
        /// <sumary>
        /// Calculo que la fecha reportada sea mayor a la fecha de nacimiento
        /// </sumary>
        private bool VC_DateNutritionConsult1;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateNutritionConsult() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta Nutrición
        /// </sumary>
        /// <param name="PE_DateNutritionConsult">Consulta Nutrición</param>
        /// <param name="PE_InitDate">Fecha inicial</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateNutritionConsult, DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateNutritionConsult = PE_DateNutritionConsult;
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_DateNutritionConsult = FUNC_VC_DateNutritionConsult();
                this.VC_DateNutritionConsult1 = FUNC_VC_DateNutritionConsult1();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateNutritionConsult()
        {

            {
                return (PE_DateNutritionConsult == new DateTime(1800, 1, 1)
                || PE_DateNutritionConsult == new DateTime(1845, 1, 1)
                 || PE_DateNutritionConsult == new DateTime(1805, 1, 1)
                 || PE_DateNutritionConsult == new DateTime(1810, 1, 1)
                || PE_DateNutritionConsult == new DateTime(1825, 1, 1)
                 || PE_DateNutritionConsult == new DateTime(1830, 1, 1)
                  || PE_DateNutritionConsult == new DateTime(1835, 1, 1)
               || (PE_DateNutritionConsult <= PE_CutOffDate));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateNutritionConsult1()
        {
            {
                return (PE_DateNutritionConsult == new DateTime(1800, 1, 1)
    || PE_DateNutritionConsult == new DateTime(1845, 1, 1)
     || PE_DateNutritionConsult == new DateTime(1805, 1, 1)
     || PE_DateNutritionConsult == new DateTime(1810, 1, 1)
    || PE_DateNutritionConsult == new DateTime(1825, 1, 1)
     || PE_DateNutritionConsult == new DateTime(1830, 1, 1)
      || PE_DateNutritionConsult == new DateTime(1835, 1, 1)
   || (PE_DateNutritionConsult >= PE_BirthDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateNutritionConsult) || PE_DateNutritionConsult > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 67 'Consulta Nutrición'");
            if (!(VC_DateNutritionConsult == true || VC_DateNutritionConsult != true)) NonValidMessages.Add($"Valor no válido, Variable 67 'Consulta Nutrición'");
            if (!(VC_DateNutritionConsult1 == true || VC_DateNutritionConsult1 != true)) NonValidMessages.Add($"Valor no válido, Variable 67 'Consulta Nutrición'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateNutritionConsult)) && (VC_DateNutritionConsult == true) && (VC_DateNutritionConsult1 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateNutritionConsult)) && (VC_DateNutritionConsult == true) && (VC_DateNutritionConsult1 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateNutritionConsult)) && (VC_DateNutritionConsult != true) && (VC_DateNutritionConsult1 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateNutritionConsult)) && (VC_DateNutritionConsult != true) && (VC_DateNutritionConsult1 != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNutritionConsult > new DateTime(1900, 01, 01)) && (VC_DateNutritionConsult == true) && (VC_DateNutritionConsult1 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNutritionConsult > new DateTime(1900, 01, 01)) && (VC_DateNutritionConsult == true) && (VC_DateNutritionConsult1 != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Consulta nutrición es menor a la fecha de nacimiento, Validar variable 9 ‘Edad’ contra variable 67 ‘Consulta Nutrición’", this.FileName);
            }
            else if ((PE_DateNutritionConsult > new DateTime(1900, 01, 01)) && (VC_DateNutritionConsult != true) && (VC_DateNutritionConsult1 == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Consulta nutrición es mayor a la fecha de corte,validar variable 67 'Consulta Nutrición' contra Fecha de corte ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Consulta nutrición es mayor a la fecha de corte,validar variable 67 'Consulta Nutrición' contra Fecha de corte ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Control Recién Nacido
    /// </sumary> 
    public sealed class RUL_DateNewbornCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Control Recién Nacido
        /// </sumary>
        private DateTime PE_DateNewbornCtrl;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Calcula que la fecha se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateNewbornCtrl;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateNewbornCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Control Recién Nacido
        /// </sumary>
        /// <param name="PE_InitDate">Fecha inicio</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateNewbornCtrl">Control Recién Nacido</param>
        public RuntimeResult<string> Execute(DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_BirthDate, DateTime PE_DateNewbornCtrl)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateNewbornCtrl = PE_DateNewbornCtrl;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateNewbornCtrl = FUNC_VC_DateNewbornCtrl();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNewbornCtrl == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateNewbornCtrl, "d");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateNewbornCtrl()
        {
            {
                return (PE_DateNewbornCtrl == new DateTime(1800, 1, 1)
    || PE_DateNewbornCtrl == new DateTime(1845, 1, 1)
     || PE_DateNewbornCtrl == new DateTime(1805, 1, 1)
     || PE_DateNewbornCtrl == new DateTime(1810, 1, 1)
    || PE_DateNewbornCtrl == new DateTime(1825, 1, 1)
     || PE_DateNewbornCtrl == new DateTime(1830, 1, 1)
      || PE_DateNewbornCtrl == new DateTime(1835, 1, 1)
   || (PE_DateNewbornCtrl <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateNewbornCtrl == new DateTime(1845, 01, 01) || PE_DateNewbornCtrl > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNewbornCtrl))) NonValidMessages.Add($"Valor no válido, Variable 52 'Control Recién Nacido'");
            if (!(VC_DateNewbornCtrl == true)) NonValidMessages.Add($"La fecha de la Variable 52 'Control Recién Nacido' es mayor a la fecha de corte");
            if (!(VC_Age >= 0 && VC_Age <= 30 || VC_Age > 30)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 52 'Control Recién Nacido'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateNewbornCtrl == new DateTime(1845, 01, 01)) && (VC_DateNewbornCtrl == true) && (VC_Age >= 0 && VC_Age <= 30))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad menor o igual a 30 dias, la fecha debe ser diferente a 1845-01-01, validar variable 52 'Control Recién Nacido' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateNewbornCtrl == new DateTime(1845, 01, 01)) && (VC_DateNewbornCtrl == true) && (VC_Age > 30))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNewbornCtrl > new DateTime(1900, 01, 01)) && (VC_DateNewbornCtrl == true) && (VC_Age >= 0 && VC_Age <= 30))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNewbornCtrl > new DateTime(1900, 01, 01)) && (VC_DateNewbornCtrl == true) && (VC_Age > 30))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"registra edad mayor a 30 dias, validar variable 52 'Control Recién Nacido' y variable 9 'Edad' ", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNewbornCtrl)) && (VC_DateNewbornCtrl == true) && (VC_Age >= 0 && VC_Age <= 30))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"registra edad mayor a 30 dias, validar variable 52 'Control Recién Nacido' y variable 9 'Edad' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha TSH Neonatal
    /// </sumary> 
    public sealed class RUL_DateNeonatalTSH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha TSH Neonatal
        /// </sumary>
        private DateTime PE_DateNeonatalTSH;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Resultado de TSH Neonatal
        /// </sumary>
        private long PE_ResultNeonatalTSH;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Verifica que la fecha se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateNeonatalTSH;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateNeonatalTSH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha TSH Neonatal
        /// </sumary>
        /// <param name="PE_DateNeonatalTSH">Fecha TSH Neonatal</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_ResultNeonatalTSH">Resultado de TSH Neonatal</param>
        public RuntimeResult<string> Execute(DateTime PE_DateNeonatalTSH, DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_BirthDate, long PE_ResultNeonatalTSH)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateNeonatalTSH = PE_DateNeonatalTSH;
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_ResultNeonatalTSH = PE_ResultNeonatalTSH;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateNeonatalTSH = FUNC_VC_DateNeonatalTSH();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            if (PE_DateNeonatalTSH == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateNeonatalTSH, "d");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateNeonatalTSH()
        {
            {
                return (PE_DateNeonatalTSH == new DateTime(1800, 1, 1)
    || PE_DateNeonatalTSH == new DateTime(1845, 1, 1)
     || PE_DateNeonatalTSH == new DateTime(1805, 1, 1)
     || PE_DateNeonatalTSH == new DateTime(1810, 1, 1)
    || PE_DateNeonatalTSH == new DateTime(1825, 1, 1)
     || PE_DateNeonatalTSH == new DateTime(1830, 1, 1)
      || PE_DateNeonatalTSH == new DateTime(1835, 1, 1)
   || (PE_DateNeonatalTSH >= PE_BirthDate && PE_DateNeonatalTSH <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH) || PE_DateNeonatalTSH == new DateTime(1800, 01, 01) || PE_DateNeonatalTSH == new DateTime(1845, 01, 01) || PE_DateNeonatalTSH > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 84 'Fecha TSH Neonatal'");
            if (!(VC_DateNeonatalTSH == true)) NonValidMessages.Add($"La fecha de la Variable 84 'Fecha TSH Neonatal' es mayor a la fecha de corte");
            if (!(VC_Age >= 0 && VC_Age <= 2 || VC_Age > 2)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 84 'Fecha TSH Neonatal'");
            if (!((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH) || PE_ResultNeonatalTSH == 0)) NonValidMessages.Add($"Valor no válido, Variable 85 'Resultado de TSH Neonatal' en variable 84 'Fecha TSH Neonatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Resultado de TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateNeonatalTSH)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Resultado de TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1800, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1800, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha TSH Neonatal, debe registrar un valor diferente a 0 en Resultado de TSH Neonatal, validar variable 84 'Fecha TSH Neonatal'  y variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1800, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Fecha TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1800, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Fecha TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1845, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha TSH Neonatal, debe ser mayor a 2 dias, validar variable 84 'Resultado de TSH Neonatal' y variable 9'Edad'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1845, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha TSH Neonatal, debe ser mayor a 2 dias, validar variable 84 'Resultado de TSH Neonatal' y variable 9'Edad'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1845, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNeonatalTSH == new DateTime(1845, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNeonatalTSH > new DateTime(1900, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateNeonatalTSH > new DateTime(1900, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age >= 0 && VC_Age <= 2) && (PE_ResultNeonatalTSH == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha TSH Neonatal, debe registrar un valor diferente a 0 en Resultado de TSH Neonatal, validar variable 84 'Fecha TSH Neonatal'  y variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if ((PE_DateNeonatalTSH > new DateTime(1900, 01, 01)) && (VC_DateNeonatalTSH == true) && (VC_Age > 2) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultNeonatalTSH)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Fecha TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra Fecha TSH Neonatal la edad debe ser menor o igual a 2 dias, validar variable 84 'Fecha TSH Neonatal' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Toma de Microalbuminuria
    /// </sumary> 
    public sealed class RUL_DateMicroalbuminuria
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Toma de Microalbuminuria
        /// </sumary>
        private DateTime PE_DateMicroalbuminuria;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateMicroalbuminuria() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Toma de Microalbuminuria
        /// </sumary>
        /// <param name="PE_DateMicroalbuminuria">Fecha Toma de Microalbuminuria</param>
        public RuntimeResult<string> Execute(DateTime PE_DateMicroalbuminuria)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateMicroalbuminuria = PE_DateMicroalbuminuria;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateMicroalbuminuria) || PE_DateMicroalbuminuria > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 110 'Fecha Toma de Microalbuminuria'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateMicroalbuminuria)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Mamografía
    /// </sumary> 
    public sealed class RUL_DateMammography
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Mamografía
        /// </sumary>
        private DateTime PE_DateMammography;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Resultado mamografia
        /// </sumary>
        private long PE_ResultMammography;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Cacula que la fecha de mamografia se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateMammography;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateMammography() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Mamografía
        /// </sumary>
        /// <param name="PE_DateMammography">Fecha Mamografía</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">sexo</param>
        /// <param name="PE_ResultMammography">Resultado mamografia</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        public RuntimeResult<string> Execute(DateTime PE_DateMammography, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_ResultMammography, DateTime PE_InitDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateMammography = PE_DateMammography;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_ResultMammography = PE_ResultMammography;
                this.PE_InitDate = PE_InitDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateMammography = FUNC_VC_DateMammography();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateMammography == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateMammography == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateMammography, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateMammography()
        {

            {
                return (PE_DateMammography == new DateTime(1800, 1, 1)
                || PE_DateMammography == new DateTime(1845, 1, 1)
                 || PE_DateMammography == new DateTime(1805, 1, 1)
                 || PE_DateMammography == new DateTime(1810, 1, 1)
                || PE_DateMammography == new DateTime(1825, 1, 1)
                 || PE_DateMammography == new DateTime(1830, 1, 1)
                  || PE_DateMammography == new DateTime(1835, 1, 1)
               || (PE_DateMammography >= PE_BirthDate && PE_DateMammography <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography) || PE_DateMammography == new DateTime(1800, 01, 01) || PE_DateMammography > new DateTime(1900, 01, 01) || PE_DateMammography == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 96 'Fecha Mamografía'");
            if (!(VC_DateMammography == true)) NonValidMessages.Add($"La fecha de la Variable 96 'Fecha Mamografía' es mayor a la fecha de corte");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 96 'Fecha Mamografía'");
            if (!(VC_Age >= 35 || VC_Age >= 0 && VC_Age <= 34)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 96 'Fecha Mamografía'");
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography) || PE_ResultMammography == 999 || PE_ResultMammography == 0)) NonValidMessages.Add($"Valor no válido, Variable 97 'Resultado Mamografía' en Variable 96 'Fecha Mamografía'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateMammography)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe registrar un valor diferente a 0 en Resultado mamografia, validar variable 96 ' Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1800, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01, validar variable 96 'Fecha Mamografía'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe registrar un valor diferente a 0 en Resultado mamografia, validar variable 96 ' Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography > new DateTime(1900, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Mamografia, debe ser mayor o igual a 35 años. Validar variable 9 'Edad'  y variable 96 'Fecha Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Resultado de mamografia, debe registrar Fecha Mamografia,validar variable 96 ' Fecha Mamografía' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 35) && (PE_ResultMammography == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && ((new long[] { 1, 2, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateMammography == new DateTime(1845, 01, 01)) && (VC_DateMammography == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 34) && (PE_ResultMammography == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Último Control Prenatal
    /// </sumary> 
    public sealed class RUL_DateLastPrenatalCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Último Control Prenatal
        /// </sumary>
        private DateTime PE_DateLastPrenatalCtrl;
        /// <sumary>
        /// sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Fecha del primer control prenatal
        /// </sumary>
        private DateTime PE_DateFirstTimePrenaCtrl;
        /// <sumary>
        /// Edad con comodin
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Último Control Prenatal
        /// </sumary>
        private bool VC_DateLastPrenatalCtrl;
        /// <sumary>
        /// Comparación con fecha del ultimo control prenatal
        /// </sumary>
        private bool VC_DateFirstTimePrenaCtrl;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateLastPrenatalCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Último Control Prenatal
        /// </sumary>
        /// <param name="PE_DateLastPrenatalCtrl">Último Control Prenatal</param>
        /// <param name="PE_IdSex">sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_DateFirstTimePrenaCtrl">Fecha del primer control prenatal</param>
        public RuntimeResult<string> Execute(DateTime PE_DateLastPrenatalCtrl, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_InitDate, long PE_Gestation, DateTime PE_DateFirstTimePrenaCtrl)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateLastPrenatalCtrl = PE_DateLastPrenatalCtrl;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_Gestation = PE_Gestation;
                this.PE_DateFirstTimePrenaCtrl = PE_DateFirstTimePrenaCtrl;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateLastPrenatalCtrl = FUNC_VC_DateLastPrenatalCtrl();
                this.VC_DateFirstTimePrenaCtrl = FUNC_VC_DateFirstTimePrenaCtrl();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateLastPrenatalCtrl == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateLastPrenatalCtrl == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateLastPrenatalCtrl, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateLastPrenatalCtrl()
        {
            {
                return (PE_DateLastPrenatalCtrl == new DateTime(1800, 1, 1)
    || PE_DateLastPrenatalCtrl == new DateTime(1845, 1, 1)
    || (PE_DateLastPrenatalCtrl <= PE_CutOffDate));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstTimePrenaCtrl()
        {
            {
                return (PE_DateFirstTimePrenaCtrl == new DateTime(1800, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1845, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1805, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1810, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1825, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1830, 1, 1)
                || PE_DateFirstTimePrenaCtrl == new DateTime(1835, 1, 1)
                || PE_DateLastPrenatalCtrl == new DateTime(1800, 1, 1)
                || PE_DateLastPrenatalCtrl == new DateTime(1845, 1, 1)
                 || (PE_DateFirstTimePrenaCtrl <= PE_DateLastPrenatalCtrl));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01) || PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01) || PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 58 'Último Control Prenatal'");
            if (!(PE_IdSex == "F" || PE_IdSex == "M")) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo'   en variable 58 'Último Control Prenatal'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 58 'Último Control Prenatal'");
            if (!(PE_Gestation == 1 || (new long[] { 0, 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 58 'Último Control Prenatal'");
            if (!(VC_DateFirstTimePrenaCtrl == true)) NonValidMessages.Add($"La Fecha de control prenatal de primera vez , es mayor a fecha de último control prenatal. Validar variable 56 'Control Prenatal de Primera vez'   y variable 58 'Último Control Prenatal'");
            if (!(VC_DateLastPrenatalCtrl == true)) NonValidMessages.Add($"La fecha de ultimo control prenatal es mayor a la fecha de corte. Validar Variable 58 'Último Control Prenatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Último Control Prenatal, debe ser gestante, validar variable 58 'Último Control Prenatal' y variable 14 'Gestacion'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en último control prenatal. Validar variable 9 'Edad'  y variable 58 'Último Control Prenatal'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en último control prenatal. Validar variable 9 'Edad'  y variable 58 'Último Control Prenatal'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Último Control Prenatal, debe ser gestante, validar variable 58 'Último Control Prenatal' y variable 14 'Gestacion'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en último control prenatal. Validar variable 9 'Edad'  y variable 58 'Último Control Prenatal'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en último control prenatal. Validar variable 9 'Edad'  y variable 58 'Último Control Prenatal'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 58 'Último Control Prenatal'  y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01, debe ser no gestante. validar variable 14 'Gestación' y variable 58 ''Último Control Prenatal''", this.FileName);
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateLastPrenatalCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateFirstTimePrenaCtrl == true) && (VC_DateLastPrenatalCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Antígeno de Superficie Hepatitis B en Gestantes
    /// </sumary> 
    public sealed class RUL_DateHepatitisBPregnant
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private DateTime PE_DateHepatitisBPregnant;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Gestacion
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Resultado Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        private long PE_ResultHepatitisBPregnant;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateHepatitisBPregnant() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Antígeno de Superficie Hepatitis B en Gestantes
        /// </sumary>
        /// <param name="PE_DateHepatitisBPregnant">Fecha Antígeno de Superficie Hepatitis B en Gestantes</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Gestation">Gestacion</param>
        /// <param name="PE_ResultHepatitisBPregnant">Resultado Antígeno de Superficie Hepatitis B en Gestantes</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHepatitisBPregnant, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_Gestation, long PE_ResultHepatitisBPregnant)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHepatitisBPregnant = PE_DateHepatitisBPregnant;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_Gestation = PE_Gestation;
                this.PE_ResultHepatitisBPregnant = PE_ResultHepatitisBPregnant;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateHepatitisBPregnant == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateHepatitisBPregnant, "a");
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant) || PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01) || PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01) || PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_Gestation == 1 || (new long[] { 0, 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no válido, Variable 14 'Gestación' en variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'");
            if (!(PE_ResultHepatitisBPregnant == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant))) NonValidMessages.Add($"Valor no válido, Variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes' en variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateHepatitisBPregnant)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo Masculino, el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes' y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe registrar una Fecha Antígeno de Superficie Hepatitis B en Gestantes diferente a 1845-01-01, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'  y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe registrar una Fecha Antígeno de Superficie Hepatitis B en Gestantes diferente a 1845-01-01, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'  y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe registrar una Fecha Antígeno de Superficie Hepatitis B en Gestantes diferente a 1845-01-01, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'  y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe registrar una Fecha Antígeno de Superficie Hepatitis B en Gestantes diferente a 1845-01-01, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'  y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar  en Fecha Antígeno de Superficie Hepatitis B en Gestantes debe ser 1845-01-01, validar variable 10 'Sexo' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe registrar un valor diferente a 0 en Resultado Antígeno de Superficie Hepatitis B en Gestantes, validar variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes' y variable 79 'Resultado Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes, debe ser gestante, validar variable 14 'Gestación' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultHepatitisBPregnant)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else if ((PE_DateHepatitisBPregnant > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (PE_ResultHepatitisBPregnant == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Antígeno de Superficie Hepatitis B en Gestantes,debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 78 'Fecha Antígeno de Superficie Hepatitis B en Gestantes'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Toma de Hemoglobina
    /// </sumary> 
    public sealed class RUL_DateHemoglobin
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Toma de Hemoglobina
        /// </sumary>
        private DateTime PE_DateHemoglobin;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de hemoglobina que se calcula con la fecha de nacimiento
        /// </sumary>
        private bool VC_DateHemoglobin1;
        /// <sumary>
        /// Calculado de fecha contra periodo reportado
        /// </sumary>
        private bool VC_DateHemoglobin;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateHemoglobin() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Toma de Hemoglobina
        /// </sumary>
        /// <param name="PE_DateHemoglobin">Fecha Toma de Hemoglobina</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha Fin</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHemoglobin, DateTime PE_InitDate, DateTime PE_EndDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHemoglobin = PE_DateHemoglobin;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_DateHemoglobin1 = FUNC_VC_DateHemoglobin1();
                this.VC_DateHemoglobin = FUNC_VC_DateHemoglobin();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateHemoglobin1()
        {
            {
                return (
   PE_DateHemoglobin == new DateTime(1800, 01, 01)
   || PE_DateHemoglobin == new DateTime(1805, 01, 01)
   || PE_DateHemoglobin == new DateTime(1810, 01, 01)
   || PE_DateHemoglobin == new DateTime(1825, 01, 01)
   || PE_DateHemoglobin == new DateTime(1830, 01, 01)
   || PE_DateHemoglobin == new DateTime(1845, 01, 01)

   || (PE_DateHemoglobin <= PE_EndDate));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateHemoglobin()
        {
            {
                return (
   PE_DateHemoglobin == new DateTime(1800, 01, 01)
   || PE_DateHemoglobin == new DateTime(1805, 01, 01)
   || PE_DateHemoglobin == new DateTime(1810, 01, 01)
   || PE_DateHemoglobin == new DateTime(1825, 01, 01)
   || PE_DateHemoglobin == new DateTime(1830, 01, 01)
   || PE_DateHemoglobin == new DateTime(1845, 01, 01)

   || (PE_DateHemoglobin >= PE_BirthDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateHemoglobin) || PE_DateHemoglobin > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 103 'Fecha Toma de Hemoglobina'");
            if (!(VC_DateHemoglobin == true)) NonValidMessages.Add($"fecha de la Variable 103 'Fecha Toma de Hemoglobina' es menor a la fecha de nacimiento");
            if (!(VC_DateHemoglobin1 == true)) NonValidMessages.Add($"fecha de la Variable 103 'Fecha Toma de Hemoglobina' es mayor a la fecha de corte");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateHemoglobin)) && (VC_DateHemoglobin == true) && (VC_DateHemoglobin1 == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de la Talla
    /// </sumary> 
    public sealed class RUL_DateHeight
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de la Talla
        /// </sumary>
        private DateTime PE_DateHeight;
        /// <sumary>
        /// Fecha Inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Talla en Centímetros
        /// </sumary>
        private double PE_HeightCm;
        /// <sumary>
        /// Fecha de la Talla Calculada 
        /// </sumary>
        private bool VC_DateHeight;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateHeight() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de la Talla
        /// </sumary>
        /// <param name="PE_DateHeight">Fecha de la Talla</param>
        /// <param name="PE_InitDate">Fecha Inicial</param>
        /// <param name="PE_EndDate">Fecha Final</param>
        /// <param name="PE_HeightCm">Talla en Centímetros</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHeight, DateTime PE_InitDate, DateTime PE_EndDate, double PE_HeightCm)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHeight = PE_DateHeight;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.PE_HeightCm = PE_HeightCm;
                this.VC_DateHeight = FUNC_VC_DateHeight();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateHeight()
        {
            {
                return (PE_DateHeight == new DateTime(1800, 1, 1) || (PE_DateHeight <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_DateHeight == true || VC_DateHeight != true)) NonValidMessages.Add($"Valor no valido. Validar variable 31 'Fecha de la Talla'");
            if (!(PE_DateHeight == new DateTime(1800, 01, 01) || PE_DateHeight > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 31 'Fecha de la Talla'");
            if (!(PE_HeightCm == 999 || PE_HeightCm != 999)) NonValidMessages.Add($"Valor no valido. Validar variable 32 'Talla en Centimetros' en variable 31 'Fecha de la Talla'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_DateHeight == true) && (PE_DateHeight == new DateTime(1800, 01, 01)) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateHeight == true) && (PE_DateHeight == new DateTime(1800, 01, 01)) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de la talla '1800-01-01' , debe registrar 999 en Peso de Talla en Centímetros, validar variable 31 'Fecha de la Talla'  y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((VC_DateHeight == true) && (PE_DateHeight > new DateTime(1900, 01, 01)) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de la Talla, debe registrar Talla en Centímetros, validar variable 31 'Fecha de la Talla'  y variable 32 Talla en Centímetros", this.FileName);
            }
            else if ((VC_DateHeight == true) && (PE_DateHeight > new DateTime(1900, 01, 01)) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateHeight != true) && (PE_DateHeight == new DateTime(1800, 01, 01)) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de la talla es mayor a la fecha de corte, validar variable 31 'Fecha de la Talla' ", this.FileName);
            }
            else if ((VC_DateHeight != true) && (PE_DateHeight == new DateTime(1800, 01, 01)) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de la talla es mayor a la fecha de corte, validar variable 31 'Fecha de la Talla' ", this.FileName);
            }
            else if ((VC_DateHeight != true) && (PE_DateHeight > new DateTime(1900, 01, 01)) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de la talla es mayor a la fecha de corte, validar variable 31 'Fecha de la Talla' ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"la fecha de la talla es mayor a la fecha de corte, validar variable 31 'Fecha de la Talla' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Toma de HDL
    /// </sumary> 
    public sealed class RUL_DateHDL
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Toma de HDL
        /// </sumary>
        private DateTime PE_DateHDL;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateHDL() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Toma de HDL
        /// </sumary>
        /// <param name="PE_DateHDL">Fecha Toma de HDL</param>
        public RuntimeResult<string> Execute(DateTime PE_DateHDL)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateHDL = PE_DateHDL;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateHDL) || PE_DateHDL > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 111 'Fecha Toma de HDL'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateHDL)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta de Crecimiento y Desarrollo Primera vez
    /// </sumary> 
    public sealed class RUL_DateGrowthDev
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta de Crecimiento y Desarrollo Primera vez
        /// </sumary>
        private DateTime PE_DateGrowthDev;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateGrowthDev() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta de Crecimiento y Desarrollo Primera vez
        /// </sumary>
        /// <param name="PE_DateGrowthDev">Consulta de Crecimiento y Desarrollo Primera vez</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateGrowthDev, DateTime PE_CutOffDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateGrowthDev = PE_DateGrowthDev;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateGrowthDev == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateGrowthDev, "a");
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGrowthDev) || PE_DateGrowthDev == new DateTime(1800, 01, 01) || PE_DateGrowthDev == new DateTime(1845, 01, 01) || PE_DateGrowthDev > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad'  en variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGrowthDev)) && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateGrowthDev)) && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta de Crecimiento y Desarrollo Primera vez, la edad debe ser menor a 10 años, validar variable 9 'Edad' y variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'", this.FileName);
            }
            else if ((PE_DateGrowthDev == new DateTime(1800, 01, 01)) && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateGrowthDev == new DateTime(1800, 01, 01)) && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta de Crecimiento y Desarrollo Primera vez, la edad debe ser menor a 10 años, validar variable 9 'Edad' y variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'", this.FileName);
            }
            else if ((PE_DateGrowthDev == new DateTime(1845, 01, 01)) && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta de Crecimiento y Desarrollo Primera vez 1845-01-01 debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'", this.FileName);
            }
            else if ((PE_DateGrowthDev == new DateTime(1845, 01, 01)) && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateGrowthDev > new DateTime(1900, 01, 01)) && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta de Crecimiento y Desarrollo Primera vez, la edad debe ser menor a 10 años, validar variable 9 'Edad' y variable 69 'Consulta de Crecimiento y Desarrollo Primera vez'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Hemoglobina Glicosilada
    /// </sumary> 
    public sealed class RUL_DateGlycosylatedHemoglobin
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Hemoglobina Glicosilada
        /// </sumary>
        private DateTime PE_DateGlycosylatedHemoglobin;
        /// <sumary>
        /// Hemoglobina Glicosilada
        /// </sumary>
        private double PE_ResultGlycosylatedHemoglobin;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Variable que calcula que la fecha de hemoglobina no sea menor a la de nacimiento
        /// </sumary>
        private bool VC_DateGlycosylatedHemoglobin1;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateGlycosylatedHemoglobin() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Hemoglobina Glicosilada
        /// </sumary>
        /// <param name="PE_DateGlycosylatedHemoglobin">Fecha Hemoglobina Glicosilada</param>
        /// <param name="PE_ResultGlycosylatedHemoglobin">Hemoglobina Glicosilada</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha Final</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateGlycosylatedHemoglobin, double PE_ResultGlycosylatedHemoglobin, DateTime PE_InitDate, DateTime PE_EndDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateGlycosylatedHemoglobin = PE_DateGlycosylatedHemoglobin;
                this.PE_ResultGlycosylatedHemoglobin = PE_ResultGlycosylatedHemoglobin;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_DateGlycosylatedHemoglobin1 = FUNC_VC_DateGlycosylatedHemoglobin1();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateGlycosylatedHemoglobin1()
        {

            {
                return (
               PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)
               || PE_DateGlycosylatedHemoglobin == new DateTime(1805, 01, 01)
               || PE_DateGlycosylatedHemoglobin == new DateTime(1810, 01, 01)
               || PE_DateGlycosylatedHemoglobin == new DateTime(1825, 01, 01)
               || PE_DateGlycosylatedHemoglobin == new DateTime(1830, 01, 01)
               || PE_DateGlycosylatedHemoglobin == new DateTime(1845, 01, 01)

               || (PE_DateGlycosylatedHemoglobin >= PE_BirthDate && PE_DateGlycosylatedHemoglobin <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01) || PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin))) NonValidMessages.Add($"Valor no válido, Variable 108 'Fecha Hemoglobina Glicosilada'");
            if (!(VC_DateGlycosylatedHemoglobin1 == true || VC_DateGlycosylatedHemoglobin1 != true)) NonValidMessages.Add($"Valor no válido, Variable 108 'Fecha Hemoglobina Glicosilada'");
            if (!(PE_ResultGlycosylatedHemoglobin == 999 || PE_ResultGlycosylatedHemoglobin == 0 || PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20)) NonValidMessages.Add($"Los posibles valores son 0, 999 o estar entre 5 y 20, validar variable 109 'Hemoglobina Glicosilada'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha hemoglobina glicosilada, debe registrar valor de hemoglobina glicosilada diferente de cero. validar variable 109 'Hemoglobina Glicosilada' y variable 108 'Fecha hemoglobina glicosilada'", this.FileName);
            }
            else if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha hemoglobina glicosilada, debe registrar valor de hemoglobina glicosilada diferente de cero. validar variable 109 'Hemoglobina Glicosilada' y variable 108 'Fecha hemoglobina glicosilada'", this.FileName);
            }
            else if ((PE_DateGlycosylatedHemoglobin == new DateTime(1800, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha hemoglobina glicosilada, debe registrar valor de hemoglobina glicosilada diferente de cero. validar variable 109 'Hemoglobina Glicosilada' y variable 108 'Fecha hemoglobina glicosilada'", this.FileName);
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Fecha hemoglobina glicosilada es menor a la fecha de nacimiento. validar variable 109 ''Hemoglobina Glicosilada'' y y variable 9 'Edad''", this.FileName);
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Fecha hemoglobina glicosilada es menor a la fecha de nacimiento. validar variable 109 ''Hemoglobina Glicosilada'' y y variable 9 'Edad''", this.FileName);
            }
            else if ((PE_DateGlycosylatedHemoglobin > new DateTime(1900, 01, 01)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Fecha hemoglobina glicosilada es menor a la fecha de nacimiento. validar variable 109 ''Hemoglobina Glicosilada'' y y variable 9 'Edad''", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)) && (VC_DateGlycosylatedHemoglobin1 == true) && (PE_ResultGlycosylatedHemoglobin >= 5 && PE_ResultGlycosylatedHemoglobin <= 20))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycosylatedHemoglobin)) && (VC_DateGlycosylatedHemoglobin1 != true) && (PE_ResultGlycosylatedHemoglobin == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de la Toma de Glicemia Basal
    /// </sumary> 
    public sealed class RUL_DateGlycemia
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de la Toma de Glicemia Basal
        /// </sumary>
        private DateTime PE_DateGlycemia;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateGlycemia() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de la Toma de Glicemia Basal
        /// </sumary>
        /// <param name="PE_DateGlycemia">Fecha de la Toma de Glicemia Basal</param>
        public RuntimeResult<string> Execute(DateTime PE_DateGlycemia)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateGlycemia = PE_DateGlycemia;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycemia) || PE_DateGlycemia > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 105 'Fecha de la Toma de Glicemia Basal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateGlycemia)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Control Prenatal de Primera vez
    /// </sumary> 
    public sealed class RUL_DateFirstTimePrenaCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Control Prenatal de Primera vez
        /// </sumary>
        private DateTime PE_DateFirstTimePrenaCtrl;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Gestacion
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de ultimo control prenatal
        /// </sumary>
        private DateTime PE_DateLastPrenatalCtrl;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Calcula que la fecha registrada sea menor al ultimo control prenatal
        /// </sumary>
        private bool VC_DateFirstTimePrenaCtrl;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateFirstTimePrenaCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Control Prenatal de Primera vez
        /// </sumary>
        /// <param name="PE_DateFirstTimePrenaCtrl">Control Prenatal de Primera vez</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de Nacimiento</param>
        /// <param name="PE_Gestation">Gestacion</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_DateLastPrenatalCtrl">Fecha de ultimo control prenatal</param>
        public RuntimeResult<string> Execute(DateTime PE_DateFirstTimePrenaCtrl, string PE_IdSex, DateTime PE_BirthDate, long PE_Gestation, DateTime PE_CutOffDate, DateTime PE_DateLastPrenatalCtrl)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateFirstTimePrenaCtrl = PE_DateFirstTimePrenaCtrl;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_Gestation = PE_Gestation;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_DateLastPrenatalCtrl = PE_DateLastPrenatalCtrl;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateFirstTimePrenaCtrl = FUNC_VC_DateFirstTimePrenaCtrl();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFirstTimePrenaCtrl == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateFirstTimePrenaCtrl, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstTimePrenaCtrl()
        {
            {
                return ((PE_DateFirstTimePrenaCtrl <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl) || PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01) || PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 56 'Control Prenatal de Primera vez'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' ");
            if (!(VC_DateFirstTimePrenaCtrl == true)) NonValidMessages.Add($" Variable 56 'Control Prenatal de Primera vez' es mayor a la fecha de corte.");
            if (!(PE_Gestation == 1 || (new long[] { 0, 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no válido, Variable 14 'Gestación' ");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable  56 'Control Prenatal de Primera vez'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en Control Prenatal de Primera vez, Validar variable 9 'Edad' y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Control Prenatal de Primera vez, debe ser gestante, valdiar variable 14 'Gestación'  y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFirstTimePrenaCtrl)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Control Prenatal de Primera vez, debe ser gestante, valdiar variable 14 'Gestación'  y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe tener un dato diferente a 1845-01-01 en Control Prenatal de Primera vez valdiar variable 14 'Gestacion' y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es gestante, debe tener un dato diferente a 1845-01-01 en Control Prenatal de Primera vez valdiar variable 14 'Gestacion' y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Control Prenatal de Primera vez debe ser 1840-01-01, validar variable 56 'Control Prenatal de Primera vez'   y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && (PE_Gestation == 1) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01 en Control Prenatal de Primera vez, Validar variable 9 'Edad' y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else if ((PE_DateFirstTimePrenaCtrl > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_DateFirstTimePrenaCtrl == true) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Control Prenatal de Primera vez, debe ser gestante, valdiar variable 14 'Gestación'  y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Control Prenatal de Primera vez, debe ser gestante, valdiar variable 14 'Gestación'  y variable 56 'Control Prenatal de Primera vez'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Planificación Familiar Primera vez
    /// </sumary> 
    public sealed class RUL_DateFamiPlanFirstTime
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// fecha inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Planificación Familiar Primera vez
        /// </sumary>
        private DateTime PE_DateFamiPlanFirstTime;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Calculo para validar que la fecha se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateFamiPlanFirstTime;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateFamiPlanFirstTime() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Planificación Familiar Primera vez
        /// </sumary>
        /// <param name="PE_InitDate">fecha inicial</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateFamiPlanFirstTime">Planificación Familiar Primera vez</param>
        public RuntimeResult<string> Execute(DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_BirthDate, DateTime PE_DateFamiPlanFirstTime)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateFamiPlanFirstTime = PE_DateFamiPlanFirstTime;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateFamiPlanFirstTime = FUNC_VC_DateFamiPlanFirstTime();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateFamiPlanFirstTime == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateFamiPlanFirstTime, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFamiPlanFirstTime()
        {


            {
                return (PE_DateFamiPlanFirstTime == new DateTime(1800, 1, 1)
                || PE_DateFamiPlanFirstTime == new DateTime(1845, 1, 1)
                 || PE_DateFamiPlanFirstTime == new DateTime(1805, 1, 1)
                 || PE_DateFamiPlanFirstTime == new DateTime(1810, 1, 1)
                || PE_DateFamiPlanFirstTime == new DateTime(1825, 1, 1)
                 || PE_DateFamiPlanFirstTime == new DateTime(1830, 1, 1)
                  || PE_DateFamiPlanFirstTime == new DateTime(1835, 1, 1)
               || (PE_DateFamiPlanFirstTime >= PE_BirthDate && PE_DateFamiPlanFirstTime <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateFamiPlanFirstTime == new DateTime(1845, 01, 01) || PE_DateFamiPlanFirstTime > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFamiPlanFirstTime))) NonValidMessages.Add($"Valor no válido, Variable 53 'Planificación Familiar Primera vez'");
            if (!(VC_DateFamiPlanFirstTime == true)) NonValidMessages.Add($"La fecha de la Variable 53 'Planificación Familiar Primera vez' es mayor a la fecha de corte");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 53 'Planificación Familiar Primera vez'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateFamiPlanFirstTime == new DateTime(1845, 01, 01)) && (VC_DateFamiPlanFirstTime == true) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es mayor o igual de 10 años o menor de 60 debe registra Fecha de Planificación Familiar Primera Vez diferente a 1845-01-01, validar variable 9 'Edad' y variable 53 'Planificación Familiar Primera vez'", this.FileName);
            }
            else if ((PE_DateFamiPlanFirstTime == new DateTime(1845, 01, 01)) && (VC_DateFamiPlanFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFamiPlanFirstTime > new DateTime(1900, 01, 01)) && (VC_DateFamiPlanFirstTime == true) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateFamiPlanFirstTime > new DateTime(1900, 01, 01)) && (VC_DateFamiPlanFirstTime == true) && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es menor de 10 años o mayor o igual de 60 años debe registra Fecha de Planificación Familiar Primera Vez no aplica, validar variable 53 'Planificación Familiar Primera vez' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateFamiPlanFirstTime)) && (VC_DateFamiPlanFirstTime == true) && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si es menor de 10 años o mayor o igual de 60 años debe registra Fecha de Planificación Familiar Primera Vez no aplica, validar variable 53 'Planificación Familiar Primera vez' y variable 9 'Edad'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Probable de Parto
    /// </sumary> 
    public sealed class RUL_DateEstimPartitium
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha Probable de Parto
        /// </sumary>
        private DateTime PE_DateEstimPartitium;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Gestacion
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Control Prenatal de Primera vez
        /// </sumary>
        private DateTime PE_DateFirstTimePrenaCtrl;
        /// <sumary>
        /// Variable de plantilla
        /// </sumary>
        private bool VC_DateEstimPartitium;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// verifica que el control prenatal primera vez sea menor que la fecha probable de parto
        /// </sumary>
        private bool VC_DateFirstTimePrenaCtrl;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateEstimPartitium() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Probable de Parto
        /// </sumary>
        /// <param name="PE_InitDate">Fecha inicio</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_DateEstimPartitium">Fecha Probable de Parto</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_Gestation">Gestacion</param>
        /// <param name="PE_DateFirstTimePrenaCtrl">Control Prenatal de Primera vez</param>
        public RuntimeResult<string> Execute(DateTime PE_InitDate, DateTime PE_CutOffDate, DateTime PE_DateEstimPartitium, DateTime PE_BirthDate, string PE_IdSex, long PE_Gestation, DateTime PE_DateFirstTimePrenaCtrl)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_InitDate = PE_InitDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_DateEstimPartitium = PE_DateEstimPartitium;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_Gestation = PE_Gestation;
                this.PE_DateFirstTimePrenaCtrl = PE_DateFirstTimePrenaCtrl;
                this.VC_DateEstimPartitium = FUNC_VC_DateEstimPartitium();
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateFirstTimePrenaCtrl = FUNC_VC_DateFirstTimePrenaCtrl();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateEstimPartitium()
        {
            {
                return (PE_DateEstimPartitium == new DateTime(1800, 1, 1)
    || PE_DateEstimPartitium == new DateTime(1845, 1, 1)

   || (PE_DateEstimPartitium >= PE_BirthDate && PE_DateEstimPartitium <= PE_CutOffDate.AddDays(280)));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateEstimPartitium == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateEstimPartitium, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateFirstTimePrenaCtrl()
        {
            {
                return (PE_DateEstimPartitium == new DateTime(1800, 1, 1)
    || PE_DateEstimPartitium == new DateTime(1845, 1, 1)

   || PE_DateFirstTimePrenaCtrl == new DateTime(1800, 1, 1)
    || PE_DateFirstTimePrenaCtrl == new DateTime(1845, 1, 1)
     || PE_DateFirstTimePrenaCtrl == new DateTime(1805, 1, 1)
     || PE_DateFirstTimePrenaCtrl == new DateTime(1810, 1, 1)
    || PE_DateFirstTimePrenaCtrl == new DateTime(1825, 1, 1)
     || PE_DateFirstTimePrenaCtrl == new DateTime(1830, 1, 1)
      || PE_DateFirstTimePrenaCtrl == new DateTime(1835, 1, 1)
   || (PE_DateFirstTimePrenaCtrl <= PE_DateEstimPartitium));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateEstimPartitium == new DateTime(1845, 01, 01) || PE_DateEstimPartitium == new DateTime(1800, 01, 01) || PE_DateEstimPartitium > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 33 'Fecha Probable de Parto'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 33 'Fecha Probable de Parto'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en Variable 33 'Fecha Probable de Parto'");
            if (!(PE_Gestation == 1 || (new long[] { 0, 2, 21 }).Contains(PE_Gestation))) NonValidMessages.Add($"Valor no válido, Variable 14 'Gestación' en Variable 33 'Fecha Probable de Parto'");
            if (!(VC_DateEstimPartitium == true || VC_DateEstimPartitium != true)) NonValidMessages.Add($"Valor no válido, Variable 33 'Fecha Probable de Parto'");
            if (!(VC_DateFirstTimePrenaCtrl == true || VC_DateFirstTimePrenaCtrl != true)) NonValidMessages.Add($"Valor no válido, Variable 56 'Control Prenatal de Primera vez'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra gestacion, debe registrar una fecha probable de parto, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra gestacion, debe registrar una fecha probable de parto, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra gestacion, debe registrar una fecha probable de parto, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra gestacion, debe registrar una fecha probable de parto, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser sexo F, validar variable 10 'Sexo' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Fecha probable de parto es menor a fecha de primer control prenatal. Validar variable 56 'Control Prenatal de Primera vez' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Fecha Probable de Parto no corresponde al periodo a reportar o supera los 280 dias de la fecha de corte, validar variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Fecha Probable de Parto no corresponde al periodo a reportar o supera los 280 dias de la fecha de corte, validar variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser gestante, validar variable 14 'Gestación' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (PE_Gestation == 1) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium == true) && (VC_DateFirstTimePrenaCtrl != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else if ((PE_DateEstimPartitium > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && ((new long[] { 0, 2, 21 }).Contains(PE_Gestation)) && (VC_DateEstimPartitium != true) && (VC_DateFirstTimePrenaCtrl == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Probable de Parto, debe ser mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 33 'Fecha Probable de Parto'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de Toma de Elisa para VIH
    /// </sumary> 
    public sealed class RUL_DateElisaTakingVIH
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        private DateTime PE_DateElisaTakingVIH;
        /// <sumary>
        /// ResultElisaVIH
        /// </sumary>
        private long PE_ResultElisaVIH;
        /// <sumary>
        /// Asesoría Pre test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePreTestElisaVIH;
        /// <sumary>
        /// Asesoría Pos test Elisa para VIH
        /// </sumary>
        private DateTime PE_DatePostTestElisaVIH;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private bool VC_DateElisaTakingVIH;
        /// <sumary>
        /// Comparación con fecha del ultimo control prenatal
        /// </sumary>
        private bool VC_Com_DatePreTestElisaVIH;
        /// <sumary>
        /// Fecha post test Elisa para VIH
        /// </sumary>
        private bool VC_Com_DatePostTestElisaVIH;
        /// <sumary>
        /// Comparación con fecha de nacimiento
        /// </sumary>
        private bool VC_Com_BirthDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateElisaTakingVIH() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de Toma de Elisa para VIH
        /// </sumary>
        /// <param name="PE_DateElisaTakingVIH">Fecha de Toma de Elisa para VIH</param>
        /// <param name="PE_ResultElisaVIH">ResultElisaVIH</param>
        /// <param name="PE_DatePreTestElisaVIH">Asesoría Pre test Elisa para VIH</param>
        /// <param name="PE_DatePostTestElisaVIH">Asesoría Pos test Elisa para VIH</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateElisaTakingVIH, long PE_ResultElisaVIH, DateTime PE_DatePreTestElisaVIH, DateTime PE_DatePostTestElisaVIH, DateTime PE_CutOffDate, DateTime PE_InitDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateElisaTakingVIH = PE_DateElisaTakingVIH;
                this.PE_ResultElisaVIH = PE_ResultElisaVIH;
                this.PE_DatePreTestElisaVIH = PE_DatePreTestElisaVIH;
                this.PE_DatePostTestElisaVIH = PE_DatePostTestElisaVIH;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_DateElisaTakingVIH = FUNC_VC_DateElisaTakingVIH();
                this.VC_Com_DatePreTestElisaVIH = FUNC_VC_Com_DatePreTestElisaVIH();
                this.VC_Com_DatePostTestElisaVIH = FUNC_VC_Com_DatePostTestElisaVIH();
                this.VC_Com_BirthDate = FUNC_VC_Com_BirthDate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateElisaTakingVIH()
        {
            {
                return (

   PE_DateElisaTakingVIH == new DateTime(1800, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1845, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1805, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1810, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1825, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1830, 1, 1)
      || PE_DateElisaTakingVIH == new DateTime(1835, 1, 1)
      || (PE_CutOffDate >= PE_DateElisaTakingVIH));
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DatePreTestElisaVIH()
        {
            {
                return (PE_DatePreTestElisaVIH == new DateTime(1800, 1, 1)
    || PE_DatePreTestElisaVIH == new DateTime(1845, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1805, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1810, 1, 1)
    || PE_DatePreTestElisaVIH == new DateTime(1825, 1, 1)
     || PE_DatePreTestElisaVIH == new DateTime(1830, 1, 1)
      || PE_DatePreTestElisaVIH == new DateTime(1835, 1, 1)

     || PE_DateElisaTakingVIH == new DateTime(1800, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1845, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1805, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1810, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1825, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1830, 1, 1)
      || PE_DateElisaTakingVIH == new DateTime(1835, 1, 1)

   || (PE_DateElisaTakingVIH >= PE_DatePreTestElisaVIH));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_DatePostTestElisaVIH()
        {
            {
                return (PE_DatePostTestElisaVIH == new DateTime(1800, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1845, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1805, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1810, 1, 1)
    || PE_DatePostTestElisaVIH == new DateTime(1825, 1, 1)
     || PE_DatePostTestElisaVIH == new DateTime(1830, 1, 1)
      || PE_DatePostTestElisaVIH == new DateTime(1835, 1, 1)

     || PE_DateElisaTakingVIH == new DateTime(1800, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1845, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1805, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1810, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1825, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1830, 1, 1)
      || PE_DateElisaTakingVIH == new DateTime(1835, 1, 1)

   || (PE_DateElisaTakingVIH <= PE_DatePostTestElisaVIH));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Com_BirthDate()
        {
            {
                return (PE_DateElisaTakingVIH == new DateTime(1800, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1845, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1805, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1810, 1, 1)
    || PE_DateElisaTakingVIH == new DateTime(1825, 1, 1)
     || PE_DateElisaTakingVIH == new DateTime(1830, 1, 1)
      || PE_DateElisaTakingVIH == new DateTime(1835, 1, 1)
   || (PE_DateElisaTakingVIH >= PE_BirthDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateElisaTakingVIH) || PE_DateElisaTakingVIH == new DateTime(1800, 01, 01) || PE_DateElisaTakingVIH > new DateTime(1900, 01, 01) || PE_DateElisaTakingVIH == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no valido, Variable 82 'Fecha de toma de elisa para VIH'");
            if (!(PE_ResultElisaVIH == 0 || (new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH))) NonValidMessages.Add($"Valor no valido, Variable 83 'Resultado elisa para VIH' en variable 82 'Fecha de Toma de Elisa para VIH'");
            if (!(VC_DateElisaTakingVIH == true)) NonValidMessages.Add($"la fecha de la Variable 82 'Fecha de Toma de Elisa para VIH' debe ser mayor a la fecha de corte");
            if (!(VC_Com_DatePreTestElisaVIH == true)) NonValidMessages.Add($" la fecha de la variable 82 'Fecha de Toma de Elisa para VIH' debe ser superior a la fecha de la Variable 75 'Asesoría Pre test Elisa para VIH' ");
            if (!(VC_Com_DatePostTestElisaVIH == true)) NonValidMessages.Add($"la fecha de la variable 82 'Fecha de Toma de Elisa para VIH' debe ser menor a la fecha de la variable 76 'Asesoría post test Elisa para VIH'. ");
            if (!(VC_Com_BirthDate == true)) NonValidMessages.Add($"la fecha de la variable 82 'Fecha de Toma de Elisa para VIH'  debe ser mayor a la  Variable 9 'Fecha de nacimiento'  ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateElisaTakingVIH)) && (PE_ResultElisaVIH == 0) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateElisaTakingVIH)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateElisaTakingVIH == new DateTime(1800, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra  fecha de toma de Elisa para VIH variable 82 'Fecha de Toma de Elisa para VIH' , debe registrar resultado de Elisa para VIH difernte de 0  . Validar variable 83 'Resultado Elisa para VIH' .", this.FileName);
            }
            else if ((PE_DateElisaTakingVIH == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateElisaTakingVIH > new DateTime(1900, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra  fecha de toma de Elisa para VIH variable 82 'Fecha de Toma de Elisa para VIH' , debe registrar resultado de Elisa para VIH difernte de 0  . Validar variable 83 'Resultado Elisa para VIH' .", this.FileName);
            }
            else if ((PE_DateElisaTakingVIH > new DateTime(1900, 01, 01)) && ((new long[] { 1, 2, 22 }).Contains(PE_ResultElisaVIH)) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateElisaTakingVIH == new DateTime(1845, 01, 01)) && (PE_ResultElisaVIH == 0) && (VC_DateElisaTakingVIH == true) && (VC_Com_DatePreTestElisaVIH == true) && (VC_Com_DatePostTestElisaVIH == true) && (VC_Com_BirthDate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Usuario registra valor diferente de 0 en variable 83 'Resultado Elisa'. validar variable 82 'Fecha de Toma de Elisa para VIH' no debe ser 1845-01-01", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Diagnóstico Desnutrición Proteico Calórica
    /// </sumary> 
    public sealed class RUL_DateDiagMalnutrition
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Diagnóstico Desnutrición Proteico Calórica
        /// </sumary>
        private DateTime PE_DateDiagMalnutrition;
        /// <sumary>
        /// Obesidad o Desnutrición Proteico Calórica
        /// </sumary>
        private long PE_ObesCaloProtMalnut;
        /// <sumary>
        /// Peso en kg
        /// </sumary>
        private double PE_WeightKg;
        /// <sumary>
        /// Altura en cm
        /// </sumary>
        private double PE_HeightCm;
        /// <sumary>
        /// Fecha inicial
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Validacion de Fecha Diagnóstico Desnutrición Proteico Calórica
        /// </sumary>
        private bool VC_DateDiagMalnutrition;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateDiagMalnutrition() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Diagnóstico Desnutrición Proteico Calórica
        /// </sumary>
        /// <param name="PE_DateDiagMalnutrition">Fecha Diagnóstico Desnutrición Proteico Calórica</param>
        /// <param name="PE_ObesCaloProtMalnut">Obesidad o Desnutrición Proteico Calórica</param>
        /// <param name="PE_WeightKg">Peso en kg</param>
        /// <param name="PE_HeightCm">Altura en cm</param>
        /// <param name="PE_InitDate">Fecha inicial</param>
        /// <param name="PE_EndDate">Fecha final</param>
        public RuntimeResult<string> Execute(DateTime PE_DateDiagMalnutrition, long PE_ObesCaloProtMalnut, double PE_WeightKg, double PE_HeightCm, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateDiagMalnutrition = PE_DateDiagMalnutrition;
                this.PE_ObesCaloProtMalnut = PE_ObesCaloProtMalnut;
                this.PE_WeightKg = PE_WeightKg;
                this.PE_HeightCm = PE_HeightCm;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_DateDiagMalnutrition = FUNC_VC_DateDiagMalnutrition();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateDiagMalnutrition()
        {
            {
                return (PE_DateDiagMalnutrition == new DateTime(1800, 1, 1)
    || PE_DateDiagMalnutrition == new DateTime(1845, 1, 1)
    || (PE_DateDiagMalnutrition <= PE_EndDate));
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(VC_DateDiagMalnutrition == true || VC_DateDiagMalnutrition != true)) NonValidMessages.Add($"Valor no válido, Variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");
            if (!(PE_DateDiagMalnutrition == new DateTime(1800, 01, 01) || PE_DateDiagMalnutrition == new DateTime(1845, 01, 01) || PE_DateDiagMalnutrition > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");
            if (!(PE_ObesCaloProtMalnut == 2 || (new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut))) NonValidMessages.Add($"Valor no válido, Variable 21 'Obesidad o Desnutrición Proteico Calórica' en variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");
            if (!(PE_WeightKg != 999 || PE_WeightKg == 999)) NonValidMessages.Add($"Valor no válido, Variable 30 'Peso en Kilogramos' en variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");
            if (!(PE_HeightCm != 999 || PE_HeightCm == 999)) NonValidMessages.Add($"Valor no válido, Variable 32 'Talla en Centímetros' en variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Error variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de Talla en Centímetros, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica' y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de peso en Kilogramos, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica' y variable 30 'Peso en Kilogramos'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de peso en Kilogramos y de Talla en centimetros,, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica', variable 30 'Peso en Kilogramos' y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition == true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de Talla en Centímetros, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica' y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de peso en Kilogramos, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica' y variable 30 'Peso en Kilogramos'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar dato de medición de peso en Kilogramos y de Talla en centimetros,, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica', variable 30 'Peso en Kilogramos' y variable 32 'Talla en Centímetros'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1800, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar un valor diferente a 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar un valor diferente a 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar un valor diferente a 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Diagnóstico Desnutrición Proteico Calórica, debe registrar un valor diferente a 2 en Obesidad o Desnutrición Proteico Calórica, validar variable 21 'Obesidad o Desnutrición Proteico Calórica' y variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition == new DateTime(1845, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && (PE_ObesCaloProtMalnut == 2) && (PE_WeightKg == 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg != 999) && (PE_HeightCm == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else if ((VC_DateDiagMalnutrition != true) && (PE_DateDiagMalnutrition > new DateTime(1900, 01, 01)) && ((new long[] { 1, 3, 21 }).Contains(PE_ObesCaloProtMalnut)) && (PE_WeightKg == 999) && (PE_HeightCm != 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La Fecha Diagnóstico Desnutrición Proteico Calórica no se encuentra dentro del periodo reportado, validar variable 64 'Fecha Diagnóstico Desnutrición Proteico Calórica'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Creatinina
    /// </sumary> 
    public sealed class RUL_DateCreatinine
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Creatinina
        /// </sumary>
        private DateTime PE_DateCreatinine;
        /// <sumary>
        /// Resultado creatinina
        /// </sumary>
        private double PE_ResultCreatinine;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Final
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Variable que calcula que la fecha de creatinina se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateCreatinine;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateCreatinine() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Creatinina
        /// </sumary>
        /// <param name="PE_DateCreatinine">Fecha Creatinina</param>
        /// <param name="PE_ResultCreatinine">Resultado creatinina</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha Final</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_DateCreatinine, double PE_ResultCreatinine, DateTime PE_InitDate, DateTime PE_EndDate, DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateCreatinine = PE_DateCreatinine;
                this.PE_ResultCreatinine = PE_ResultCreatinine;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.PE_BirthDate = PE_BirthDate;
                this.VC_DateCreatinine = FUNC_VC_DateCreatinine();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateCreatinine()
        {

            {
                return (PE_DateCreatinine == new DateTime(1800, 1, 1)
                || PE_DateCreatinine == new DateTime(1845, 1, 1)
                 || PE_DateCreatinine == new DateTime(1805, 1, 1)
                 || PE_DateCreatinine == new DateTime(1810, 1, 1)
                || PE_DateCreatinine == new DateTime(1825, 1, 1)
                 || PE_DateCreatinine == new DateTime(1830, 1, 1)
                  || PE_DateCreatinine == new DateTime(1835, 1, 1)
               || (PE_DateCreatinine >= PE_BirthDate && PE_DateCreatinine <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateCreatinine == new DateTime(1800, 01, 01) || PE_DateCreatinine > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine))) NonValidMessages.Add($"Valor no válido, Variable 106 'Fecha Creatinina'");
            if (!(VC_DateCreatinine == true || VC_DateCreatinine != true)) NonValidMessages.Add($"Valor no válido, Variable 106 'Fecha Creatinina'");
            if (!(PE_ResultCreatinine == 999 || PE_ResultCreatinine == 0 || PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25 || !(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))) NonValidMessages.Add($"Valor no válido, Variable 107 'Creatinina' en  Variable 106 'Fecha Creatinina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Creatinina, debe registrar valor de  Creatinina.Registre un dato diferente de cero. validar variable 107 'Creatinina' y variable 106 'Fecha Creatinina' ", this.FileName);
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine == true) && (!(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Creatinina, debe registrar valor de  Creatinina.Registre un dato diferente de cero. validar variable 107 'Creatinina' y variable 106 'Fecha Creatinina' ", this.FileName);
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine == new DateTime(1800, 01, 01)) && (VC_DateCreatinine != true) && (!(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Creatinina, debe registrar valor de  Creatinina.Registre un dato diferente de cero. validar variable 107 'Creatinina' y variable 106 'Fecha Creatinina' ", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine == true) && (!(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Creatinina, debe registrar valor de  Creatinina.Registre un dato diferente de cero. validar variable 107 'Creatinina' y variable 106 'Fecha Creatinina' ", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if ((PE_DateCreatinine > new DateTime(1900, 01, 01)) && (VC_DateCreatinine != true) && (!(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine == true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine == true) && (!(PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateCreatinine)) && (VC_DateCreatinine != true) && (PE_ResultCreatinine >= 0.2 && PE_ResultCreatinine <= 25))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido, la fecha de creatinina debe ser mayor a la fecha de nacimiento, validar variable 9 'fecha de nacimiento'  y menor a la fecha de corte del periodo reportado y variable 106 'Fecha Creatinina'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Suministro de Método Anticonceptivo
    /// </sumary> 
    public sealed class RUL_DateContracDelivery
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Suministro de Método Anticonceptivo
        /// </sumary>
        private DateTime PE_DateContracDelivery;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateContracDelivery() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Suministro de Método Anticonceptivo
        /// </sumary>
        /// <param name="PE_DateContracDelivery">Fecha Suministro de Método Anticonceptivo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(DateTime PE_DateContracDelivery, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateContracDelivery = PE_DateContracDelivery;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateContracDelivery == new DateTime(1845, 01, 01) || PE_DateContracDelivery == new DateTime(1800, 01, 01) || PE_DateContracDelivery > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 55 'Fecha Suministro de Método Anticonceptivo'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no valido. Validar variable 9 'edad'  en variable 55 'Fecha Suministro de Metodo Anticonceptivo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_DateContracDelivery == new DateTime(1845, 01, 01) && VC_Age >= 10 && VC_Age <= 59)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad mayor o igual a 10 años y menor de 60 años, debe registrar fecha Suministro de Método Anticonceptivo, validar variable 9 'Edad' y variable 55 'Fecha Suministro de Método Anticonceptivo'", this.FileName);
            }
            else if (PE_DateContracDelivery == new DateTime(1845, 01, 01) && !(VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_DateContracDelivery == new DateTime(1800, 01, 01) && VC_Age >= 10 && VC_Age <= 59)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_DateContracDelivery == new DateTime(1800, 01, 01) && !(VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Suministro de Método Anticonceptivo, debe registrar una edad mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 55 'Fecha Suministro de Método Anticonceptivo'", this.FileName);
            }
            else if (PE_DateContracDelivery > new DateTime(1900, 01, 01) && VC_Age >= 10 && VC_Age <= 59)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Suministro de Método Anticonceptivo, debe registrar una edad mayor o igual a 10 años y menor de 60 años, validar variable 9 'Edad' y variable 55 'Fecha Suministro de Método Anticonceptivo'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta Víctimas de Violencia Sexual
    /// </sumary> 
    public sealed class RUL_DateConsuVictSexViolence
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual
        /// </sumary>
        private DateTime PE_DateConsuVictSexViolence;
        /// <sumary>
        /// Fecha inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// fecha fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// calculo de fecha
        /// </sumary>
        private bool VC_DateConsuVictSexViolence;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateConsuVictSexViolence() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta Víctimas de Violencia Sexual
        /// </sumary>
        /// <param name="PE_DateConsuVictSexViolence">Consulta Víctimas de Violencia Sexual</param>
        /// <param name="PE_InitDate">Fecha inicio</param>
        /// <param name="PE_EndDate">fecha fin</param>
        public RuntimeResult<string> Execute(DateTime PE_DateConsuVictSexViolence, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateConsuVictSexViolence = PE_DateConsuVictSexViolence;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_DateConsuVictSexViolence = FUNC_VC_DateConsuVictSexViolence();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateConsuVictSexViolence()
        {
            {
                return (PE_DateConsuVictSexViolence == new DateTime(1800, 01, 01)
                || PE_DateConsuVictSexViolence == new DateTime(1805, 01, 01)
                || PE_DateConsuVictSexViolence == new DateTime(1810, 01, 01)
                || PE_DateConsuVictSexViolence == new DateTime(1825, 01, 01)
                || PE_DateConsuVictSexViolence == new DateTime(1830, 01, 01)
                || PE_DateConsuVictSexViolence == new DateTime(1845, 01, 01)

                || (PE_DateConsuVictSexViolence <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictSexViolence) || PE_DateConsuVictSexViolence > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido. Validar variable 66 'Consulta Víctimas de Violencia Sexual'");
            if (!(VC_DateConsuVictSexViolence == true || VC_DateConsuVictSexViolence != true)) NonValidMessages.Add($"Valor no valido. Validar variable 66 'Consulta Víctimas de Violencia Sexual'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictSexViolence)) && (VC_DateConsuVictSexViolence == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictSexViolence)) && (VC_DateConsuVictSexViolence != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateConsuVictSexViolence > new DateTime(1900, 01, 01)) && (VC_DateConsuVictSexViolence == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Consulta víctimas de violencia sexual es mayor a la fecha de corte,validar variable 66 'Consulta Víctimas de Violencia Sexual' contra Fecha de corte", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta Mujer o Menor Víctima del Maltrato
    /// </sumary> 
    public sealed class RUL_DateConsuVictimAbuse
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta Mujer o Menor Víctima del Maltrato
        /// </sumary>
        private DateTime PE_DateConsuVictimAbuse;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha Fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Consulta Mujer o Menor Víctima del Maltrato
        /// </sumary>
        private bool VC_DateConsuVictimAbuse;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateConsuVictimAbuse() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta Mujer o Menor Víctima del Maltrato
        /// </sumary>
        /// <param name="PE_DateConsuVictimAbuse">Consulta Mujer o Menor Víctima del Maltrato</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha Fin</param>
        public RuntimeResult<string> Execute(DateTime PE_DateConsuVictimAbuse, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateConsuVictimAbuse = PE_DateConsuVictimAbuse;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_DateConsuVictimAbuse = FUNC_VC_DateConsuVictimAbuse();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateConsuVictimAbuse()
        {

            {
                return (PE_DateConsuVictimAbuse == new DateTime(1800, 1, 1)
                || PE_DateConsuVictimAbuse == new DateTime(1845, 1, 1)
                 || PE_DateConsuVictimAbuse == new DateTime(1805, 1, 1)
                 || PE_DateConsuVictimAbuse == new DateTime(1810, 1, 1)
                || PE_DateConsuVictimAbuse == new DateTime(1825, 1, 1)
                 || PE_DateConsuVictimAbuse == new DateTime(1830, 1, 1)
                  || PE_DateConsuVictimAbuse == new DateTime(1835, 1, 1)
               || (PE_DateConsuVictimAbuse <= PE_EndDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictimAbuse) || !(new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }.Contains(PE_DateConsuVictimAbuse)))) NonValidMessages.Add($"Valor no valido. Validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato'");
            if (!(VC_DateConsuVictimAbuse == true || VC_DateConsuVictimAbuse != true)) NonValidMessages.Add($"Valor no valido. Validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictimAbuse) && VC_DateConsuVictimAbuse == true)
            {
                return RuntimeResult<string>.SetValid(() => { return "0"; }, $"error");
            }
            else if ((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }).Contains(PE_DateConsuVictimAbuse) && VC_DateConsuVictimAbuse != true)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (!(new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01), new DateTime(1845, 01, 01) }.Contains(PE_DateConsuVictimAbuse)) && VC_DateConsuVictimAbuse == true)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"La fecha de Consulta Mujer o Menor Víctima del Maltrato, no se encuentra dentro del periodo reportado, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' ", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Consulta por Oftalmología
    /// </sumary> 
    public sealed class RUL_Dateconsultophthalm
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Consulta por Oftalmología
        /// </sumary>
        private DateTime PE_Dateconsultophthalm;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Fecha fin
        /// </sumary>
        private DateTime PE_EndDate;
        /// <sumary>
        /// Calculo de fecha de corte
        /// </sumary>
        private bool VC_Dateconsultophthalm;
        /// <sumary>
        /// Comparacion de fecha de nacimiento con fecha de corte
        /// </sumary>
        private bool VC_DateconsultophthalmandBirthdate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_Dateconsultophthalm() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Consulta por Oftalmología
        /// </sumary>
        /// <param name="PE_Dateconsultophthalm">Consulta por Oftalmología</param>
        /// <param name="PE_BirthDate">Fecha de Nacimiento</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_EndDate">Fecha fin</param>
        public RuntimeResult<string> Execute(DateTime PE_Dateconsultophthalm, DateTime PE_BirthDate, DateTime PE_InitDate, DateTime PE_EndDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_Dateconsultophthalm = PE_Dateconsultophthalm;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_EndDate = PE_EndDate;
                this.VC_Dateconsultophthalm = FUNC_VC_Dateconsultophthalm();
                this.VC_DateconsultophthalmandBirthdate = FUNC_VC_DateconsultophthalmandBirthdate();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Dateconsultophthalm()
        {

            {
                return (PE_Dateconsultophthalm == new DateTime(1800, 1, 1)
                || PE_Dateconsultophthalm == new DateTime(1845, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1805, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1810, 1, 1)
                || PE_Dateconsultophthalm == new DateTime(1825, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1830, 1, 1)
                  || PE_Dateconsultophthalm == new DateTime(1835, 1, 1)
               || (PE_Dateconsultophthalm <= PE_EndDate));
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateconsultophthalmandBirthdate()
        {

            {
                return (PE_Dateconsultophthalm == new DateTime(1800, 1, 1)
                || PE_Dateconsultophthalm == new DateTime(1845, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1805, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1810, 1, 1)
                || PE_Dateconsultophthalm == new DateTime(1825, 1, 1)
                 || PE_Dateconsultophthalm == new DateTime(1830, 1, 1)
                  || PE_Dateconsultophthalm == new DateTime(1835, 1, 1)
               || (PE_Dateconsultophthalm >= PE_BirthDate));
            }

        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_Dateconsultophthalm) || PE_Dateconsultophthalm > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no valido, Fecha o valor invalido - Validar variable 63 'consulta por oftalmologia' .");
            if (!(VC_Dateconsultophthalm == true)) NonValidMessages.Add($"La fecha de la variable 63 'Consulta por Oftalmología' ' es mayor a la fecha de corte");
            if (!(VC_DateconsultophthalmandBirthdate == true)) NonValidMessages.Add($"La fecha de la variable 63 'Consulta por Oftalmología' es menor a la variable 9 ‘fecha de nacimiento’ ");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_Dateconsultophthalm)) && (VC_Dateconsultophthalm == true) && (VC_DateconsultophthalmandBirthdate == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Colposcopia
    /// </sumary> 
    public sealed class RUL_DateColposcopy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Colposcopia
        /// </sumary>
        private DateTime PE_DateColposcopy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Verifica que la fecha se encuentre en el rango reportado
        /// </sumary>
        private bool VC_DateColposcopy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateColposcopy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Colposcopia
        /// </sumary>
        /// <param name="PE_DateColposcopy">Fecha Colposcopia</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_InitDate">Fecha inicio</param>
        public RuntimeResult<string> Execute(DateTime PE_DateColposcopy, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, DateTime PE_InitDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateColposcopy = PE_DateColposcopy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_InitDate = PE_InitDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateColposcopy = FUNC_VC_DateColposcopy();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateColposcopy == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateColposcopy, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateColposcopy()
        {
            {
                return (PE_DateColposcopy == new DateTime(1800, 1, 1)
    || PE_DateColposcopy == new DateTime(1845, 1, 1)
     || PE_DateColposcopy == new DateTime(1805, 1, 1)
     || PE_DateColposcopy == new DateTime(1810, 1, 1)
    || PE_DateColposcopy == new DateTime(1825, 1, 1)
     || PE_DateColposcopy == new DateTime(1830, 1, 1)
      || PE_DateColposcopy == new DateTime(1835, 1, 1)
   || (PE_DateColposcopy >= PE_BirthDate && PE_DateColposcopy <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy) || PE_DateColposcopy == new DateTime(1800, 01, 01) || PE_DateColposcopy == new DateTime(1845, 01, 01) || PE_DateColposcopy > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 91 'Fecha Colposcopia'");
            if (!(VC_DateColposcopy == true)) NonValidMessages.Add($"La fecha de la Variable 91 'Fecha Colposcopia' es mayor a la fecha de corte");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 91 'Fecha Colposcopia'");
            if (!(VC_Age >= 10 || VC_Age < 10)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 91 'Fecha Colposcopia'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateColposcopy)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra menos de 10 años el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy == new DateTime(1800, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy == new DateTime(1800, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy == new DateTime(1800, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateColposcopy == new DateTime(1800, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra menos de 10 años el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy == new DateTime(1845, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateColposcopy == new DateTime(1845, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateColposcopy == new DateTime(1845, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateColposcopy == new DateTime(1845, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateColposcopy > new DateTime(1900, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy > new DateTime(1900, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"si registra sexo Masculino el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
            else if ((PE_DateColposcopy > new DateTime(1900, 01, 01)) && (VC_DateColposcopy == true) && (PE_IdSex == "F") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra menos de 10 años el dato a registrar en Fecha Colposcopia debe ser 1845-01-01, validar variable 10 'Sexo' y variable 91 'Fecha Colposcopia'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Citología Cervico uterina
    /// </sumary> 
    public sealed class RUL_DateCervicalCytology
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Citología Cervico uterina
        /// </sumary>
        private DateTime PE_DateCervicalCytology;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Citología Cervico uterina Resultados según Bethesda
        /// </sumary>
        private long PE_ResultCervicalCytology;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Cacula que la Citología Cervico uterina se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateCervicalCytology;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateCervicalCytology() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Citología Cervico uterina
        /// </sumary>
        /// <param name="PE_DateCervicalCytology">Citología Cervico uterina</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">sexo</param>
        /// <param name="PE_ResultCervicalCytology">Citología Cervico uterina Resultados según Bethesda</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        public RuntimeResult<string> Execute(DateTime PE_DateCervicalCytology, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_ResultCervicalCytology, DateTime PE_InitDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateCervicalCytology = PE_DateCervicalCytology;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_ResultCervicalCytology = PE_ResultCervicalCytology;
                this.PE_InitDate = PE_InitDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateCervicalCytology = FUNC_VC_DateCervicalCytology();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalCytology == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateCervicalCytology, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateCervicalCytology()
        {
            {
                return (PE_DateCervicalCytology == new DateTime(1800, 1, 1)
    || PE_DateCervicalCytology == new DateTime(1845, 1, 1)
     || PE_DateCervicalCytology == new DateTime(1805, 1, 1)
     || PE_DateCervicalCytology == new DateTime(1810, 1, 1)
    || PE_DateCervicalCytology == new DateTime(1825, 1, 1)
     || PE_DateCervicalCytology == new DateTime(1830, 1, 1)
      || PE_DateCervicalCytology == new DateTime(1835, 1, 1)
   || (PE_DateCervicalCytology >= PE_BirthDate && PE_DateCervicalCytology <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology) || PE_DateCervicalCytology == new DateTime(1800, 01, 01) || PE_DateCervicalCytology > new DateTime(1900, 01, 01) || PE_DateCervicalCytology == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 87 'Citología Cervico uterina'");
            if (!(VC_DateCervicalCytology == true)) NonValidMessages.Add($"La fecha de la Variable 87 'Citología Cervico uterina' es mayor a la fecha de corte");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 87 'Citología Cervico uterina'");
            if (!(VC_Age >= 10 || VC_Age >= 0 && VC_Age <= 9)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en Variable 87 'Citología Cervico uterina'");
            if (!(PE_ResultCervicalCytology == 999 || PE_ResultCervicalCytology == 0 || (new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology))) NonValidMessages.Add($"Valor no valido, Variable 88 'Citologia Cervico uterina Resultados segÃºn Bethesda' en Variable 87 'Citología Cérvico uterina'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 10 y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalCytology)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe registrar resultado de Citologia Cervico Uterina, validar variable 87 'Citología Cervico uterina'  y variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1800, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser sexo F, validar variable 10 'Sexo'  y variable 87", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe registrar resultado de Citologia Cervico Uterina, validar variable 87 'Citología Cervico uterina'  y variable 88 'Citología Cervico uterina Resultados según Bethesda'", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology > new DateTime(1900, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha Citología Cervico uterina, debe ser mayor o igual a 10 años, validar variable 9 'Edad' y variable 87 'Citología Cervico uterina'", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }).Contains(PE_ResultCervicalCytology)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en variable 87 'Fecha de Citologia Cervico Uterina'  , debe registrar 0 o 999 en variable 88 'resultado Citologia Cervico Uterina' ", this.FileName);
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalCytology == new DateTime(1845, 01, 01)) && (VC_DateCervicalCytology == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalCytology == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Biopsia Cervical
    /// </sumary> 
    public sealed class RUL_DateCervicalBiopsy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Biopsia Cervical
        /// </sumary>
        private DateTime PE_DateCervicalBiopsy;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Resultado Biopsia Cervical
        /// </sumary>
        private long PE_ResultCervicalBiopsy;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Cacula que la fecha de mamografia se encuentre en el periodo reportado
        /// </sumary>
        private bool VC_DateCervicalBiopsy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateCervicalBiopsy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Biopsia Cervical
        /// </sumary>
        /// <param name="PE_DateCervicalBiopsy">Fecha Biopsia Cervical</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">sexo</param>
        /// <param name="PE_ResultCervicalBiopsy">Resultado Biopsia Cervical</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        public RuntimeResult<string> Execute(DateTime PE_DateCervicalBiopsy, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_ResultCervicalBiopsy, DateTime PE_InitDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateCervicalBiopsy = PE_DateCervicalBiopsy;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_ResultCervicalBiopsy = PE_ResultCervicalBiopsy;
                this.PE_InitDate = PE_InitDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateCervicalBiopsy = FUNC_VC_DateCervicalBiopsy();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateCervicalBiopsy == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateCervicalBiopsy, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateCervicalBiopsy()
        {
            {
                return (PE_DateCervicalBiopsy == new DateTime(1800, 1, 1)
    || PE_DateCervicalBiopsy == new DateTime(1845, 1, 1)
     || PE_DateCervicalBiopsy == new DateTime(1805, 1, 1)
     || PE_DateCervicalBiopsy == new DateTime(1810, 1, 1)
    || PE_DateCervicalBiopsy == new DateTime(1825, 1, 1)
     || PE_DateCervicalBiopsy == new DateTime(1830, 1, 1)
      || PE_DateCervicalBiopsy == new DateTime(1835, 1, 1)
   || (PE_DateCervicalBiopsy >= PE_BirthDate && PE_DateCervicalBiopsy <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy) || PE_DateCervicalBiopsy == new DateTime(1800, 01, 01) || PE_DateCervicalBiopsy > new DateTime(1900, 01, 01) || PE_DateCervicalBiopsy == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 93 'Fecha Biopsia Cervical'");
            if (!(VC_DateCervicalBiopsy == true)) NonValidMessages.Add($"La fecha de la Variable 93 'Fecha Biopsia Cervical' es mayor a la fecha de corte");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 93 'Fecha Biopsia Cervical'");
            if (!(VC_Age >= 10 || VC_Age >= 0 && VC_Age <= 9)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 93 'Fecha Biopsia Cervical'");
            if (!((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy) || PE_ResultCervicalBiopsy == 999 || PE_ResultCervicalBiopsy == 0)) NonValidMessages.Add($"Valor no válido, Variable 94 'Resultado de Biopsia Cervical' en Variable 93 'Fecha Biopsia Cervical'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateCervicalBiopsy)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe registrar un valor diferente a 0 en Resultado Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1800, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"'Si registra Fecha Biopsia Cervical, debe ser sexo F, validar variable 93 'Fecha Biopsia Cervical' y variable 10 'Sexo' '", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe registrar un valor diferente a 0 en Resultado Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy > new DateTime(1900, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Biopsia Cervical, debe ser mayor o igual a 10 años, validar variable 93 'Fecha Biopsia Cervical' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "M") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra resultado Biopsia Cervical, debe registrar fecha Biopsia Cervical, validar variable 93 'Fecha Biopsia Cervical' y variable 94 'Resultado de Biopsia Cervical'", this.FileName);
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 10) && (PE_ResultCervicalBiopsy == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && ((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_ResultCervicalBiopsy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateCervicalBiopsy == new DateTime(1845, 01, 01)) && (VC_DateCervicalBiopsy == true) && (PE_IdSex == "F") && (VC_Age >= 0 && VC_Age <= 9) && (PE_ResultCervicalBiopsy == 999))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de consejería en Lactancia Materna
    /// </sumary> 
    public sealed class RUL_DateBreastfeeding
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// parámetro de entrada de plantilla
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha
        /// </sumary>
        private DateTime PE_DateBreastfeeding;
        /// <sumary>
        /// Fecha de inicio
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Edad 
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// variable que calcula que la fecha este en el periodo reportado
        /// </sumary>
        private bool VC_DateBreastfeeding;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateBreastfeeding() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de consejería en Lactancia Materna
        /// </sumary>
        /// <param name="PE_CutOffDate">parámetro de entrada de plantilla</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateBreastfeeding">Fecha</param>
        /// <param name="PE_InitDate">Fecha de inicio</param>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(DateTime PE_CutOffDate, DateTime PE_BirthDate, DateTime PE_DateBreastfeeding, DateTime PE_InitDate, string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateBreastfeeding = PE_DateBreastfeeding;
                this.PE_InitDate = PE_InitDate;
                this.PE_IdSex = PE_IdSex;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateBreastfeeding = FUNC_VC_DateBreastfeeding();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastfeeding == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateBreastfeeding, "a");
            }


        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateBreastfeeding()
        {
            {
                return (PE_DateBreastfeeding == new DateTime(1800, 1, 1)
    || PE_DateBreastfeeding == new DateTime(1845, 1, 1)
     || PE_DateBreastfeeding == new DateTime(1805, 1, 1)
     || PE_DateBreastfeeding == new DateTime(1810, 1, 1)
    || PE_DateBreastfeeding == new DateTime(1825, 1, 1)
     || PE_DateBreastfeeding == new DateTime(1830, 1, 1)
      || PE_DateBreastfeeding == new DateTime(1835, 1, 1)
   || (PE_DateBreastfeeding >= PE_BirthDate && PE_DateBreastfeeding <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateBreastfeeding > new DateTime(1900, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastfeeding) || PE_DateBreastfeeding == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 51 'Fecha de consejería en Lactancia Materna'");
            if (!(VC_DateBreastfeeding == true)) NonValidMessages.Add($"La fecha de la Variable 51 'Fecha de consejería en Lactancia Materna' es mayor a la fecha de corte");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 51 'Fecha de consejería en Lactancia Materna'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 51 'Fecha de consejería en Lactancia Materna'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateBreastfeeding > new DateTime(1900, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra fecha de consejería en Lactancia Materna el sexo debe ser F, validar variable 51 'Fecha de consejería en Lactancia Materna'  y variable 10 'sexo'", this.FileName);
            }
            else if ((PE_DateBreastfeeding > new DateTime(1900, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra fecha de consejería en Lactancia Materna el sexo debe ser F, validar variable 51 'Fecha de consejería en Lactancia Materna'  y variable 10 'sexo'", this.FileName);
            }
            else if ((PE_DateBreastfeeding > new DateTime(1900, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateBreastfeeding > new DateTime(1900, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Fecha de consejería en Lactancia Materna, debe ser mayor o igual de 10 años y menor de 60 años, validar variable 51 'Fecha de consejería en Lactancia Materna' y variable 9 'edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastfeeding)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra fecha de consejería en Lactancia Materna el sexo debe ser F, validar variable 51 'Fecha de consejería en Lactancia Materna'  y variable 10 'sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastfeeding)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra fecha de consejería en Lactancia Materna el sexo debe ser F, validar variable 51 'Fecha de consejería en Lactancia Materna'  y variable 10 'sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastfeeding)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastfeeding)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de consejería en Lactancia Materna, debe ser mayor o igual de 10 años y menor de 60 años, validar variable 51 'Fecha de consejería en Lactancia Materna' y variable 9 'edad'", this.FileName);
            }
            else if ((PE_DateBreastfeeding == new DateTime(1845, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateBreastfeeding == new DateTime(1845, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else if ((PE_DateBreastfeeding == new DateTime(1845, 01, 01)) && (VC_DateBreastfeeding == true) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha Toma Biopsia Seno por BACAF
    /// </sumary> 
    public sealed class RUL_DateBreastBiopsyBACAF
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Toma Biopsia Seno por BACAF
        /// </sumary>
        private DateTime PE_DateBreastBiopsyBACAF;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Resultado mamografia
        /// </sumary>
        private long PE_ResultMammography;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateBreastBiopsyBACAF() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha Toma Biopsia Seno por BACAF
        /// </sumary>
        /// <param name="PE_DateBreastBiopsyBACAF">Fecha Toma Biopsia Seno por BACAF</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_ResultMammography">Resultado mamografia</param>
        public RuntimeResult<string> Execute(DateTime PE_DateBreastBiopsyBACAF, DateTime PE_BirthDate, DateTime PE_CutOffDate, string PE_IdSex, long PE_ResultMammography)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateBreastBiopsyBACAF = PE_DateBreastBiopsyBACAF;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_IdSex = PE_IdSex;
                this.PE_ResultMammography = PE_ResultMammography;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateBreastBiopsyBACAF == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateBreastBiopsyBACAF, "a");
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01) || PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01) || (new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF))) NonValidMessages.Add($"Valor no válido, Variable 99 'Fecha Toma Biopsia Seno por BACAF'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en Variable 99 'Fecha Toma Biopsia Seno por BACAF'");
            if (!((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography) || (new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography))) NonValidMessages.Add($"Valor no válido, Variable 97 'Resultado Mamografía' en Variable 99 'Fecha Toma Biopsia Seno por BACAF'");
            if (!(VC_Age < 35 || VC_Age >= 35)) NonValidMessages.Add($"Valor no valido, Variable 9 'Edad' en Variable 99 'Fecha Toma Biopsia Seno por BACAF'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar una edad mayor o igual a 35 años, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar una edad mayor o igual a 35 años, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_DateBreastBiopsyBACAF > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBreastBiopsyBACAF == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 en Fecha Toma Biopsia Seno por BACAF, no debe registrar un resultado de Clasificación BIRADS, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 97 'Resultado Mamografía'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "M") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "M") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar sexo F, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 10 'Sexo'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar una edad mayor o igual a 35 años, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "F") && ((new long[] { 0, 2, 999 }).Contains(PE_ResultMammography)) && (VC_Age >= 35))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBreastBiopsyBACAF)) && (PE_IdSex == "F") && ((new long[] { 1, 3, 4, 5, 6, 7 }).Contains(PE_ResultMammography)) && (VC_Age < 35))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma Biopsia Seno por BACAF, debe registrar una edad mayor o igual a 35 años, validar variable 99 'Fecha Toma Biopsia Seno por BACAF' y variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tratamiento para Sífilis gestacional
    /// </sumary> 
    public sealed class RUL_DateBacilloscopy
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha Toma de Baciloscopia de Diagnóstico
        /// </sumary>
        private DateTime PE_DateBacilloscopy;
        /// <sumary>
        /// Baciloscopia de Diagnóstico
        /// </sumary>
        private long PE_ResultBacilloscopy;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateBacilloscopy() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tratamiento para Sífilis gestacional
        /// </sumary>
        /// <param name="PE_DateBacilloscopy">Fecha Toma de Baciloscopia de Diagnóstico</param>
        /// <param name="PE_ResultBacilloscopy">Baciloscopia de Diagnóstico</param>
        public RuntimeResult<string> Execute(DateTime PE_DateBacilloscopy, long PE_ResultBacilloscopy)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateBacilloscopy = PE_DateBacilloscopy;
                this.PE_ResultBacilloscopy = PE_ResultBacilloscopy;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBacilloscopy) || PE_DateBacilloscopy == new DateTime(1800, 01, 01) || PE_DateBacilloscopy > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido,  variable 112 'Fecha Toma de Baciloscopia de Diagnóstico'");
            if (!(PE_ResultBacilloscopy == 4 || (new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy))) NonValidMessages.Add($"Valor no válido, Variable 113 'Baciloscopia de Diagnóstico' en variable 112 'Fecha Toma de Baciloscopia de Diagnóstico'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBacilloscopy)) && (PE_ResultBacilloscopy == 4))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1845, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateBacilloscopy)) && ((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Baciloscopia de Diagnóstico, debe registrar Fecha Toma de Baciloscopia de Diagnóstico, validar variable 112 'Fecha Toma de Baciloscopia de Diagnóstico' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
            else if ((PE_DateBacilloscopy == new DateTime(1800, 01, 01)) && (PE_ResultBacilloscopy == 4))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma de Baciloscopia de Diagnóstico, debe registrar un valor diferente a 4 en Baciloscopia de Diagnóstico, validar variable 112 'Fecha Toma de Baciloscopia de Diagnóstico' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
            else if ((PE_DateBacilloscopy == new DateTime(1800, 01, 01)) && ((new long[] { 1, 2, 3, 22 }).Contains(PE_ResultBacilloscopy)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateBacilloscopy > new DateTime(1900, 01, 01)) && (PE_ResultBacilloscopy == 4))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha Toma de Baciloscopia de Diagnóstico, debe registrar un valor diferente a 4 en Baciloscopia de Diagnóstico, validar variable 112 'Fecha Toma de Baciloscopia de Diagnóstico' y variable 113 'Baciloscopia de Diagnóstico'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha atención parto o cesárea
    /// </sumary> 
    public sealed class RUL_DateAttenPartiCesar
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha atención parto o cesárea
        /// </sumary>
        private DateTime PE_DateAttenPartiCesar;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha final de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Fecha de inicio de corte
        /// </sumary>
        private DateTime PE_InitDate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Edad 
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// Comparación con fecha de corte
        /// </sumary>
        private bool VC_DateAttenPartiCesar;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateAttenPartiCesar() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha atención parto o cesárea
        /// </sumary>
        /// <param name="PE_DateAttenPartiCesar">Fecha atención parto o cesárea</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha final de corte</param>
        /// <param name="PE_InitDate">Fecha de inicio de corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        public RuntimeResult<string> Execute(DateTime PE_DateAttenPartiCesar, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate, DateTime PE_InitDate, long PE_Gestation)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateAttenPartiCesar = PE_DateAttenPartiCesar;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.PE_InitDate = PE_InitDate;
                this.PE_Gestation = PE_Gestation;
                this.VC_Age = FUNC_VC_Age();
                this.VC_DateAttenPartiCesar = FUNC_VC_DateAttenPartiCesar();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateAttenPartiCesar == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAttenPartiCesar == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateAttenPartiCesar, "a");
            }

        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_DateAttenPartiCesar()
        {
            {
                return (PE_DateAttenPartiCesar == new DateTime(1800, 1, 1)
    || PE_DateAttenPartiCesar == new DateTime(1845, 1, 1)

   || (PE_DateAttenPartiCesar >= PE_BirthDate && PE_DateAttenPartiCesar <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_DateAttenPartiCesar == new DateTime(1800, 01, 01) || PE_DateAttenPartiCesar > new DateTime(1900, 01, 01) || PE_DateAttenPartiCesar == new DateTime(1845, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 49 'Fecha atención parto o cesárea'");
            if (!(PE_IdSex == "F" || PE_IdSex == "M")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 49 'Fecha atención parto o cesárea'");
            if (!(VC_Age >= 10 && VC_Age <= 59 || !(VC_Age >= 10 && VC_Age <= 59))) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 49 'Fecha atención parto o cesárea'");
            if (!(VC_DateAttenPartiCesar == true || VC_DateAttenPartiCesar != true)) NonValidMessages.Add($"Valor no válido, Variable 50 'Fecha salida de la atención del parto o cesárea' en variable 49 'Fecha atención parto o cesárea'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Fecha atención parto o cesárea es mayor a la fecha de corte.Validar varibale 49 'Fecha atencion parto o cesarea'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01. Validar variable 49 'Fecha atención parto o cesárea' y variable 9 'Edad'  ", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01. Validar variable 49 'Fecha atención parto o cesárea' y variable 9 'Edad'  ", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1800, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Fecha atención parto o cesárea es mayor a la fecha de corte.Validar varibale 49 'Fecha atencion parto o cesarea'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01. Validar variable 49 'Fecha atención parto o cesárea' y variable 9 'Edad'  ", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si es menor de 10 años y mayor de 60 años debe registrar 1845-01-01. Validar variable 49 'Fecha atención parto o cesárea' y variable 9 'Edad'  ", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar > new DateTime(1900, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"se registra sexo Masculino el dato a registrar debe ser 1845-01-01. validar variable 49 'Fecha atención parto o cesárea' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "F") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (VC_Age >= 10 && VC_Age <= 59) && (VC_DateAttenPartiCesar != true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_DateAttenPartiCesar == new DateTime(1845, 01, 01)) && (PE_IdSex == "M") && (!(VC_Age >= 10 && VC_Age <= 59)) && (VC_DateAttenPartiCesar == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// consulta adulto primera vez
    /// </sumary> 
    public sealed class RUL_DateAdultConsuFirstTime
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// consulta adulto primera vez
        /// </sumary>
        private DateTime PE_DateAdultConsuFirstTime;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// fecha de corte
        /// </sumary>
        private bool VC_Fechacorte;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_DateAdultConsuFirstTime() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// consulta adulto primera vez
        /// </sumary>
        /// <param name="PE_DateAdultConsuFirstTime">consulta adulto primera vez</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(DateTime PE_DateAdultConsuFirstTime, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_DateAdultConsuFirstTime = PE_DateAdultConsuFirstTime;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_Fechacorte = FUNC_VC_Fechacorte();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1800"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1805"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1810"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1825"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1830"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1835"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            if (PE_DateAdultConsuFirstTime == Convert.ToDateTime("1/1/1845"))
            {
                return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
            }
            else
            {
                return Helper.USR_Years(PE_BirthDate, PE_DateAdultConsuFirstTime, "a");
            }
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_Fechacorte()
        {
            {
                return (PE_DateAdultConsuFirstTime == new DateTime(1800, 1, 1)
    || PE_DateAdultConsuFirstTime == new DateTime(1845, 1, 1)
     || PE_DateAdultConsuFirstTime == new DateTime(1805, 1, 1)
     || PE_DateAdultConsuFirstTime == new DateTime(1810, 1, 1)
    || PE_DateAdultConsuFirstTime == new DateTime(1825, 1, 1)
     || PE_DateAdultConsuFirstTime == new DateTime(1830, 1, 1)
      || PE_DateAdultConsuFirstTime == new DateTime(1835, 1, 1)
   || (PE_DateAdultConsuFirstTime <= PE_CutOffDate));
            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateAdultConsuFirstTime) || PE_DateAdultConsuFirstTime == new DateTime(1845, 01, 01) || PE_DateAdultConsuFirstTime > new DateTime(1900, 01, 01))) NonValidMessages.Add($"Valor no válido, Variable 73 'Consulta de Adulto Primera vez'");
            if (!(VC_Age < 45 || (new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }).Contains(VC_Age) || !(new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }.Contains(VC_Age)) || VC_Age >= 45)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 73 'Consulta de Adulto Primera vez'");
            if (!(VC_Fechacorte == true)) NonValidMessages.Add($"la fecha de 'Consulta de adulto de primera vez' es mayor a la fecha de corte.");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateAdultConsuFirstTime)) && (VC_Age < 45) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra consulta adulto primera vez, debe ser mayor o igual a 45 años, validar variable 9 'Edad'  y variable 73 'Consulta de adulto de primera vez'", this.FileName);
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateAdultConsuFirstTime)) && ((new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }).Contains(VC_Age)) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateAdultConsuFirstTime)) && (!(new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }.Contains(VC_Age))) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new DateTime[] { new DateTime(1800, 01, 01), new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateAdultConsuFirstTime)) && (VC_Age >= 45) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateAdultConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_Age < 45) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateAdultConsuFirstTime == new DateTime(1845, 01, 01)) && ((new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }).Contains(VC_Age)) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 debe ser menor a 45 años, validar variable 9 'Edad'  y variable 73 'Consulta de adulto de primera vez'", this.FileName);
            }
            else if ((PE_DateAdultConsuFirstTime == new DateTime(1845, 01, 01)) && (!(new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }.Contains(VC_Age))) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateAdultConsuFirstTime == new DateTime(1845, 01, 01)) && (VC_Age >= 45) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1845-01-01 debe ser menor a 45 años, validar variable 9 'Edad'  y variable 73 'Consulta de adulto de primera vez'", this.FileName);
            }
            else if ((PE_DateAdultConsuFirstTime > new DateTime(1900, 01, 01)) && (VC_Age < 45) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra consulta adulto primera vez, debe ser mayor o igual a 45 años, validar variable 9 'Edad'  y variable 73 'Consulta de adulto de primera vez'", this.FileName);
            }
            else if ((PE_DateAdultConsuFirstTime > new DateTime(1900, 01, 01)) && ((new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }).Contains(VC_Age)) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_DateAdultConsuFirstTime > new DateTime(1900, 01, 01)) && (!(new long[] { 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120 }.Contains(VC_Age))) && (VC_Fechacorte == true))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra consulta adulto primera vez, debe tener edad igual a 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100 y más años   validar variable 9 'Edad'  y variable 73 'Consulta de adulto de primera vez'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Hipotiroidismo Congénito
    /// </sumary> 
    public sealed class RUL_CongeHypothyroidism
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Hipotiroidismo Congénito
        /// </sumary>
        private long PE_CongeHypothyroidism;
        /// <sumary>
        /// Resultado neonatal TSH
        /// </sumary>
        private long ResultNeonatalTSH;
        /// <sumary>
        /// Tratamiento para Hipotiroidismo Congénito
        /// </sumary>
        private long PE_TreatmentCongenitalHypothyr;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        /// <sumary>
        /// 36 meses
        /// </sumary>
        private bool VC_36m;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CongeHypothyroidism() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Hipotiroidismo Congénito
        /// </sumary>
        /// <param name="PE_CongeHypothyroidism">Hipotiroidismo Congénito</param>
        /// <param name="ResultNeonatalTSH">Resultado neonatal TSH</param>
        /// <param name="PE_TreatmentCongenitalHypothyr">Tratamiento para Hipotiroidismo Congénito</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_CongeHypothyroidism, long ResultNeonatalTSH, long PE_TreatmentCongenitalHypothyr, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CongeHypothyroidism = PE_CongeHypothyroidism;
                this.ResultNeonatalTSH = ResultNeonatalTSH;
                this.PE_TreatmentCongenitalHypothyr = PE_TreatmentCongenitalHypothyr;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                this.VC_36m = FUNC_VC_36m();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "d");
        }
        /// <sumary>
        ///	
        /// </sumary>
        private bool FUNC_VC_36m()
        {
            {
                return (VC_Age >= 1095);

            }
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CongeHypothyroidism == 0 || PE_CongeHypothyroidism == 1 || (new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism))) NonValidMessages.Add($"Valor no valido. Validar variable 17 'Hipotiroidismo Congénito'");
            if (!(VC_36m == true || VC_36m != true)) NonValidMessages.Add($"Valor no valido. Validar variable edad en variable 17 'Hipotiroidismo Congénito'");
            if (!(ResultNeonatalTSH == 2 || (new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH))) NonValidMessages.Add($"Valor no valido. Validar variable  resultado neonatal en variable 17 'Hipotiroidismo Congénito'");
            if (!(PE_TreatmentCongenitalHypothyr == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr))) NonValidMessages.Add($"Valor no valido. Validar variable tratamiento hipotiroidismo congenital en variable 17 'Hipotiroidismo Congénito'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CongeHypothyroidism == 0) && (VC_36m == true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m == true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Hipotiroidismo Congénito, debe registrar 1 en Hipotiroidismo Congénito, valdiar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Hipotiroidismo Congénito, debe registrar 1 en Hipotiroidismo Congénito, valdiar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m != true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hipotiroidismo Congénito, debe registrar una edad mayor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m != true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hipotiroidismo Congénito, debe registrar una edad mayor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m != true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hipotiroidismo Congénito, debe registrar una edad mayor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 0) && (VC_36m != true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Hipotiroidismo Congénito, debe registrar una edad mayor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m == true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipotiroidismo Congénito, debe registrar una edad menor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m == true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipotiroidismo Congénito, debe registrar una edad menor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipotiroidismo Congénito, debe registrar una edad menor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 1 en Hipotiroidismo Congénito, debe registrar una edad menor a 3 años, validar variable 17 'Hipotiroidismo Congénito' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m != true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar  Tratamiento para Hipotiroidismo Congénito, validar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m != true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m != true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar 2 en resultado neonatal TSH, validar variable 17 'Hipotiroidismo Congénito' y variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if ((PE_CongeHypothyroidism == 1) && (VC_36m != true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar 2 en resultado neonatal TSH, validar variable 17 'Hipotiroidismo Congénito' y variable 85 'Resultado de TSH Neonatal'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m == true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar una edad menor a tres años, validar variable 9 'Edad' y variable 17 'Hipotiroidismo Congénito'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m == true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar una edad menor a tres años, validar variable 9 'Edad' y variable 17 'Hipotiroidismo Congénito'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar una edad menor a tres años, validar variable 9 'Edad' y variable 17 'Hipotiroidismo Congénito'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m == true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Hipotiroidismo Congénito, debe registrar una edad menor a tres años, validar variable 9 'Edad' y variable 17 'Hipotiroidismo Congénito'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m != true) && (ResultNeonatalTSH == 2) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m != true) && (ResultNeonatalTSH == 2) && ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_TreatmentCongenitalHypothyr)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Hipotiroidismo Congénito, debe registrar 1 en Hipotiroidismo Congénito, valdiar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
            else if (((new long[] { 2, 21 }).Contains(PE_CongeHypothyroidism)) && (VC_36m != true) && ((new long[] { 0, 1, 22 }).Contains(ResultNeonatalTSH)) && (PE_TreatmentCongenitalHypothyr == 0))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Tratamiento para Hipotiroidismo Congénito, debe registrar 1 en Hipotiroidismo Congénito, valdiar variable 17 'Hipotiroidismo Congénito' y variable 114 'Tratamiento para Hipotiroidismo Congénito'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Preservativos entregados a pacientes con ITS
    /// </sumary> 
    public sealed class RUL_CondomDelivPatientITS
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Preservativos entregados a pacientes con ITS
        /// </sumary>
        private long PE_CondomDelivPatientITS;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CondomDelivPatientITS() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Preservativos entregados a pacientes con ITS
        /// </sumary>
        /// <param name="PE_CondomDelivPatientITS">Preservativos entregados a pacientes con ITS</param>
        public RuntimeResult<string> Execute(long PE_CondomDelivPatientITS)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CondomDelivPatientITS = PE_CondomDelivPatientITS;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 993, 994, 995, 996, 997, 999, 0 }).Contains(PE_CondomDelivPatientITS) || PE_CondomDelivPatientITS < 150 || PE_CondomDelivPatientITS > 150 || !(new long[] { 993, 994, 995, 996, 997, 999, 0 }.Contains(PE_CondomDelivPatientITS)))) NonValidMessages.Add($"Valor no valido. Validar variable 74 'Preservativos entregados a pacientes con ITS'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 993, 994, 995, 996, 997, 999, 0 }).Contains(PE_CondomDelivPatientITS))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_CondomDelivPatientITS < 150)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_CondomDelivPatientITS > 150)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido.Validar variable 74 'Preservativos entregados a pacientes con ITS'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido.Validar variable 74 'Preservativos entregados a pacientes con ITS'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Código pertenencia étnica
    /// </sumary> 
    public sealed class RUL_CodeEthnic
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        private long PE_CodeEthnic;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CodeEthnic() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Código pertenencia étnica
        /// </sumary>
        /// <param name="PE_CodeEthnic">Código pertenencia étnica</param>
        public RuntimeResult<string> Execute(long PE_CodeEthnic)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CodeEthnic = PE_CodeEthnic;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_CodeEthnic) || !(new long[] { 1, 2, 3, 4, 5, 6 }.Contains(PE_CodeEthnic)))) NonValidMessages.Add($"Valor no valido. Validar variable 11 'Código pertenencia étnica'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_CodeEthnic)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido. Código pertenencia étnica debe ser 1,2,3,4,5, o 6. Validar variable 11 'Código pertenencia étnica'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Nivel de Educación
    /// </sumary> 
    public sealed class RUL_CodeEducaLevel
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Nivel de Educación
        /// </sumary>
        private long PE_EducaLevel;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CodeEducaLevel() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Nivel de Educación
        /// </sumary>
        /// <param name="PE_EducaLevel">Nivel de Educación</param>
        public RuntimeResult<string> Execute(long PE_EducaLevel)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_EducaLevel = PE_EducaLevel;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }).Contains(PE_EducaLevel) || !(new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }.Contains(PE_EducaLevel)))) NonValidMessages.Add($"Valor no valido. Validar variable 13 'Código de nivel educativo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (((new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }).Contains(PE_EducaLevel)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Valor no valido. Validar variable 13 'Código de nivel educativo'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Cáncer de Cérvix
    /// </sumary> 
    public sealed class RUL_CervixCancer
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Cáncer de Cérvix
        /// </sumary>
        private long PE_CervixCancer;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CervixCancer() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Cáncer de Cérvix
        /// </sumary>
        /// <param name="PE_CervixCancer">Cáncer de Cérvix</param>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(long PE_CervixCancer, string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CervixCancer = PE_CervixCancer;
                this.PE_IdSex = PE_IdSex;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CervixCancer == 0 || PE_CervixCancer == 1 || (new long[] { 2, 21 }).Contains(PE_CervixCancer))) NonValidMessages.Add($"Valor no valido, debe ser 0,1,2 o 21. Validar variable 26 'Cáncer de Cérvix'.");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo' en variable 26 'Cáncer de Cérvix'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_CervixCancer == 0 && PE_IdSex == "M")
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_CervixCancer == 0 && PE_IdSex == "F")
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Cáncer de Cérvix debe registrar en sexo M, validar variable 10 'Sexo' y variable 26 'Cáncer de Cérvix'", this.FileName);
            }
            else if (PE_CervixCancer == 1 && PE_IdSex == "M")
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si el diagnóstico es Cáncer de Cérvix el sexo debe ser F, validar variable 10 'Sexo' y variable 26 'Cáncer de Cérvix'", this.FileName);
            }
            else if (PE_CervixCancer == 1 && PE_IdSex == "F")
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 2, 21 }).Contains(PE_CervixCancer) && PE_IdSex == "M")
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si Registra sexo M debe registrar 0 en Cáncer de Cérvix, validar variable 10 'Sexo' y variable 26 'Cáncer de Cérvix'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Tamizaje Cáncer de Cuello Uterino
    /// </sumary> 
    public sealed class RUL_CervicalCancerScreening
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Tamizaje Cáncer de Cuello Uterino
        /// </sumary>
        private long PE_CervicalCancerScreening;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CervicalCancerScreening() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Tamizaje Cáncer de Cuello Uterino
        /// </sumary>
        /// <param name="PE_CervicalCancerScreening">Tamizaje Cáncer de Cuello Uterino</param>
        /// <param name="PE_IdSex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_CervicalCancerScreening, string PE_IdSex, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CervicalCancerScreening = PE_CervicalCancerScreening;
                this.PE_IdSex = PE_IdSex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CervicalCancerScreening == 0 || (new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_CervicalCancerScreening))) NonValidMessages.Add($"Valor no válido, Variable 86 'Tamizaje Cáncer de Cuello Uterino'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no válido, Variable 10 'Sexo' en variable 86 'Tamizaje Cáncer de Cuello Uterino'");
            if (!(VC_Age < 10 || VC_Age >= 10)) NonValidMessages.Add($"Valor no válido, Variable 9 'Edad' en variable 86 'Tamizaje Cáncer de Cuello Uterino'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CervicalCancerScreening == 0) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CervicalCancerScreening == 0) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CervicalCancerScreening == 0) && (PE_IdSex == "F") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_CervicalCancerScreening == 0) && (PE_IdSex == "F") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if (((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_CervicalCancerScreening)) && (PE_IdSex == "M") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Tamizaje Cáncer de Cuello Uterino, la edad debe ser mayor a 10 años y el sexo F, validar variable 86 'Tamizaje Cáncer de Cuello Uterino', la variable 10 'Sexo', la variable 9 'Edad'  ", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_CervicalCancerScreening)) && (PE_IdSex == "M") && (VC_Age >= 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Tamizaje Cáncer de Cuello Uterino, la edad debe ser mayor a 10 años y el sexo F, validar variable 86 'Tamizaje Cáncer de Cuello Uterino', la variable 10 'Sexo', la variable 9 'Edad'  ", this.FileName);
            }
            else if (((new long[] { 1, 2, 3, 16, 17, 18, 19, 20, 22 }).Contains(PE_CervicalCancerScreening)) && (PE_IdSex == "F") && (VC_Age < 10))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" Si registra Tamizaje Cáncer de Cuello Uterino, la edad debe ser mayor a 10 años y el sexo F, validar variable 86 'Tamizaje Cáncer de Cuello Uterino', la variable 10 'Sexo', la variable 9 'Edad'  ", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Suministro de Carbonato de Calcio en el Último Control Prenatal
    /// </sumary> 
    public sealed class RUL_CalciumLastPrenaCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Suministro de Carbonato de Calcio en el Último Control Prenatal
        /// </sumary>
        private long PE_CalciumLastPrenaCtrl;
        /// <sumary>
        /// Fecha de Nacimiento
        /// </sumary>
        private DateTime PE_Birthdate;
        /// <sumary>
        /// Fecha de Corte
        /// </sumary>
        private DateTime PE_Cutoffdate;
        /// <sumary>
        /// Gestación
        /// </sumary>
        private long PE_Gestation;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_IdSex;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_CalciumLastPrenaCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Suministro de Carbonato de Calcio en el Último Control Prenatal
        /// </sumary>
        /// <param name="PE_CalciumLastPrenaCtrl">Suministro de Carbonato de Calcio en el Último Control Prenatal</param>
        /// <param name="PE_Birthdate">Fecha de Nacimiento</param>
        /// <param name="PE_Cutoffdate">Fecha de Corte</param>
        /// <param name="PE_Gestation">Gestación</param>
        /// <param name="PE_IdSex">Sexo</param>
        public RuntimeResult<string> Execute(long PE_CalciumLastPrenaCtrl, DateTime PE_Birthdate, DateTime PE_Cutoffdate, long PE_Gestation, string PE_IdSex)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_CalciumLastPrenaCtrl = PE_CalciumLastPrenaCtrl;
                this.PE_Birthdate = PE_Birthdate;
                this.PE_Cutoffdate = PE_Cutoffdate;
                this.PE_Gestation = PE_Gestation;
                this.PE_IdSex = PE_IdSex;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_Birthdate, PE_Cutoffdate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_CalciumLastPrenaCtrl == 0 || (new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl))) NonValidMessages.Add($"Valor no valido. Validar variable 61 'Suministro de Carbonato de Calcio en el Último Control Prenatal'");
            if (!(!(VC_Age >= 10 && VC_Age <= 60) || VC_Age >= 10 && VC_Age <= 60)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 61 'Suministro de Carbonato de Calcio en el Último Control Prenatal'");
            if (!(PE_Gestation == 0 || PE_Gestation == 1 || PE_Gestation == 2 || PE_Gestation == 21)) NonValidMessages.Add($"Valor no valido. Validar variable 14 'Gestación' en variable 61 'Suministro de Carbonato de Calcio en el Último Control Prenatal'");
            if (!(PE_IdSex == "M" || PE_IdSex == "F")) NonValidMessages.Add($"Valor no valido. Validar variable 10 'Sexo' en variable 61 'Suministro de Carbonato de Calcio en el Último Control Prenatal'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si registra menos de 10 años y mayor o igual de 60 años debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Si es mayor o igual a 10 años y menor de 60 años debe registrar un dato diferente a 0 en gestación, validar variable 14 'Gestación' y variable 9 'Edad'");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestacion, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar un dato diferente a 1 en Gestacion, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M, debe registrar 0 en gestación, validar variable 14 'Gestación' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_CalciumLastPrenaCtrl == 0) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (!(VC_Age >= 10 && VC_Age <= 60)) && (PE_Gestation == 21) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe registrar entre 10 y 59 años, validar variable 9 'Edad' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 0) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser Sexo F, validar variable 10 'Sexo' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 1) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 2) && (PE_IdSex == "F"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else if (((new long[] { 1, 16, 17, 18, 20, 21 }).Contains(PE_CalciumLastPrenaCtrl)) && (VC_Age >= 10 && VC_Age <= 60) && (PE_Gestation == 21) && (PE_IdSex == "M"))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 en Suministro de Ácido Fólico en el Último Control Prenatal, debe ser gestante, validar variable 14 'Gestación' y variable 59 'Suministro de Ácido Fólico en el Último Control Prenatal'", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Cáncer de Seno
    /// </sumary> 
    public sealed class RUL_BreastCancer
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Cáncer de Seno
        /// </sumary>
        private long PE_BreastCancer;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_BreastCancer() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Cáncer de Seno
        /// </sumary>
        /// <param name="PE_BreastCancer">Cáncer de Seno</param>
        public RuntimeResult<string> Execute(long PE_BreastCancer)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BreastCancer = PE_BreastCancer;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 1, 2, 21 }).Contains(PE_BreastCancer) || !(new long[] { 1, 2, 21 }.Contains(PE_BreastCancer)))) NonValidMessages.Add($"Valor no valido. Validar variable 27 'Cáncer de Seno'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 1, 2, 21 }).Contains(PE_BreastCancer))
            {
                return RuntimeResult<string>.SetValid(() => { return "0"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "1"; }, $"Valor no valido, validar variable 27 'Cáncer de Seno'.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Fecha de nacimiento del usuario
    /// </sumary> 
    public sealed class RUL_BirthDate
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_BirthDate() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Fecha de nacimiento del usuario
        /// </sumary>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        public RuntimeResult<string> Execute(DateTime PE_BirthDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BirthDate = PE_BirthDate;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_BirthDate > new DateTime(1900, 01, 01) || PE_BirthDate < new DateTime(1900, 01, 01))) NonValidMessages.Add($" Valor no valido. Validar variable 9 'Edad'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_BirthDate > new DateTime(1900, 01, 01))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $" fecha de nacimiento no valida. Validar variable 9 'Edad'.", this.FileName);
            }
        }
        #endregion
    }
    /// <sumary>
    /// Control de Placa Bacteriana
    /// </sumary> 
    public sealed class RUL_BactPlateCtrl
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Control de Placa Bacteriana
        /// </sumary>
        private long PE_BactPlateCtrl;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Fecha de corte
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_BactPlateCtrl() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Control de Placa Bacteriana
        /// </sumary>
        /// <param name="PE_BactPlateCtrl">Control de Placa Bacteriana</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_CutOffDate">Fecha de corte</param>
        public RuntimeResult<string> Execute(long PE_BactPlateCtrl, DateTime PE_BirthDate, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_BactPlateCtrl = PE_BactPlateCtrl;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_BactPlateCtrl == 0 || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_BactPlateCtrl))) NonValidMessages.Add($"Valor no valido. Validar variable 48 'Control de Placa Bacteriana'");
            if (!(VC_Age < 2 || VC_Age >= 2)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 48 'Control de Placa Bacteriana'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if (PE_BactPlateCtrl == 0 && VC_Age < 2)
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (PE_BactPlateCtrl == 0 && VC_Age >= 2)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0 en Control de Placa Bacteriana, debe ser menor a 2 años, validar variable 48 'Control de Placa Bacteriana' y variable 9 'Edad'", this.FileName);
            }
            else if ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_BactPlateCtrl) && VC_Age < 2)
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Control de Placa Bacteriana, la edad de la persona debe ser mayor 0 igual a 2 años, validar variable 48 'Control de Placa Bacteriana' o variable 9 'Edad'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo
    /// </sumary> 
    public sealed class RUL_AttentMentalIllness
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo
        /// </sumary>
        private long PE_AttentMentalIllness;
        /// <sumary>
        /// Enfermedad Mental
        /// </sumary>
        private long PE_DiagMentalIllness;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_AttentMentalIllness() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo
        /// </sumary>
        /// <param name="PE_AttentMentalIllness">Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo</param>
        /// <param name="PE_DiagMentalIllness">Enfermedad Mental</param>
        public RuntimeResult<string> Execute(long PE_AttentMentalIllness, long PE_DiagMentalIllness)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AttentMentalIllness = PE_AttentMentalIllness;
                this.PE_DiagMentalIllness = PE_DiagMentalIllness;
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!((new long[] { 0 }).Contains(PE_AttentMentalIllness) || (new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_AttentMentalIllness))) NonValidMessages.Add($"Valor no valido. Validar variable 77 'Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo'");
            if (!((new long[] { 7, 21 }).Contains(PE_DiagMentalIllness) || (new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_DiagMentalIllness))) NonValidMessages.Add($"Valor no valido. Validar variable 25 'Enfermedad Mental' en variable 77 'Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((new long[] { 0 }).Contains(PE_AttentMentalIllness) && (new long[] { 7, 21 }).Contains(PE_DiagMentalIllness))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((new long[] { 0 }).Contains(PE_AttentMentalIllness) && (new long[] { 1, 2, 3, 4, 5, 6 }).Contains(PE_DiagMentalIllness))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra enfermedad mental el dato registrabo debe ser 7 o 21, validar variable 77 'Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo' o variable 25 'Enfermedad Mental'", this.FileName);
            }
            else if ((new long[] { 1, 2, 16, 17, 18, 19, 20, 22 }).Contains(PE_AttentMentalIllness) && (new long[] { 7, 21 }).Contains(PE_DiagMentalIllness))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra un dato diferente a 0 debe registrar 1,2,3,4,5,6 en enfermedad mental, validar variable 77 'Paciente con Diagnóstico de: Ansiedad, Depresión, Esquizofrenia, déficit de atención, consumo SPA y Bipolaridad recibió Atención en los últimos 6 meses por Equipo Interdisciplinario Completo' o variable 25 'Enfermedad Mental'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
        }
        #endregion
    }
    /// <sumary>
    /// Víctima de Maltrato
    /// </sumary> 
    public sealed class RUL_AbuseVictim
    {
        #region Fields
        /// <sumary>
        /// FileName
        /// </sumary>
        private string FileName;
        /// <sumary>
        /// Víctima de Maltrato
        /// </sumary>
        private long PE_AbuseVictim;
        /// <sumary>
        /// Sexo
        /// </sumary>
        private string PE_Idsex;
        /// <sumary>
        /// Fecha de nacimiento
        /// </sumary>
        private DateTime PE_BirthDate;
        /// <sumary>
        /// Consulta Mujer o Menor Víctima del Maltrato
        /// </sumary>
        private DateTime PE_DateConsuVictimAbuse;
        /// <sumary>
        /// Fecha de corte 4505
        /// </sumary>
        private DateTime PE_CutOffDate;
        /// <sumary>
        /// Edad
        /// </sumary>
        private long VC_Age;
        #endregion

        #region Members
        #endregion

        #region Builder
        /// <sumary>
        /// Inicializa una instancia de la clase
        /// </sumary>
        public RUL_AbuseVictim() { }
        #endregion

        #region Public Methods
        /// <sumary>
        /// Víctima de Maltrato
        /// </sumary>
        /// <param name="PE_AbuseVictim">Víctima de Maltrato</param>
        /// <param name="PE_Idsex">Sexo</param>
        /// <param name="PE_BirthDate">Fecha de nacimiento</param>
        /// <param name="PE_DateConsuVictimAbuse">Consulta Mujer o Menor Víctima del Maltrato</param>
        /// <param name="PE_CutOffDate">Fecha de corte 4505</param>
        public RuntimeResult<string> Execute(long PE_AbuseVictim, string PE_Idsex, DateTime PE_BirthDate, DateTime PE_DateConsuVictimAbuse, DateTime PE_CutOffDate)
        {
            try
            {
                // Resolución de prerequisitos
                #region Fields
                this.PE_AbuseVictim = PE_AbuseVictim;
                this.PE_Idsex = PE_Idsex;
                this.PE_BirthDate = PE_BirthDate;
                this.PE_DateConsuVictimAbuse = PE_DateConsuVictimAbuse;
                this.PE_CutOffDate = PE_CutOffDate;
                this.VC_Age = FUNC_VC_Age();
                #endregion

                // Validación de valores
                ValidateValues();

                return EvaluateCombinations();
            }
            catch (Exception ex)
            {
                return RuntimeResult<string>.SetError(ex.Message);
            }
        }
        #endregion

        #region Calculated variables Method
        /// <sumary>
        ///	
        /// </sumary>
        private long FUNC_VC_Age()
        {
            return Helper.USR_Years(PE_BirthDate, PE_CutOffDate, "a");
        }
        #endregion

        #region Private Methods
        /// <sumary>
        /// Valida que el valor ingresado en la variable sea válido
        /// </sumary>
        private void ValidateValues()
        {
            List<string> NonValidMessages = new List<string>();
            if (!(PE_AbuseVictim == 1 || PE_AbuseVictim == 2 || (new long[] { 3, 21 }).Contains(PE_AbuseVictim) || PE_AbuseVictim == 0)) NonValidMessages.Add($"Valor no valido. Validar variable 22 'Víctima de Maltrato'");
            if (!(PE_Idsex == "M" || PE_Idsex == "F")) NonValidMessages.Add($"Valor no válido, Validar variable 10 'Sexo' en variable 22 'Víctima de Maltrato'");
            if (!(VC_Age >= 18 || VC_Age >= 0 && VC_Age <= 17)) NonValidMessages.Add($"Valor no valido. Validar variable 9 'Edad' en variable 22 'Víctima de Maltrato'");
            if (!(PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01) || PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01) || PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01) || (new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse))) NonValidMessages.Add($"Valor no válido, Variable 65 'Consulta Mujer o Menor Víctima del Maltrato' en variable 22 'Víctima de Maltrato'");

            if (NonValidMessages.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, NonValidMessages));
        }

        /// <sumary>
        /// Evalua las combinaciones
        /// </sumary>
        private RuntimeResult<string> EvaluateCombinations()
        {
            if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer víctima de maltrato, debe registrar sexo F, validar variable 22 ' Víctima de Maltrato' y variable 10 'Sexo'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"Ok");
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer victima de maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato 1800-01-01 o > 1900-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer victima de maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato 1800-01-01 o > 1900-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer victima de maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato 1800-01-01 o > 1900-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 1) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra mujer victima de maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato 1800-01-01 o > 1900-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Víctima de Maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato un dato diferente a 1845-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 2 en Victima de Maltrato,debe ser menor a 18 años y 3 meses, validar variable 22 'Víctima de Maltrato' y variable 9 'Edad'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Víctima de Maltrato, debe registrar en Consulta Mujer o Menor Víctima del Maltrato un dato diferente a 1845-01-01, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 2) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M mayor de 18 años debe registrar 0 - No aplica en variable 22 'Victima de Maltrato'. Validar varible 10 'Sexo' . Variable 9 'Edad' y variable 22 'Victima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M mayor de 18 años debe registrar 0 - No aplica en variable 22 'Victima de Maltrato'. Validar varible 10 'Sexo' . Variable 9 'Edad' y variable 22 'Victima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M mayor de 18 años debe registrar 0 - No aplica en variable 22 'Victima de Maltrato'. Validar varible 10 'Sexo' . Variable 9 'Edad' y variable 22 'Victima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra sexo M mayor de 18 años debe registrar 0 - No aplica en variable 22 'Victima de Maltrato'. Validar varible 10 'Sexo' . Variable 9 'Edad' y variable 22 'Victima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if (((new long[] { 3, 21 }).Contains(PE_AbuseVictim)) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra fecha de Consulta Mujer o Menor Víctima del Maltrato, debe registrar 1 o 2 en Víctima de Maltrato, validar variable 65 'Consulta Mujer o Menor Víctima del Maltrato' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de consulta Mujer o menor Víctima del maltrato, debe registrar un dato diferente de 0 en Víctima de Maltrato, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de consulta Mujer o menor Víctima del maltrato, debe registrar un dato diferente de 0 en Víctima de Maltrato, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra Fecha de consulta Mujer o menor Víctima del maltrato, debe registrar un dato diferente de 0 en Víctima de Maltrato, validar variable 22 'Víctima de Maltrato' y variable 65 'Consulta Mujer o Menor Víctima del Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad menor o igual a 18 años, debe registrar un dato diferente a 0 en Victima de Maltrato, validar variable 9 'Edad' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad menor o igual a 18 años, debe registrar un dato diferente a 0 en Victima de Maltrato, validar variable 9 'Edad' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad menor o igual a 18 años, debe registrar un dato diferente a 0 en Victima de Maltrato, validar variable 9 'Edad' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "M") && (VC_Age >= 0 && VC_Age <= 17) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra edad menor o igual a 18 años, debe registrar un dato diferente a 0 en Victima de Maltrato, validar variable 9 'Edad' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 18) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 18) && ((new DateTime[] { new DateTime(1805, 01, 01), new DateTime(1810, 01, 01), new DateTime(1825, 01, 01), new DateTime(1830, 01, 01), new DateTime(1835, 01, 01) }).Contains(PE_DateConsuVictimAbuse)))
            {
                return RuntimeResult<string>.SetValid(() => { return "1"; }, $"");
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1800, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0-No aplica en Víctima de Maltrato, debe registrar sexo M mayor de 18 años, validar variable 9 'Edad', variable 10 'Sexo' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse > new DateTime(1900, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0-No aplica en Víctima de Maltrato, debe registrar sexo M mayor de 18 años, validar variable 9 'Edad', variable 10 'Sexo' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else if ((PE_AbuseVictim == 0) && (PE_Idsex == "F") && (VC_Age >= 0 && VC_Age <= 17) && (PE_DateConsuVictimAbuse == new DateTime(1845, 01, 01)))
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0-No aplica en Víctima de Maltrato, debe registrar sexo M mayor de 18 años, validar variable 9 'Edad', variable 10 'Sexo' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
            else
            {
                return RuntimeResult<string>.SetInvalid(() => { return "0"; }, $"Si registra 0-No aplica en Víctima de Maltrato, debe registrar sexo M mayor de 18 años, validar variable 9 'Edad', variable 10 'Sexo' y variable 22 'Víctima de Maltrato'", this.FileName);
            }
        }
        #endregion
    }

    /// <sumary>
    /// Clase para definición de funciones
    /// </sumary>
    public static class Helper
    {
        /// <sumary>
        /// Calcula la edad
        /// </sumary> 
        /// <param name="FechaNac">Fecha de nacimiento</param>
        /// <param name="FechaCorte">Fecha de corte</param>
        /// <param name="TipoRespuesta">Tipo de respuesta</param>
        public static long USR_Years(DateTime FechaNac, DateTime FechaCorte, string TipoRespuesta)
        {
            long result = 0;
            DateTime initialDate = new DateTime(1, 1, 1);
            switch (TipoRespuesta)
            {
                case "d":
                    result = (FechaCorte - FechaNac).Days;
                    break;

                case "m":
                    if (FechaCorte.Day < FechaNac.Day)
                    {
                        result = Math.Abs(((FechaCorte.Month - FechaNac.Month) - 1) + 12 * (FechaCorte.Year - FechaNac.Year));
                    }
                    else
                    {
                        result = Math.Abs((FechaCorte.Month - FechaNac.Month) + 12 * (FechaCorte.Year - FechaNac.Year));
                    }
                    break;

                case "a":
                    if (FechaCorte >= FechaNac)
                    {
                        TimeSpan diffDate = FechaCorte - FechaNac;
                        result = (initialDate + diffDate).Year - 1;
                    }
                    else
                    {
                        return 0;
                    }
                    break;
            }

            return result;

        }
        /// <sumary>
        /// Obtiene un archivo del repositorio de archivos según el tipo
        /// </sumary> 
        /// <param name="company">Empresa</param>
        /// <param name="libraryId">Id de librería</param>
        /// <param name="fileId">Id del archivo</param>
        public static ENT_ActionResult USR_WSGetFile(long company, long libraryId, string fileId)
        {
            try
            {
                if (string.IsNullOrEmpty(fileId))
                {
                    throw new ArgumentNullException("fileId");
                }

                ENT_ActionResult result = new ENT_ActionResult();
                string url = "http://10.1.0.159:8080/api/api/Upload/GetDocument";
                url = url + "?company=" + company + "&libraryId=" + libraryId + "&fileId=" + fileId;
                result = SYS_WSGET(url, null);
                return result;
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Adjunta el archivo al proceso
        /// </sumary> 
        /// <param name="fileFullPath">fileFullPath</param>
        /// <param name="pCodUsu">Código de usuario</param>
        /// <param name="pCodEmpr">Id de empresa</param>
        /// <param name="pCodCas">Número de caso</param>
        /// <param name="pCodSeg">Código de seguridad</param>
        public static ENT_ActionResult USR_WSAttachFileToProcess(string fileFullPath, string pCodUsu, string pCodEmpr, string pCodCas, string pCodSeg)
        {
            try
            {
                if (string.IsNullOrEmpty(pCodUsu) || string.IsNullOrEmpty(pCodEmpr) || string.IsNullOrEmpty(pCodCas) || string.IsNullOrEmpty(pCodSeg))
                {
                    throw new ArgumentNullException("pCodUsu,pCodEmpr,pCodCas,pCodSeg");
                }

                // Sube al ftp
                string remotePath = $"WORKFLOW/{pCodEmpr}/{DateTime.Now.Year}/WF_CDOCU";
                var fileName = $"{pCodEmpr}_{pCodCas}_1_{Path.GetFileName(fileFullPath)}";
                remotePath += $"/{fileName}";
                using (FileStream fs = new FileStream(fileFullPath, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
                {
                    var r = USR_FtpUpload(remotePath, fs);
                    fs.Close();
                }

                return new ENT_ActionResult() { IsSuccessful = true, FileName = Path.GetFileName(Convert.ToString(fileFullPath)) };
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Función para validar campos vacios
        /// </sumary> 
        /// <param name="PE_Value">Parametro de entrada</param>
        public static string USR_ValidationEmpty(string PE_Value)
        {
            return String.IsNullOrEmpty(PE_Value) ? "PE_Empty" : PE_Value;
        }
        /// <sumary>
        /// Función para validar Fecha dentro de un ranfo de fechas
        /// </sumary> 
        /// <param name="InitDate">Fecha inicial</param>
        /// <param name="EndDate">Fecha Final</param>
        /// <param name="Date">Fecha para evaluar</param>
        public static bool USR_ValidationDates(DateTime InitDate, DateTime EndDate, DateTime Date)
        {
            return Date >= InitDate && Date <= EndDate;

        }
        /// <sumary>
        /// Función para validar el tipo de fecha
        /// </sumary> 
        /// <param name="EsFecha">Parámetro de entrada</param>
        public static bool USR_ValidateTypeDate(string EsFecha)
        {
            return DateTime.TryParse(EsFecha, out DateTime _);
        }
        /// <sumary>
        /// Función que valida los caracteres especiales en una cadena de texto
        /// </sumary> 
        /// <param name="text">Texto a validar</param>
        public static bool USR_ValidateSpecialCharacters(string text)
        {
            System.Text.RegularExpressions.Regex pattern = new System.Text.RegularExpressions.Regex(@"^[a-zA-Z0-9 ]+$");

            return pattern.IsMatch(text);
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="parameters4505">parameters4505</param>
        /// <param name="dateslist">dateslist</param>
        public static bool USR_ValidatesMonth4505(long parameters4505, List<dynamic> dateslist)
        {
            switch (parameters4505)
            {
                case 1:
                    dateslist.Add("01");
                    dateslist.Add("02");
                    dateslist.Add("03");
                    break;
                case 2:
                    dateslist.Add("04");
                    dateslist.Add("05");
                    dateslist.Add("06");
                    break;
                case 3:
                    dateslist.Add("07");
                    dateslist.Add("08");
                    dateslist.Add("09");
                    break;
                case 4:
                    dateslist.Add("10");
                    dateslist.Add("11");
                    dateslist.Add("12");
                    break;
                default:
                    return false;
            };
            return true;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="lineSeparator">Separador de linea</param>
        /// <param name="columnSeparator">Separador de columna</param>
        /// <param name="company">compañia</param>
        /// <param name="libraryId">id de la libreria</param>
        /// <param name="fileId">id Del archivo Rs 4505</param>
        /// <param name="columnLength">Cantidad de Columnas </param>
        /// <param name="entity">tipo entidad</param>
        /// <param name="listErrors">Lista de errores </param>
        public static dynamic USR_ValidateRule4505(string lineSeparator, string columnSeparator, long company, long libraryId, string fileId, long columnLength, dynamic entity, List<string> listErrors)
        {
            try
            {
                var result = USR_WSGetFile(company, libraryId, fileId);

                Type typeEntity = (Type)entity;
                Type genericListType = typeof(List<>).MakeGenericType(typeEntity);
                IList lstEntities = (IList)Activator.CreateInstance(genericListType);

                if (!result.IsError && result.IsSuccessful)
                {
                    var data = JsonConvert.DeserializeObject<dynamic>(result.Result.ToString());
                    byte[] fileBody = data.FileBody;

                    if (fileBody != null && fileBody.Length > 0)
                    {
                        if (!USR_ValidateFileName4505(listErrors, (string)((JValue)((dynamic)result.Result).FileName).Value))
                        {
                            listErrors.Add($"El Nombre del archivo no es valido, no cumple con la estructura especificada {result.FileName}");
                            return lstEntities;
                        }

                        using (Stream stream = new MemoryStream(fileBody))
                        {
                            using (StreamReader streamReader = new StreamReader(stream, Encoding.UTF8))
                            {
                                //Leemos el archivo
                                var text = streamReader.ReadToEnd();
                                int starind = text.IndexOf(Environment.NewLine);
                                if (starind.Equals(-1))
                                {
                                    listErrors.Add($"El archivo cargado no tiene encabezado");
                                    return lstEntities;
                                }


                                var text1 = text.Substring(starind, text.Length - starind);
                                List<string> listErrorsAdd = new List<string>();

                                //Separamos por lineas 
                                string[] lines = text.Split(new string[] { lineSeparator }, StringSplitOptions.RemoveEmptyEntries);
                                string head = text.Substring(0, starind);
                                string[] headSplit = head.Split('|');
                                int countLines = lines.Length - 1;

                                int headCount = Convert.ToInt32(headSplit[4]);

                                //Valida conteo
                                if (countLines != headCount)
                                    listErrors.Add($"El archivo contiene {countLines} registros y reportan {headCount} registros en el encabezado");

                                //Validaciones del encabezado
                                if (Helper.USR_ValidateTypeDate(headSplit[2]) != true || string.IsNullOrEmpty(headSplit[2]))
                                    listErrors.Add($"La fecha inicial del encabezado no es valida o viene nula");

                                if (Helper.USR_ValidateTypeDate(headSplit[3]) != true || string.IsNullOrEmpty(headSplit[3]))
                                    listErrors.Add($"La fecha final del encabezado no es valida o viene nula");

                                //Valida el nombre de la resolucion RES004
                                string res004 = headSplit[1];
                                if (res004 != "RES004")
                                    listErrors.Add($"El encabezado del archivo es incorrecto debe contener 5 campos (1-RES004-AAAA-MM-DD-AAAA-MM-DD-6) ");

                                //Valida los campos del encabezado
                                int countPrincipal = headSplit.Length;
                                if (countPrincipal != 5)
                                    listErrors.Add($"El encabezado del archivo es incorrecto debe contener 5 campos (1-RES004-AAAA-MM-DD-AAAA-MM-DD-6) ");

                                int contador = 0;
                                for (var i = 1; i < lines.Length; i++)
                                {
                                    string[] columns = lines[i].Split(columnSeparator[0]);

                                    if (columns.Length != columnLength)
                                        listErrors.Add($"Fila {i}{columnSeparator}Campos Incorrectos{columnSeparator}El numero de variables supera el máximo permitido por al resolución");

                                    //Valida el salto de linea
                                    if (Convert.ToInt32(columns[1]) - i != 0)
                                        listErrorsAdd.Add($"Fila {i}{columnSeparator}Variable 1 | Consecutivo de Registro | No sigue el orden establecido");
                                    contador++;
                                }

                                if (listErrors.Count == 0)
                                {
                                    lstEntities = SYS_FileToEntities(text1, lineSeparator, columnSeparator, entity);
                                    listErrors.AddRange(listErrorsAdd);

                                    int index = 0;
                                    PropertyInfo[] properties = typeEntity.GetProperties();

                                    Dictionary<string, string> dic = new Dictionary<string, string>();
                                    // Convertimos archivo a lista de entidades
                                    foreach (dynamic ent in lstEntities)
                                    {
                                        //Valida que el usuario no este repetido
                                        if (dic.ContainsKey($"{ent.IdentificationType}_{ent.DocumentNumber}"))
                                        {
                                            listErrors.Add($"Fila {index + 1}{columnSeparator}Variable 4 | NumeroDocumento | La personsa identificada con {ent.IdentificationType} {ent.DocumentNumber} se encuentra repetida");
                                        }
                                        else
                                        {
                                            dic.Add($"{ent.IdentificationType}_{ent.DocumentNumber}", ent.DocumentNumber);
                                        }

                                        List<dynamic> listValidate = new List<dynamic>();
                                        listValidate.Add(new { msjfinal = "" });
                                        listValidate.Clear();
                                        //Ingresa las validacion de las expresiones regulares
                                        if (ent.ValidationErrorsList?.Count > 0)
                                        {
                                            string mensajeItem = $"Fila {index + 1}";
                                            foreach (string msg in ent.ValidationErrorsList)
                                            {
                                                //Asignamos el item de error a los mensajes de validacion de los atributos
                                                var p = properties.Select((Value, Index) => new { Value, Index })
                                                            .Single(pro => Regex.IsMatch(msg, string.Format(@"\b{0}\b", Regex.Escape(pro.Value.Name))));
                                                string msgError = ((RegexAttribute)p.Value.GetCustomAttribute(typeof(RegexAttribute)))?.Message;

                                                string msjFinaly = string.Concat(mensajeItem, columnSeparator, msgError.Trim().Replace("-", "|").Replace(" - ", "|"));

                                                if (listValidate.FirstOrDefault(x => x.msjfinal == msjFinaly)== null)
                                                {
                                                    listValidate.Add(new { msjfinal = msjFinaly });
                                                    listErrors.Add(msjFinaly);
                                                }
                                                
                                            }
                                        }
                                        ++index;
                                    }

                                    if (listErrors.Count == 0)
                                    {
                                        return new ENT_ActionResult() { FileName = string.Concat((string)((JValue)((dynamic)result.Result).FileName).Value, ",", text.Substring(0, starind)), Result = lstEntities };
                                    }
                                    else
                                    {
                                        return lstEntities;
                                    }
                                }
                                else
                                {
                                    return lstEntities;
                                }
                            }
                        }
                    }
                    else
                    {
                        listErrors.Add($"La estructura del archivo {4505} no corresponde a un formato válido 4505");
                    }
                }
                else
                {
                    listErrors.Add($"No se encontró el archivo {4505} o su estructura no corresponde al formato 4505");
                    return new ENT_ActionResult() { IsError = true };
                }
                return new ENT_ActionResult() { IsError = true };
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="listError">Lista Error</param>
        /// <param name="fileName">fileName</param>
        public static bool USR_ValidateFileName4505(List<string> listError, string fileName)
        {
            /*Constantes*/
            string informationModule = "SGD";
            string typeSource = "280";
            string informationTopic = "RPED";
            string extension = ".txt";
            string typeIdentificationEntity = "NI";
            int lengthIdentification = 12;
            string[] regimeType = new string[] { "C", "S", "P", "E", "N", "O" };

            if (listError == null) listError = new List<string>();

            //Valida que el archivo no venga vacio o null
            if (string.IsNullOrWhiteSpace(fileName)) listError.Add("El nombre del Archivo no es Valido");

            //Valida la extension del archivo
            if (!System.IO.Path.GetExtension(fileName).Equals($"{extension}")) listError.Add("La extension del archivo no es valida");

            //Valida la longitud del archivo
            if (fileName.Length != 39)
            {
                listError.Add("La longitud del archivo es invalida");
                return listError.Count == 0;
            }

            //Valida el modulo de informacion SGD
            if (!(fileName.Substring(0, 3)).Equals($"{informationModule}")) listError.Add("El identificador del modulo es incorrecto debe ser SGD valide el nombre del archivo");

            //Valida tipo de fuente
            if (!(fileName.Substring(3, 3)).Equals($"{typeSource}")) listError.Add("La fuente de Informacion es incorrecto debe ser 280 valide el nombre del archivo");

            //Valida el tema de la fuente de informacion 
            if (!(fileName.Substring(6, 4)).Equals($"{informationTopic}")) listError.Add("La fuente de Informacion es incorrecto debe ser RPED valide el nombre del archivo");

            //Valida que el nombre del archivo contenga una fecha valida
            var yyyymmdd = new Regex(@"^(?:(?:(?:(?:(?:[13579][26]|[2468][048])00)|(?:[0-9]{2}(?:(?:[13579][26])|(?:[2468][048]|0[48]))))(?:(?:(?:09|04|06|11)(?:0[1-9]|1[0-9]|2[0-9]|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1[0-9]|2[0-9]|3[01]))|(?:02(?:0[1-9]|1[0-9]|2[0-9]))))|(?:[0-9]{4}(?:(?:(?:09|04|06|11)(?:0[1-9]|1[0-9]|2[0-9]|30))|(?:(?:01|03|05|07|08|10|12)(?:0[1-9]|1[0-9]|2[0-9]|3[01]))|(?:02(?:[01][0-9]|2[0-8])))))$");
            if (!yyyymmdd.IsMatch(fileName.Substring(10, 8))) listError.Add("La fecha de corte es incorrecta debe ser AAAAMMDD");

            //Valida Tipo de Documento debe ser NI
            if (!(fileName.Substring(18, 2)).Equals($"{typeIdentificationEntity}")) listError.Add("La fuente de Informacion es incorrecto debe ser 280 valide el nombre del archivo");

            //Valida la longitud del NIT
            if (fileName.Substring(20, 12).Length != lengthIdentification) listError.Add("El numero de NIT de la entidad reportadora no es valido");

            //Valida el tipo de regimen debe ser C: CONTRIBUTIVO | S: SUBSIDIADO | E: EXCEPCION | P: ESPECIAL            
            if (!regimeType.Contains(fileName.Substring(32, 1))) listError.Add("Tipo de Regimen invalido debe contener un solo caracter (C -S -E -P");

            return listError.Count == 0;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="_entity">_entity</param>
        /// <param name="listErrors">listErrors</param>
        /// <param name="index">index</param>
        /// <param name="listDocumentTypesDB">listDocumentTypesDB</param>
        /// <param name="IdTypePopulation">IdTypePopulation</param>
        public static long USR_ValidateDocumentNumber4505(long adapterId, List<ENT_StructureRes4505En> _entity, List<string> listErrors, long index, List<dynamic> listDocumentTypesDB, long IdTypePopulation)
        {
            index = 1;
            //Funcion valida si el usuario existe
            List<dynamic> personList = new List<dynamic>();
            var listErrorsDocumentNumber = new List<string>();
            Dictionary<string, ENT_StructureRes4505En> _dictionary4505 = new Dictionary<string, ENT_StructureRes4505En>();
            Dictionary<string, string> _dictionaryDocumentType = new Dictionary<string, string>();
            _dictionaryDocumentType.Add("TI", "3");
            _dictionaryDocumentType.Add("CC", "1");
            _dictionaryDocumentType.Add("CE", "6");
            _dictionaryDocumentType.Add("PA", "7");
            _dictionaryDocumentType.Add("RC", "2");
            _dictionaryDocumentType.Add("SC", "4");
            _dictionaryDocumentType.Add("CD", "9");
            _dictionaryDocumentType.Add("NV", "1423");
            _dictionaryDocumentType.Add("MS", "1424");
            _dictionaryDocumentType.Add("AS", "2825");
            _dictionaryDocumentType.Add("UN", "3271");

            foreach (ENT_StructureRes4505En file in _entity)
            {
                if (!_dictionary4505.ContainsKey($"{file.IdentificationType}_{file.DocumentNumber}"))
                    _dictionary4505.Add($"{file.IdentificationType}_{file.DocumentNumber}", file);

                if (_dictionaryDocumentType.ContainsKey(file.IdentificationType))
                {
                    var documentTypeDictionary = _dictionaryDocumentType[file.IdentificationType];

                    var documentTypeBD = listDocumentTypesDB.Where(d => d.Id == documentTypeDictionary).FirstOrDefault();
                    // Agrega personas para consultarlas posteriormente
                    personList.Add(new { DocumentType = documentTypeBD.Id.ToString(), Identification = file.DocumentNumber, Index = index, typeId = file.IdentificationType });
                }
                index++;
            }
            List<dynamic> listpersonByPopulation = new List<dynamic>();
            USR_ValidateAffiliatePersonResolutions(personList, adapterId, listErrorsDocumentNumber, listpersonByPopulation, IdTypePopulation, _entity, _dictionaryDocumentType);
            var newlist = listErrorsDocumentNumber.Select(x => x.Replace("item", "Fila")).ToList();


            listErrors.AddRange(newlist);
            return index;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="personList">personList</param>
        /// <param name="adapterId">adapterId</param>
        /// <param name="listErrors">listErrors</param>
        /// <param name="listpersonByPopulation">listpersonByPopulation</param>
        /// <param name="IdTypePopulation">IdTypePopulation</param>
        /// <param name="_entity">_entity</param>
        /// <param name="_dictionaryDocumentType">_dictionaryDocumentType</param>
        public static List<string> USR_ValidateAffiliatePersonResolutions(List<dynamic> personList, long adapterId, List<string> listErrors, List<dynamic> listpersonByPopulation, long IdTypePopulation, List<ENT_StructureRes4505En> _entity, dynamic _dictionaryDocumentType)
        {
            //Consulta en la tabla person
            ENT_ActionResult persons = USR_GetPersonByDocumentNumber(adapterId, personList);
            if (persons.IsError) throw new Exception(persons.ErrorMessage);
            List<dynamic> listpersonByDocumentNumber = JsonConvert.DeserializeObject<List<dynamic>>(persons.Result.ToString());
            Dictionary<string, dynamic> dictionarypersonByDocumentNumber = listpersonByDocumentNumber.ToDictionary(x => $"{x.IdDocumentType}_{x.DocumentNumber}", x => x);

            //Valida tipo de poblacion
            var res = (from p in listpersonByDocumentNumber select p.Id).ToList();
            listpersonByPopulation.Add(res);
            ENT_ActionResult personsPopulation = USR_GetPersonByTypePopulation(adapterId, listpersonByPopulation);
            if (personsPopulation.IsError) throw new Exception(persons.ErrorMessage);
            List<ENT_Person4505> listpersonBypersonsPopulation = JsonConvert.DeserializeObject<List<ENT_Person4505>>(personsPopulation.Result.ToString());

            int index = 1;
            foreach (var ent in _entity)
            {
                var documentTypeDictionary = _dictionaryDocumentType[ent.IdentificationType];

                if (listpersonBypersonsPopulation.Exists(f => f.IdDocumentType == documentTypeDictionary && f.DocumentNumber == ent.DocumentNumber))
                {
                    if (listpersonBypersonsPopulation.Exists(f => f.DocumentNumber == ent.DocumentNumber && f.IdTypePopulation != IdTypePopulation.ToString()))
                        listErrors.Add(string.Concat($"Fila {index}", "|El tipo de afiliado en el archivo no corresponde al tipo de afiliado seleccionado en la plantilla ", $" numero {ent.DocumentNumber}"));
                }
                index++;
            }

            List<dynamic> personsNoExist = new List<dynamic>();

            foreach (var person in personList)
            {
                if (!dictionarypersonByDocumentNumber.ContainsKey($"{person.DocumentType}_{person.Identification}"))
                {
                    personsNoExist.Add(person);

                }
            }
            if (personsNoExist.Count > 0)
            {

                ENT_ActionResult novelty = USR_GetNoveltyDetail(adapterId, personsNoExist);
                if (novelty.IsError)
                {
                    throw new Exception(novelty.ErrorMessage);
                }
                List<dynamic> novChangeNumDoc = JsonConvert.DeserializeObject<List<dynamic>>(novelty.Result.ToString());
                if (novChangeNumDoc.Count > 0)
                {
                    foreach (var itemNoveltyDetail in novChangeNumDoc)
                    {
                        var novelties = USR_GetNoveltiesTypeDocumentByPerson(adapterId, itemNoveltyDetail.IdNovelty.ToString());
                        if (novelties.IsError)
                        {
                            throw new Exception(novelties.ErrorMessage);
                        }
                        List<dynamic> listNovelties = JsonConvert.DeserializeObject<List<dynamic>>(novelties.Result.ToString());
                        foreach (var itemNovelty in listNovelties)
                        {
                            var person = USR_GetPersonByTypeAndDocumentNumber(adapterId, itemNovelty.NewValue.ToString(), itemNoveltyDetail.NewValue.ToString());
                            if (person.IsError)
                            {
                                throw new Exception(person.ErrorMessage);
                            }
                            List<dynamic> personBD = JsonConvert.DeserializeObject<List<dynamic>>(person.Result.ToString());
                            if (personBD != null && personBD.Count > 0)
                            {
                                personsNoExist.RemoveAll(d => d.Identification == itemNoveltyDetail.OldValue.ToString());
                                break;
                            }
                        }
                    }

                }
                //Valida cambio de tipo de documento       

                var novelties2 = USR_GetNoveltiesAffiliate(adapterId, personsNoExist);
                if (novelties2.IsError)
                {
                    throw new Exception(novelties2.ErrorMessage);
                }
                List<dynamic> listNovelties2 = JsonConvert.DeserializeObject<List<dynamic>>(novelties2.Result.ToString());
                Dictionary<string, dynamic> dictionaryNovelties2 = listNovelties2.ToDictionary(x => $"{x.OldValue}_{x.DocumentNumber}", x => x);
                List<Tuple<int, string>> ForDelete = new List<Tuple<int, string>>();

                foreach (var itemPerson in personsNoExist)
                {
                    if (dictionaryNovelties2.ContainsKey($"{itemPerson.DocumentType}_{itemPerson.Identification}"))
                    {
                        Tuple<int, string> tuple = new Tuple<int, string>(int.Parse(itemPerson.DocumentType), itemPerson.Identification);

                        ForDelete.Add(tuple);
                    }
                }

                foreach (var item in ForDelete)
                {
                    personsNoExist.RemoveAll(d => d.Identification == item.Item2);
                }

                foreach (var item in personsNoExist)
                {
                    listErrors.Add($"item {item.Index}|La persona identificada con tipo de documento {item.typeId} Número {item.Identification} registrada el|no existe");
                }
            }

            return listErrors;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="sourceList">sourceList</param>
        /// <param name="maxSubItems">maxSubItems</param>
        public static dynamic USR_SplitList4505(List<ENT_StructureRes4505En> sourceList, long maxSubItems)
        {
            return sourceList
                .Select((x, i) => new { Index = i, Value = x })
                .GroupBy(x => x.Index / maxSubItems)
                .Select(x => x.Select(v => v.Value).ToList())
                .ToList();
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="fileName">fileName</param>
        /// <param name="cutOffDate">cutOffDate</param>
        /// <param name="code">code</param>
        /// <param name="idOperator">idOperator</param>
        /// <param name="caseNumber">caseNumber</param>
        /// <param name="initialDate">initialDate</param>
        /// <param name="endDate">endDate</param>
        /// <param name="idPopulation">idPopulation</param>
        /// <param name="listFileEntity">listFileEntity</param>
        public static ENT_ActionResult USR_Save4505File(string fileName, string cutOffDate, string code, long idOperator, string caseNumber, string initialDate, string endDate, long idPopulation, dynamic listFileEntity)
        {
            dynamic head = new
            {
                Module = fileName.Substring(0, 3),
                Source = fileName.Substring(3, 3),
                Information = fileName.Substring(6, 4),
                CutOffDate = cutOffDate,
                IdentificationTypeEntity = fileName.Substring(18, 2),
                IdentificationNumberEntity = fileName.Substring(20, 12),
                RegimeType = fileName.Substring(32, 1),
                ConsecutiveFile = fileName.Substring(33, 2),
                Code = code,
                ProcessDate = DateTime.Now,
                InitialDate = initialDate,
                EndDate = endDate,
                TotalRecord = listFileEntity.Count,
                IdOperator = idOperator,
                CaseNumber = caseNumber,
                IdTypePopulation = idPopulation,
            };


            string urlHead = "http://10.1.0.159:8085/ASSURANCE/api/Resolution4505/SaveFileHeadDetail4505";
            ENT_ActionResult resultHead = SYS_WSPOST(urlHead, head, null, null);

            dynamic head2 = USR_SplitList4505(listFileEntity, 4000);

            if (resultHead.IsSuccessful)
            {
                ENT_ActionResult result = new ENT_ActionResult();
                string url = "http://10.1.0.159:8085/ASSURANCE/api/Resolution4505/SaveFileHeadDetail4505Lotes";
                foreach (var listaLotes in head2)
                {
                    dynamic head3 = new
                    {
                        ListResolutionDetail = listaLotes,
                        HeadDetail = resultHead.Result
                    };
                    result = SYS_WSPOST(url, head3, null, null);
                }
                return result;
            }
            return resultHead;
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="Parameters4505">Entidad 4505 parametros enviados desde el motor</param>
        public static dynamic USR_Main4505(ENT_parameters4505 Parameters4505)
        {
            //Constantes
            const string lineSeparator = "\r\n";
            const string columnSeparator = "|";
            const int ColumnLength = 119;
            const string folder = "Resolucion4505ResultEstructura";

            //Validacion de parametros
            if (Parameters4505 == null) throw new ArgumentException($"La entidad no puede ser vacía");
            if (Parameters4505.LibraryId == 0) throw new ArgumentException($"El Id de la Libreria no puede estar vacío");
            if (Parameters4505.CompanyId == 0) throw new ArgumentException($"El Id de la Compañia no puede estar vacío");
            if (string.IsNullOrWhiteSpace(Parameters4505.CaseNumber)) throw new ArgumentException($"El numero de Caso no puede estar vacío");
            if (string.IsNullOrWhiteSpace(Parameters4505.UserCode)) throw new ArgumentException($"El Codigo del usuario no puede estar vacío");
            if (string.IsNullOrWhiteSpace(Parameters4505.FileId)) throw new ArgumentException($"El Id del Archivo no puede estar vacío");

            var listErrors = new List<string>();
            var resultValidation = USR_ValidateRule4505(lineSeparator, columnSeparator, Parameters4505.CompanyId, Parameters4505.LibraryId, Parameters4505.FileId, ColumnLength, typeof(ENT_StructureRes4505En), listErrors);

            if (listErrors.Count > 0)
            {
                //Lista retorno de archivo de errores
                List<string> Listkey = new List<string>();
                List<string> ListValue = new List<string>();
                int conteo = 1;
                foreach (var error in listErrors)
                {
                    string data = error;
                    data = data.Replace("AAAA|MM|DD", "AAAA-MM-DD").Replace("1800|01|01", "1800-01-01");
                    string[] lines = data.Split(Convert.ToChar(columnSeparator));
                    if (lines.Length == 1)
                    {
                        Listkey.Add(string.Concat($"Error {conteo}"));
                        ListValue.Add(string.Concat(lines[0].Trim(), $" verifique el archivo"));
                        conteo++;
                    }
                    else if (lines.Length > 1 && lines.Length <= 3)
                    {
                        Listkey.Add(lines[0]);
                        ListValue.Add(string.Concat(lines[1].Trim(), columnSeparator, lines[2].Trim()));
                    }
                    else
                    {
                        Listkey.Add(lines[0]);
                        ListValue.Add(string.Concat(lines[1].Trim(), columnSeparator, lines[2].Trim(), columnSeparator, lines[3].Trim()));
                    }
                }

                //Log de errores expresiones regulares
                string pathFile = string.Empty;
                if (ListValue.Count != 0)
                    pathFile = USR_GenericSaveLog4505(new Dictionary<List<string>, List<string>>() { [Listkey] = ListValue }, folder);
                else
                    pathFile = USR_GenericSaveLog(new Dictionary<string, List<string>>() { ["4505"] = Listkey }, folder);


                var attach = USR_WSAttachFileToProcess(pathFile, Parameters4505.UserCode, Parameters4505.CompanyId.ToString(), Parameters4505.CaseNumber, "4505");
                if (attach.IsError)
                {
                    attach.ErrorMessage = "No se pudo asociar el archivo al proceso, ya que el archivo TXT no fue encontrado con los datos suministrados, favor verificar si se cargo en la plantilla de manera correcta.";
                    return attach;
                }
                return new ENT_ActionResult() { FileName = attach.FileName, IsError = true, ErrorMessage = "Hubo errores en la validación " };
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultValidation.Result, FileName = resultValidation.FileName };
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idPersons">idPersons</param>
        public static ENT_ActionResult USR_GetPersonByTypePopulation(long adapterId, dynamic idPersons)
        {
            StringBuilder sbPersonByNumber = new StringBuilder();
            sbPersonByNumber.Append(" DECLARE @XmlDocumentHandle int; ");
            sbPersonByNumber.Append(" DECLARE @XmlDocument xml; ");
            sbPersonByNumber.Append(" SET @XmlDocument = '<root><ids> ");
            foreach (var idPerson in idPersons[0])
                sbPersonByNumber.Append($"<id>{idPerson}</id>");
            sbPersonByNumber.Append(" </ids></root> ';");
            sbPersonByNumber.Append("  EXEC sp_xml_preparedocument @XmlDocumentHandle OUTPUT, @XmlDocument; ");
            sbPersonByNumber.Append(" SELECT  DISTINCT IdPerson,IdTypePopulation,IdDocumentType,DocumentNumber  FROM affiliate A  WITH (NOLOCK)  INNER JOIN Person B ON A.IdPerson = B.Id WHERE A.IdPerson IN ( ");
            sbPersonByNumber.Append(" SELECT id FROM OPENXML (@XmlDocumentHandle, '/root/ids/id',1) WITH (id  varchar(40) '.')); ");
            sbPersonByNumber.Append(" EXEC sp_xml_removedocument @XmlDocumentHandle; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sbPersonByNumber.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene persona por tipo y numero de identificación
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idDocumentType">idDocumentType</param>
        /// <param name="documentNumber">documentNumber</param>
        public static ENT_ActionResult USR_GetPersonByTypeAndDocumentNumber(long adapterId, string idDocumentType, string documentNumber)
        {
            var sql = new StringBuilder();
            sql.Append(" SELECT IdDocumentType, DocumentNumber ");
            sql.Append(" FROM Person WITH (NOLOCK)");
            sql.Append($" WHERE IdDocumentType = {idDocumentType} AND DocumentNumber = '{documentNumber}'");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene persona por tipo de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="documentsNumbers">documentsNumbers</param>
        public static ENT_ActionResult USR_GetPersonByDocumentNumber(long adapterId, dynamic documentsNumbers)
        {
            StringBuilder sbPersonByNumber = new StringBuilder();
            sbPersonByNumber.Append(" DECLARE @XmlDocumentHandle int; ");
            sbPersonByNumber.Append(" DECLARE @XmlDocument xml; ");
            sbPersonByNumber.Append(" SET @XmlDocument = '<root><ids> ");
            foreach (var documentNumber in documentsNumbers)
                sbPersonByNumber.Append($"<id>{documentNumber.Identification}</id>");
            sbPersonByNumber.Append(" </ids></root> ';");
            sbPersonByNumber.Append("  EXEC sp_xml_preparedocument @XmlDocumentHandle OUTPUT, @XmlDocument; ");
            sbPersonByNumber.Append(" SELECT  DISTINCT Id,IdDocumentType, DocumentNumber FROM Person WITH (NOLOCK) WHERE DocumentNumber IN( ");
            sbPersonByNumber.Append(" SELECT id FROM OPENXML (@XmlDocumentHandle, '/root/ids/id',1) WITH (id  varchar(15) '.')); ");
            sbPersonByNumber.Append(" EXEC sp_xml_removedocument @XmlDocumentHandle; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sbPersonByNumber.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };

        }
        /// <sumary>
        /// Obtiene detalles de novedad
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="personsNoExist">personsNoExist</param>
        public static ENT_ActionResult USR_GetNoveltyDetail(long adapterId, dynamic personsNoExist)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" DECLARE @x xml; ");
            sql.Append(" SET @x = '<root><ids> ");
            foreach (var documentNumber in personsNoExist)
                sql.Append($"<id>{documentNumber.Identification}</id>");
            sql.Append(" </ids></root> ';");
            sql.Append("  SELECT IdNovelty, OldValue, NewValue  FROM NoveltyDetail WITH (NOLOCK) WHERE OldValue IN(select T.X.value('(text())[1]', 'varchar(15)') as id from @X.nodes('/root/ids/id') as T(X)) AND FieldName='Número de Documento'; ");

            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene novedades por tipo de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="idNovelty">idNovelty</param>
        public static ENT_ActionResult USR_GetNoveltiesTypeDocumentByPerson(long adapterId, string idNovelty)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append($"select * from NoveltyDetail where FieldName = 'ID Tipo Documento' and IdNovelty in (select Id from Novelty where IdAffiliate = (select IdAffiliate from Novelty where Id = '{idNovelty}'))");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene las novedades por afiliado
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        /// <param name="personList">personList</param>
        public static ENT_ActionResult USR_GetNoveltiesAffiliate(long adapterId, dynamic personList)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" DECLARE @x xml; ");
            sql.Append(" SET @x = '<root><ids> ");
            foreach (var documentNumber in personList)
                sql.Append($"<id>{documentNumber.Identification}</id>");
            sql.Append(" </ids></root> ';");

            sql.Append("select NoveltyDetail.IdNovelty, Person.IdDocumentType, Person.DocumentNumber, NoveltyDetail.FieldName, NoveltyDetail.OldValue, NoveltyDetail.NewValue, Novelty.FiscalEffectDate ");
            sql.Append("from NoveltyDetail inner join Novelty on Novelty.Id = NoveltyDetail.IdNovelty inner join Affiliate on Novelty.IdAffiliate = Affiliate.Id inner join Person on Person.Id = Affiliate.IdPerson ");
            sql.Append($"where FieldName = 'ID Tipo Documento' and IdNovelty in (select Id from Novelty where IdAffiliate in (select Id from Affiliate where IdPerson in (select Id from Person where DocumentNumber in (select T.X.value('(text())[1]', 'varchar(15)') as id from @X.nodes('/root/ids/id') as T(X)))))");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Obtiene tipos de documento
        /// </sumary> 
        /// <param name="adapterId">adapterId</param>
        public static ENT_ActionResult USR_GetDocumentTypes(long adapterId)
        {
            var sql = new StringBuilder();
            sql.Append(" SELECT Id, Code ");
            sql.Append(" FROM TypeDetail WITH (NOLOCK)");
            sql.Append(" WHERE IdTypeHead = 1");
            var resultExecute = SYS_WSExecuteQuery(adapterId, sql.ToString());
            if (resultExecute.IsError)
            {
                return resultExecute;
            }
            return new ENT_ActionResult() { IsSuccessful = true, Result = resultExecute.Result };
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="dictionaryResult">dictionaryResult</param>
        /// <param name="folder">folder</param>
        public static string USR_GenericSaveLog4505(dynamic dictionaryResult, string folder)
        {
            try
            {
                string pathName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), folder);

                if (!Directory.Exists(pathName))
                    Directory.CreateDirectory(pathName);

                pathName = Path.Combine(pathName, $"{folder}{DateTime.Now.ToString("yyyyMMddHHmmss")}.csv");

                using (FileStream fs = new FileStream(pathName, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("Fila;Mensaje");
                    foreach (var file in dictionaryResult)
                    {
                        for (int i = 0; i < file.Value.Count; i++)
                        {
                            sw.WriteLine($"{file.Key[i]};{file.Value[i]}");
                        }
                        sw.Flush();
                    }
                }

                return pathName;
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Guarda log de un archivo 
        /// </sumary> 
        /// <param name="dictionaryResult">Dictionary con entidades a escribir en el log</param>
        /// <param name="folder">carpeta donde se va a guardar el archivo</param>
        public static string USR_GenericSaveLog(dynamic dictionaryResult, string folder)
        {
            try
            {

                string pathName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), folder);

                if (!Directory.Exists(pathName))
                    Directory.CreateDirectory(pathName);

                pathName = Path.Combine(pathName, $"{folder}{DateTime.Now.ToString("yyyyMMddHHmmss")}.csv");

                using (FileStream fs = new FileStream(pathName, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
                using (StreamWriter sw = new StreamWriter(fs, Encoding.UTF8))
                {
                    sw.WriteLine("ARCHIVO;MENSAJE");
                    foreach (var file in dictionaryResult)
                    {
                        for (int i = 0; i < file.Value.Count; i++)
                        {
                            sw.WriteLine($"{file.Key};{file.Value[i]}");
                        }
                        sw.Flush();
                    }
                }

                return pathName;
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="remoteFile">Ruta destino de archivo a subir</param>
        /// <param name="localFile">FileStream de archivo a subir</param>
        public static string USR_FtpUpload(string remoteFile, dynamic localFile)
        {
            try
            {
                string ftp = "10.1.0.159";
                string userName = "opheliadcom";
                string password = "wjLNoq5gQp";

                string host = ("ftp://" + ftp);

                if (string.IsNullOrEmpty(ftp) || string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password))
                {
                    throw new ArgumentNullException("ftp,userName,password");
                }
                int bufferSize = 2048;
                /* Create an FTP Request */
                FtpWebRequest ftpRequest = (FtpWebRequest)FtpWebRequest.Create(host + "/" + remoteFile);
                /* Log in to the FTP Server with the User Name and Password Provided */
                ftpRequest.Credentials = new NetworkCredential(userName, password);
                /* When in doubt, use these options */
                ftpRequest.UseBinary = true;
                ftpRequest.UsePassive = true;
                ftpRequest.KeepAlive = true;
                /* Specify the Type of FTP Request */
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile;
                /* Establish Return Communication with the FTP Server */
                Stream ftpStream = ftpRequest.GetRequestStream();
                /* Buffer for the Downloaded Data */
                localFile.Position = 0;
                byte[] byteBuffer = new byte[bufferSize];
                int bytesSent = localFile.Read(byteBuffer, 0, bufferSize);
                /* Upload the File by Sending the Buffered Data Until the Transfer is Complete */
                while (bytesSent != 0)
                {
                    ftpStream.Write(byteBuffer, 0, bytesSent);
                    bytesSent = localFile.Read(byteBuffer, 0, bufferSize);
                }

                /* Resource Cleanup */
                localFile.Close();
                ftpStream.Close();
                using (FtpWebResponse response = (FtpWebResponse)ftpRequest.GetResponse())
                {
                    ftpRequest = null;
                    return response.StatusDescription;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <sumary>
        /// Plantilla de Función vacía
        /// </sumary> 
        /// <param name="listErrors">Variable de parámetro de función vacía</param>
        /// <param name="index">index</param>
        /// <param name="listaQualification">listaQualification</param>
        /// <param name="listOccupationCode">listOccupationCode</param>
        /// <param name="ent">ent</param>
        public static dynamic USR_FieldsValidate4505(List<string> listErrors, long index, List<dynamic> listaQualification, List<dynamic> listOccupationCode, ENT_StructureRes4505En ent)
        {
            //Codigos de habilitacion  => 
            string pipe = "|";

            //Valida codigo de habilitacion campo 2
            if (!(ent.HabilitationCode.Equals("0") || ent.HabilitationCode.Equals("999")))
                if (listaQualification.FirstOrDefault(x => x.QualificationCode == ent.HabilitationCode) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de habilitación en la BD o es invalido variable 2"));

            //Valida codigo HabilitationCodeCytology campo 90
            if (!(ent.HabilitationCodeCytology.Equals("0") || ent.HabilitationCodeCytology.Equals("999")))
                if (listaQualification.FirstOrDefault(x => x.QualificationCode == ent.HabilitationCodeCytology) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de habilitación en la BD o es invalido variable 90"));

            //Valida codigo HabilitationCodeCytology campo 92
            if (!(ent.HabilitationCodeColposcopy.Equals("0") || ent.HabilitationCodeColposcopy.Equals("999")))
                if (listaQualification.FirstOrDefault(x => x.QualificationCode == ent.HabilitationCodeColposcopy) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de habilitación en la BD o es invalido variable 92"));

            //Valida codigo HabilitationCodeCytology campo 95
            if (!(ent.HabilitationCodeBiopsy.Equals("0") || ent.HabilitationCodeBiopsy.Equals("999")))
                if (listaQualification.FirstOrDefault(x => x.QualificationCode == ent.HabilitationCodeBiopsy) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de habilitación en la BD o es invalido variable 95"));

            //Valida codigo HabilitationCodeCytology campo 98
            if (!(ent.HabilitationCodeMammography.Equals("0") || ent.HabilitationCodeMammography.Equals("0")))
                if (listaQualification.FirstOrDefault(x => x.QualificationCode == ent.HabilitationCodeMammography) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de habilitación en la BD o es invalido variable 98"));

            //Valida codigo de Ocupacion
            if (!(ent.OccupationCode.Equals("9999") || ent.OccupationCode.Equals("9998")))
                if (listOccupationCode.FirstOrDefault(x => x.Code == ent.OccupationCode) == null) listErrors.Add(string.Concat($"Fila {index}", $"{pipe}", "No existe el codigo de Ocupacion en la BD o es invalido variable 12"));

            //Valida WeightKg peso variable 30
            if (!(ent.WeightKg.Equals("999")))
            {
                if (Convert.ToDouble(ent.WeightKg.Replace(".", ",")) < 1 || Convert.ToDouble(ent.WeightKg.Replace(".", ",")) > 250)
                {
                    listErrors.Add(string.Concat($"Fila { index}", $"{pipe}", "El rango debe ser un numero decimal de 1 a 249.9"));
                }
            }

            //Valida hemoglobina variable 104
            if (!(ent.ResultHemoglobin.Equals("999")))
            {
                if (Convert.ToDouble(ent.ResultHemoglobin.Replace(".", ",")) < 1.5 || Convert.ToDouble(ent.ResultHemoglobin.Replace(".", ",")) > 20)
                {
                    listErrors.Add(string.Concat($"Fila { index}", $"{pipe}", "El rango debe ser un numero decimal de 1.5  a 20"));
                }
            }

            //Valida hemoglobina variable 107
            if (!(ent.ResultCreatinine.Equals("999")))
            {
                if (Convert.ToDouble(ent.ResultCreatinine.Replace(".", ",")) < 0.2 || Convert.ToDouble(ent.ResultCreatinine.Replace(".", ",")) > 25)
                {
                    listErrors.Add(string.Concat($"Fila { index}", $"{pipe}", "El rango debe ser un numero decimal de 0.2 a 25"));
                }
            }

            //Valida hemoglobina variable 109
            if (!(ent.ResultGlycosylatedHemoglobin.Equals("999")))
            {
                if (Convert.ToDouble(ent.ResultGlycosylatedHemoglobin.Replace(".", ",")) < 5 || Convert.ToDouble(ent.ResultCreatinine.Replace(".", ",")) > 20)
                {
                    listErrors.Add(string.Concat($"Fila { index}", $"{pipe}", "El rango debe ser un numero decimal de 5 a 20"));
                }
            }

            return true;
        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web
        /// </sumary> 
        /// <param name="method">Método del servicio</param>
        /// <param name="url">Url del servicio web</param>
        /// <param name="parameters">Parámetros del método a consumir</param>
        /// <param name="headers">Cabecera del servicio</param>
        /// <param name="fileFullPath">fileFullPath</param>
        /// <param name="minTimeout">Minutos de timeout</param>
        public static ENT_ActionResult SYS_WSRequest(string method, string url, object parameters, dynamic headers, string fileFullPath, double? minTimeout)
        {
            try
            {
                if (string.IsNullOrEmpty(method) || string.IsNullOrEmpty(url))
                {
                    throw new ArgumentNullException("method or url");
                }

                HttpMethod httpMethod = new HttpMethod(method);
                double min = minTimeout != null && minTimeout > 0 ? (double)minTimeout : 3;
                using (HttpClient Client = new HttpClient { Timeout = TimeSpan.FromMinutes(min) })
                {
                    using (var request = new HttpRequestMessage(httpMethod, url))
                    {
                        if (parameters != null)
                        {
                            request.Content = new StringContent(JsonConvert.SerializeObject(parameters), Encoding.UTF8, "application/json");
                        }

                        if (headers != null)
                        {
                            foreach (KeyValuePair<String, String> header in headers)
                            {
                                request.Headers.Add(header.Key, header.Value);
                            }
                        }

                        using (HttpResponseMessage response = Client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead).Result)
                        {
                            using (HttpContent content = response.Content)
                            {
                                string result = content.ReadAsStringAsync().Result;

                                if (response.StatusCode == HttpStatusCode.OK)
                                {
                                    var resultWs = JsonConvert.DeserializeObject<dynamic>(result);
                                    if ((bool)resultWs.IsError)
                                    {
                                        return new ENT_ActionResult() { IsError = true, ErrorMessage = resultWs.ErrorMessage };
                                    }
                                    return new ENT_ActionResult() { IsSuccessful = resultWs.IsSucessfull, Result = resultWs.Result };

                                }

                                else
                                    return new ENT_ActionResult() { IsError = true, ErrorMessage = result };
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.InnerException.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web POST
        /// </sumary> 
        /// <param name="url">Url del Servicio Web</param>
        /// <param name="parameters">Parámetros del servicio</param>
        /// <param name="headers">Cabecera del servicio</param>
        /// <param name="fileFullPath">fileFullPath</param>
        public static ENT_ActionResult SYS_WSPOST(string url, object parameters, dynamic headers, string fileFullPath)
        {
            ENT_ActionResult result = new ENT_ActionResult();
            result = SYS_WSRequest("POST", url, parameters, headers, fileFullPath, null);
            return result;
        }
        /// <sumary>
        /// Función estándar para el consumo de un servicio web GET
        /// </sumary> 
        /// <param name="url">Url del servicio Web</param>
        /// <param name="headers">Cabecera del servicio</param>
        public static ENT_ActionResult SYS_WSGET(string url, dynamic headers)
        {
            ENT_ActionResult result = new ENT_ActionResult();
            result = SYS_WSRequest("GET", url, null, headers, null, null);
            return result;
        }
        /// <sumary>
        /// Ejecuta una consulta Sql con el adaptador
        /// </sumary> 
        /// <param name="adapterId">Id del adaptador</param>
        /// <param name="queryBD">Consulta Sql</param>
        public static ENT_ActionResult SYS_WSExecuteQuery(long adapterId, string queryBD)
        {
            try
            {
                if (string.IsNullOrEmpty(queryBD))
                {
                    throw new ArgumentNullException("queryBD");
                }

                var plainTextBytes = Encoding.UTF8.GetBytes(queryBD);
                var query = Convert.ToBase64String(plainTextBytes);

                ENT_ActionResult result = new ENT_ActionResult();
                string url = "http://10.1.0.159:8080/api/api/Adapter/ExecuteQuery";
                dynamic jsonObject = new JObject();
                jsonObject.adapterId = adapterId;
                jsonObject.queryBD = query;
                result = SYS_WSPOST(url, jsonObject, null, null);
                return result;
            }
            catch (Exception ex)
            {
                return new ENT_ActionResult() { IsError = true, ErrorMessage = ex.Message + ex.StackTrace };
            }
        }
        /// <sumary>
        /// Prototipo de verificación
        /// </sumary> 
        /// <param name="rules">Reglas a evaluar</param>
        public static object SYS_VerificationPrototype(object rules)
        {
            IEnumerable<Func<object>> funcs = ((IEnumerable<Func<object>>)rules);

            string messages = string.Empty;
            bool result = true;
            foreach (Func<object> rul in funcs)
            {
                var r = rul();
                if (!r.GetPropertyValue<bool>("IsValid"))
                {
                    result = false;
                    messages += "* " + r.GetPropertyValue<string>("Message") + "\n\r";
                }
            }

            return new { Result = result, Messages = messages };
        }
        /// <sumary>
        /// Convierte los registros de una archivo a una lista de entidades
        /// </sumary> 
        /// <param name="textFile">Ruta del archivo</param>
        /// <param name="lineSeparator">Separador de lineas en el archivo</param>
        /// <param name="columnSeparator">Separador de columnas en el archivo</param>
        /// <param name="type">Tipo de entidad</param>
        public static dynamic SYS_FileToEntities(string textFile, string lineSeparator, string columnSeparator, object type)
        {
            if (string.IsNullOrEmpty(lineSeparator) || string.IsNullOrEmpty(columnSeparator))
            {
                throw new ArgumentNullException("lineSeparator,columnSeparator");
            }

            if (type == null)
                return new List<dynamic>();

            Type typeEntity = (Type)type;
            Type genericListType = typeof(List<>).MakeGenericType(typeEntity);
            IList lstEntities = (IList)Activator.CreateInstance(genericListType);
            try
            {

                string[] lines = textFile.Split(new string[] { lineSeparator }, StringSplitOptions.RemoveEmptyEntries);
                var properties = typeEntity.GetProperties().OrderBy(p => ((OrderAttribute)p.GetCustomAttributes(typeof(OrderAttribute), false)[0]).Order);
                string[] columns;
                object instance;
                int index = 0;
                foreach (string line in lines)
                {
                    instance = Activator.CreateInstance(typeEntity);

                    columns = line.Split(columnSeparator[0]);

                    index = 0;
                    foreach (var property in properties)
                    {
                        property.SetValue(instance, columns[index]);
                        index++;
                    }
                    lstEntities.Add(instance);

                }

                return lstEntities;
            }
            catch
            {
                throw;
            }
        }

        #region Extention
        /// <sumary>
        /// Obtiene el valor de una propieda de un objecto específico
        /// </sumary>
        public static TResult GetPropertyValue<TResult>(this object obj, string propertyName)
        {
            propertyName = propertyName?.Trim() ?? string.Empty;
            if (obj != null && propertyName != string.Empty)
            {
                var propInfo = obj.GetType().GetProperty(propertyName);
                if (propInfo != null)
                    if (propInfo.PropertyType.IsAssignableFrom(typeof(TResult)))
                        return ((TResult)propInfo.GetValue(obj));
            }

            return default(TResult);
        }
        /// <sumary>
        /// Obtiene el valor de una propieda de un objecto específico
        /// </sumary>
        public static object GetPropertyValue(this object obj, string propertyName)
        {
            propertyName = propertyName?.Trim() ?? string.Empty;
            if (obj != null && propertyName != string.Empty)
            {
                var propInfo = obj.GetType().GetProperty(propertyName);
                if (propInfo != null)
                    return propInfo.GetValue(obj);
            }

            return null;
        }
        #endregion
    }

    /// <summary>
    /// Encapsula el resultado de la petición
    /// </summary>
    /// <typeparam name="T">Tipo del resultado</typeparam>
    public sealed class RuntimeResult<T>
    {
        #region Properties
        /// <summary>
        /// Resultado válido
        /// </summary>
        public bool IsValid { get; private set; }
        /// <summary>
        /// Mensaje de resultado
        /// </summary>
        public string Message { get; private set; }
        /// <summary>
        /// Nombre de archivo
        /// </summary>
        public string FileName { get; private set; }
        /// <summary>
        /// Obtiene el objeto resultado de la petición
        /// </summary>
        public T Result { get; private set; }
        #endregion

        #region Builders
        /// <summary>
        /// Inicializa una nueva instancia de la clase
        /// </summary>
        /// <param name="isSuccessful">Valor que indica si el resultado de la petición fue satisfactorio</param>
        /// <param name="isError">Valor que indica si ocurrió algún error en la ejecución</param>
        /// <param name="errorMessage">Mensaje del error ocurrido</param>
        /// <param name="isValid">Define si el resultado de ejecución es válido</param>
        /// <param name="message">Enumeración de mensajes de validación que no permitieron que el resultado fuera satisfactorio</param>
        /// <param name="result">Objeto resultado de la petición</param>
        /// <param name="fileName">Archivo resultado</param>
        internal RuntimeResult(bool isValid, string message, T result, string fileName = null)
        {
            IsValid = isValid;
            Message = message;
            FileName = fileName;
            Result = result;
        }
        #endregion

        #region Factories
        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado válido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetValid(T result, string message) => new RuntimeResult<T>(true, message, result);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// /// <param name="message">Mensaje resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetValid(Func<T> expression, string message) => SetValid(expression(), message);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <param name="fileName">Archivo resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetInvalid(T result, string message, string fileName = null) => new RuntimeResult<T>(false, message, result, fileName);

        /// <summary>
        /// Crea un resultado de ejecución existoso, con resultado inválido
        /// </summary>
        /// <param name="result">Objeto resultado</param>
        /// <param name="message">Mensaje resultado</param>
        /// <param name="fileName">Archivo resultado</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetInvalid(Func<T> expression, string message, string fileName = null) => SetInvalid(expression(), message, fileName);

        /// <summary>
        /// Crea un resultado de petición con error
        /// </summary>
        /// <param name="errorMessage">Mensaje del error ocurrido</param>
        /// <returns>Resultado de la petición</returns>
        public static RuntimeResult<T> SetError(string errorMessage) => new RuntimeResult<T>(false, errorMessage, default(T));
        #endregion
    }

    #region Entities
    /// <sumary>
    /// Entidad 4505
    /// </sumary>
    public class ENT_StructureRes4505En : EntityBase
    {
        #region Properties
        /// <sumary>
        /// TypeRegister
        /// </sumary>
        private string _TypeRegister;
        [Order]
        [Regex(@"^([2]){1}$", "Variable 0 - Tipo de Registro -  Solo acepta el numero 2.Sin caracteres especiales ni espacios")] public string TypeRegister { get { return _TypeRegister; } set { _TypeRegister = ValidateValue<string>(value, nameof(TypeRegister)); } }
        /// <sumary>
        /// IdRegister
        /// </sumary>
        private string _IdRegister;
        [Order]
        [Regex(@"^([0-9]){1,20}$", "Variable 1 - Consecutivo de Registro -  La longitud valida son 1 a 20 caracteres numericos.Sin caracteres especiales ni espacios")] public string IdRegister { get { return _IdRegister; } set { _IdRegister = ValidateValue<string>(value, nameof(IdRegister)); } }
        /// <sumary>
        /// HabilitationCode
        /// </sumary>
        private string _HabilitationCode;
        [Order]
        [Regex(@"^[0-9]{12}$|^(999)$", "Variable 2 - Codigo de Habilitacion -  Solo acepta el 999 como comodin o el numero de habilitacion de 12 caracteres.Sin caracteres especiales ni espacios")] public string HabilitationCode { get { return _HabilitationCode; } set { _HabilitationCode = ValidateValue<string>(value, nameof(HabilitationCode)); } }
        /// <sumary>
        /// IdentificationType
        /// </sumary>
        private string _IdentificationType;
        [Order]
        [Regex(@"^(TI|CC|CE|PA|RC|UN|NV|MS|AS)$", "Variable 3 - Tipo Identificacion -Solo permite mayusculas longitud de 2 caracteres (TI,CC,CE,PA,RC,UN,NV,MS,AS).Sin caracteres especiales ni espacios")] [Length(2)] public string IdentificationType { get { return _IdentificationType; } set { _IdentificationType = ValidateValue<string>(value, nameof(IdentificationType)); } }
        /// <sumary>
        /// DocumentNumber
        /// </sumary>
        private string _DocumentNumber;
        [Order]
        [Regex(@"^[A-Za-z0-9]{1,18}$", "Variable 4 - NumeroDocumento -  Solo permite longitud de 1 a 18 caracteres.Sin caracteres especiales ni espacios")] [Length(18)] public string DocumentNumber { get { return _DocumentNumber; } set { _DocumentNumber = ValidateValue<string>(value, nameof(DocumentNumber)); } }
        /// <sumary>
        /// FirstLastName
        /// </sumary>
        private string _FirstLastName;
        [Order]
        [Regex(@"^([A-Z]){1,30}$", "Variable 5 - Primer Apellido -  Solo permite letras mayusculas con longitud de 1 a 30 caracteres.Sin caracteres especiales ni espacios")] public string FirstLastName { get { return _FirstLastName; } set { _FirstLastName = ValidateValue<string>(value, nameof(FirstLastName)); } }
        /// <sumary>
        /// SecondLastName
        /// </sumary>
        private string _SecondLastName;
        [Order]
        [Regex(@"^([A-Z]){1,30}$", "Variable 6 - SegundoApellido -Solo permite longitud de 1 a 30 caracteres o la palabra NONE en mayuscula.Sin caracteres especiales ni espacios")] public string SecondLastName { get { return _SecondLastName; } set { _SecondLastName = ValidateValue<string>(value, nameof(SecondLastName)); } }
        /// <sumary>
        /// FirstName
        /// </sumary>
        private string _FirstName;
        [Order]
        [Regex(@"^([A-Z]){1,30}$", "Variable 7 - Primer Nombre -  Solo permite letras mayusculas con longitud de 1 A 30 caracteres.Sin caracteres especiales ni espacios")] public string FirstName { get { return _FirstName; } set { _FirstName = ValidateValue<string>(value, nameof(FirstName)); } }
        /// <sumary>
        /// SecondName
        /// </sumary>
        private string _SecondName;
        [Order]
        [Regex(@"^([A-Z]){1,30}$", "Variable 8 - SegundoNombre -Solo permite longitud de 1 a 30 caracteres o la palabra NONE en mayuscula.Sin caracteres especiales ni espacios")] public string SecondName { get { return _SecondName; } set { _SecondName = ValidateValue<string>(value, nameof(SecondName)); } }
        /// <sumary>
        /// BirthDate
        /// </sumary>
        private string _BirthDate;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 9 - Fecha de Nacimiento -  Solo permite longitud de 10 caracteres AAAA-MM-DD.Sin caracteres especiales ni espacios")] public string BirthDate { get { return _BirthDate; } set { _BirthDate = ValidateValue<string>(value, nameof(BirthDate)); } }
        /// <sumary>
        /// IdSex
        /// </sumary>
        private string _IdSex;
        [Order]
        [Regex(@"^(M|F)$", "Variable 10 - Sexo -  Solo acepta mayuscula con longitud max 1 caracter (M o F) Masculino o Femenino.Sin caracteres especiales ni espacios")] public string IdSex { get { return _IdSex; } set { _IdSex = ValidateValue<string>(value, nameof(IdSex)); } }
        /// <sumary>
        /// CodeEthnic
        /// </sumary>
        private string _CodeEthnic;
        [Order]
        [Regex(@"^[1-6]{1}$", "Variable 11 - Codigo de Pertenencia Etnica -  Solo acepta los valores (1,2,3,4,5,6).Sin caracteres especiales ni espacios")] public string CodeEthnic { get { return _CodeEthnic; } set { _CodeEthnic = ValidateValue<string>(value, nameof(CodeEthnic)); } }
        /// <sumary>
        /// OccupationCode
        /// </sumary>
        private string _OccupationCode;
        [Order]
        [Regex(@"^[0-9]{4}$|^(9999|9998)$", "Variable 12 - Codigo de Ocupacion -  Solo acepta como minimo un numero de 4 digitos.Sin caracteres especiales ni espacios")] public string OccupationCode { get { return _OccupationCode; } set { _OccupationCode = ValidateValue<string>(value, nameof(OccupationCode)); } }
        /// <sumary>
        /// CodeEducaLevel
        /// </sumary>
        private string _CodeEducaLevel;
        [Order]
        [Regex(@"^([1-9]|1[0-3])$", "Variable 13 - Codigo de Nivel Educativo -  Solo acepta los numeros (1,2,3,4,5,6,7,8,9,10,11,12,13).Sin caracteres especiales ni espacios")] public string CodeEducaLevel { get { return _CodeEducaLevel; } set { _CodeEducaLevel = ValidateValue<string>(value, nameof(CodeEducaLevel)); } }
        /// <sumary>
        /// Gestation
        /// </sumary>
        private string _Gestation;
        [Order]
        [Regex(@"^[0-2]{1}$|(21)$", "Variable 14 - Gestacion -  Solo acepta numeros (0,1,2) o (21)Sin caracteres especiales ni espacios")] public string Gestation { get { return _Gestation; } set { _Gestation = ValidateValue<string>(value, nameof(Gestation)); } }
        /// <sumary>
        /// GestaCongeSyphilis
        /// </sumary>
        private string _GestaCongeSyphilis;
        [Order]
        [Regex(@"^[0-3]{1}$|(21)$", "Variable 15 - Sifilis Gestacional Congenita -  Solo acepta numeros (0,1,2,3) o (21).Sin caracteres especiales ni espacios")] public string GestaCongeSyphilis { get { return _GestaCongeSyphilis; } set { _GestaCongeSyphilis = ValidateValue<string>(value, nameof(GestaCongeSyphilis)); } }
        /// <sumary>
        /// HypertenInducPreg
        /// </sumary>
        private string _HypertenInducPreg;
        [Order]
        [Regex(@"^[0-2]{1}$|(21)$", "Variable 16 - Hipertencion Inducida -  Solo acepta numeros (0,1,2) o (21).Sin caracteres especiales ni espacios")] public string HypertenInducPreg { get { return _HypertenInducPreg; } set { _HypertenInducPreg = ValidateValue<string>(value, nameof(HypertenInducPreg)); } }
        /// <sumary>
        /// CongeHypothyroidism
        /// </sumary>
        private string _CongeHypothyroidism;
        [Order]
        [Regex(@"^[0-2]{1}$|(21)$", "Variable 17 - Hipotiroidismo Congenito -  Solo acepta numeros (0,1,2) o (21)).Sin caracteres especiales ni espacios")] public string CongeHypothyroidism { get { return _CongeHypothyroidism; } set { _CongeHypothyroidism = ValidateValue<string>(value, nameof(CongeHypothyroidism)); } }
        /// <sumary>
        /// SymptRespiratory
        /// </sumary>
        private string _SymptRespiratory;
        [Order]
        [Regex(@"^[1-2]{1}$|(21)$", "Variable 18 - Sintomatico Respiratorio -  Solo acepta numeros (1,2) o (21)).Sin caracteres especiales ni espacios")] public string SymptRespiratory { get { return _SymptRespiratory; } set { _SymptRespiratory = ValidateValue<string>(value, nameof(SymptRespiratory)); } }
        /// <sumary>
        /// MultiDrugResisTuber
        /// </sumary>
        private string _MultiDrugResisTuber;
        [Order]
        [Regex(@"^[0-2]{1}$|(21)$", "Variable 19 - Tuberculosis Multidrogo resistente -  Solo acepta numeros (0,1,2) o (21).Sin caracteres especiales ni espacios")] public string MultiDrugResisTuber { get { return _MultiDrugResisTuber; } set { _MultiDrugResisTuber = ValidateValue<string>(value, nameof(MultiDrugResisTuber)); } }
        /// <sumary>
        /// Leprosy
        /// </sumary>
        private string _Leprosy;
        [Order]
        [Regex(@"^[1-3]{1}$|(21)$", "Variable 20 - Lepra -  Solo acepta numeros (1,2,3) o (21).Sin caracteres especiales ni espacios")] public string Leprosy { get { return _Leprosy; } set { _Leprosy = ValidateValue<string>(value, nameof(Leprosy)); } }
        /// <sumary>
        /// ObesCaloProtMalnut
        /// </sumary>
        private string _ObesCaloProtMalnut;
        [Order]
        [Regex(@"^[1-3]{1}$|(21)$", "Variable 21 - Obesidad Proteico Calorica -  Solo acepta numeros (1,2,3) o (21).Sin caracteres especiales ni espacios")] public string ObesCaloProtMalnut { get { return _ObesCaloProtMalnut; } set { _ObesCaloProtMalnut = ValidateValue<string>(value, nameof(ObesCaloProtMalnut)); } }
        /// <sumary>
        /// AbuseVictim
        /// </sumary>
        private string _AbuseVictim;
        [Order]
        [Regex(@"^[0-3]{1}$|(21)$", "Variable 22 - Victima Maltrado -  Solo acepta numeros (0,1,2,3) o (21).Sin caracteres especiales ni espacios")] public string AbuseVictim { get { return _AbuseVictim; } set { _AbuseVictim = ValidateValue<string>(value, nameof(AbuseVictim)); } }
        /// <sumary>
        /// VictimSexViolence
        /// </sumary>
        private string _VictimSexViolence;
        [Order]
        [Regex(@"^[1-2]{1}$|(21)$", "Variable 23 - Victima Violencia Sexual -  Solo acepta numeros (1,2) o (21).Sin caracteres especiales ni espacios")] public string VictimSexViolence { get { return _VictimSexViolence; } set { _VictimSexViolence = ValidateValue<string>(value, nameof(VictimSexViolence)); } }
        /// <sumary>
        /// SexTransInfect
        /// </sumary>
        private string _SexTransInfect;
        [Order]
        [Regex(@"^[1-2]{1}$|(21)$", "Variable 24 - Infeccion de Trasmision Sexual -  Solo acepta numeros (1,2) o (21).Sin caracteres especiales ni espacios")] public string SexTransInfect { get { return _SexTransInfect; } set { _SexTransInfect = ValidateValue<string>(value, nameof(SexTransInfect)); } }
        /// <sumary>
        /// DiagMentalIllness
        /// </sumary>
        private string _DiagMentalIllness;
        [Order]
        [Regex(@"^[1-7]{1}$|(21)$", "Variable 25 - Enfermedad Mental -  Solo acepta los valores (1,2,3,4,5,6,7) o (21).Sin caracteres especiales ni espacios")] public string DiagMentalIllness { get { return _DiagMentalIllness; } set { _DiagMentalIllness = ValidateValue<string>(value, nameof(DiagMentalIllness)); } }
        /// <sumary>
        /// CervixCancer
        /// </sumary>
        private string _CervixCancer;
        [Order]
        [Regex(@"^[0-2]{1}$|(21)$", "Variable 26 - Cancer Cervix -  Solo acepta numeros (0,1,2) o (21).Sin caracteres especiales ni espacios")] public string CervixCancer { get { return _CervixCancer; } set { _CervixCancer = ValidateValue<string>(value, nameof(CervixCancer)); } }
        /// <sumary>
        /// BreastCancer
        /// </sumary>
        private string _BreastCancer;
        [Order]
        [Regex(@"^[1-2]{1}$|(21)$", "Variable 27 - Cancer Seno -  Solo acepta numeros (1,2) o (21).Sin caracteres especiales ni espacios")] public string BreastCancer { get { return _BreastCancer; } set { _BreastCancer = ValidateValue<string>(value, nameof(BreastCancer)); } }
        /// <sumary>
        /// DentalFluorosis
        /// </sumary>
        private string _DentalFluorosis;
        [Order]
        [Regex(@"^[1-2]{1}$|(21)$", "Variable 28 - Fluorosis Dental -  Solo acepta numeros (1,2) o (21).Sin caracteres especiales ni espacios")] public string DentalFluorosis { get { return _DentalFluorosis; } set { _DentalFluorosis = ValidateValue<string>(value, nameof(DentalFluorosis)); } }
        /// <sumary>
        /// DateWeight
        /// </sumary>
        private string _DateWeight;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 29 - Fecha de Peso -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateWeight { get { return _DateWeight; } set { _DateWeight = ValidateValue<string>(value, nameof(DateWeight)); } }
        /// <sumary>
        /// WeightKg
        /// </sumary>
        private string _WeightKg;
        [Order]
        [Regex(@"^(\d+)?([.]?\d{0,1})?$|^(999)", "Variable 30 - PesoKg - Solo acepta un numero con una longitud max 5 carcteres si no se toma ingrese 999. Si es un dato decimal solo acepta punto como separador y un solo valor decimal).Sin caracteres especiales ni espacios")] public string WeightKg { get { return _WeightKg; } set { _WeightKg = ValidateValue<string>(value, nameof(WeightKg)); } }
        /// <sumary>
        /// DateHeight
        /// </sumary>
        private string _DateHeight;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 31 - Fecha de Talla -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateHeight { get { return _DateHeight; } set { _DateHeight = ValidateValue<string>(value, nameof(DateHeight)); } }
        /// <sumary>
        /// HeightCm
        /// </sumary>
        private string _HeightCm;
        [Order]
        [Regex(@"^0*(?:[1-9][0-9]?|100)$|^(00[1-9]|0[1-9][0-9]|1[0-9][0-9]|200)$|^(201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|999)$", "Variable 32 - Talla en Centimetros -  Solo permite longitud de 3 caracteres numerico.Sin caracteres especiales ni espacios")] public string HeightCm { get { return _HeightCm; } set { _HeightCm = ValidateValue<string>(value, nameof(HeightCm)); } }
        /// <sumary>
        /// DateEstimPartitium
        /// </sumary>
        private string _DateEstimPartitium;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 33 - Fecha Probable de Parto -  Solo permite longitud de 10 caracteres AAAA-MM-DD.Sin caracteres especiales ni espacios")] public string DateEstimPartitium { get { return _DateEstimPartitium; } set { _DateEstimPartitium = ValidateValue<string>(value, nameof(DateEstimPartitium)); } }
        /// <sumary>
        /// GestaAgeBorn
        /// </sumary>
        private string _GestaAgeBorn;
        [Order]
        [Regex(@"^([01]?\d|20)$|^([02]?\d|30)$|^([03]?\d|40)$|^(41|42|43|999)$", "Variable 34 - Edad Gestacional -  Se registra el dato de la edad gestacion en semanas con una longitud de 2 caracteres. si no tiene registrar 999.Sin caracteres especiales ni espacios")] public string GestaAgeBorn { get { return _GestaAgeBorn; } set { _GestaAgeBorn = ValidateValue<string>(value, nameof(GestaAgeBorn)); } }
        /// <sumary>
        /// BCG
        /// </sumary>
        private string _BCG;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|19|20|22)$", "Variable 35 - BCG -  Solo acepta los valores (0,1,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string BCG { get { return _BCG; } set { _BCG = ValidateValue<string>(value, nameof(BCG)); } }
        /// <sumary>
        /// HepatBUnderOneYear
        /// </sumary>
        private string _HepatBUnderOneYear;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|19|20|22)$", "Variable 36 - Hepatitis B Menores de 1 A�o -  Solo acepta los valores (0,1,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string HepatBUnderOneYear { get { return _HepatBUnderOneYear; } set { _HepatBUnderOneYear = ValidateValue<string>(value, nameof(HepatBUnderOneYear)); } }
        /// <sumary>
        /// Pentavalent
        /// </sumary>
        private string _Pentavalent;
        [Order]
        [Regex(@"^[0-3]{1}$|^(16|17|18|19|20|22)$", "Variable 37 - Pentavalente -  Solo permite longitud de 1 a 2 caracteres numericos.Sin caracteres especiales ni espacios")] public string Pentavalent { get { return _Pentavalent; } set { _Pentavalent = ValidateValue<string>(value, nameof(Pentavalent)); } }
        /// <sumary>
        /// Polio
        /// </sumary>
        private string _Polio;
        [Order]
        [Regex(@"^[0-5]{1}$|^(16|17|18|19|20|22)$", "Variable 38 - Polio -  Solo acepta los valores (0,1,2,3,4,5,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string Polio { get { return _Polio; } set { _Polio = ValidateValue<string>(value, nameof(Polio)); } }
        /// <sumary>
        /// DPTUnderFiveYears
        /// </sumary>
        private string _DPTUnderFiveYears;
        [Order]
        [Regex(@"^[0]{1}$|^(4|5|16|17|18|19|20|22)$", "Variable 39 - DPT Menores de 5 A�os -  Solo acepta los valores (0,4,5,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string DPTUnderFiveYears { get { return _DPTUnderFiveYears; } set { _DPTUnderFiveYears = ValidateValue<string>(value, nameof(DPTUnderFiveYears)); } }
        /// <sumary>
        /// Rotavirus
        /// </sumary>
        private string _Rotavirus;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 40 - Rotavirus -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string Rotavirus { get { return _Rotavirus; } set { _Rotavirus = ValidateValue<string>(value, nameof(Rotavirus)); } }
        /// <sumary>
        /// Pneumococcus
        /// </sumary>
        private string _Pneumococcus;
        [Order]
        [Regex(@"^[0-3]{1}$|^(16|17|18|19|20|22)$", "Variable 41 - Neumococo -  Solo acepta los valores (0,1,2,3,16,17,18,19,20,22)).Sin caracteres especiales ni espacios")] public string Pneumococcus { get { return _Pneumococcus; } set { _Pneumococcus = ValidateValue<string>(value, nameof(Pneumococcus)); } }
        /// <sumary>
        /// InfluenzaChildren
        /// </sumary>
        private string _InfluenzaChildren;
        [Order]
        [Regex(@"^[0-3]{1}$|^(16|17|18|19|20|22)$", "Variable 42 - Influenza en Ni�os -  Solo acepta los valores (0,1,2,3,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string InfluenzaChildren { get { return _InfluenzaChildren; } set { _InfluenzaChildren = ValidateValue<string>(value, nameof(InfluenzaChildren)); } }
        /// <sumary>
        /// YellowFeverOneY
        /// </sumary>
        private string _YellowFeverOneY;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|19|20|22)$", "Variable 43 - Fiebre Amarilla en Ni�os de 1 A�o -  Solo acepta los valores (0,1,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string YellowFeverOneY { get { return _YellowFeverOneY; } set { _YellowFeverOneY = ValidateValue<string>(value, nameof(YellowFeverOneY)); } }
        /// <sumary>
        /// HepatitisA
        /// </sumary>
        private string _HepatitisA;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|19|20|22)$", "Variable 44 - HepatitisA -  Solo acepta los valores (0,1,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string HepatitisA { get { return _HepatitisA; } set { _HepatitisA = ValidateValue<string>(value, nameof(HepatitisA)); } }
        /// <sumary>
        /// TriViralChild
        /// </sumary>
        private string _TriViralChild;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 45 - Triple Viral Ni�os -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TriViralChild { get { return _TriViralChild; } set { _TriViralChild = ValidateValue<string>(value, nameof(TriViralChild)); } }
        /// <sumary>
        /// VPH
        /// </sumary>
        private string _VPH;
        [Order]
        [Regex(@"^[0-3]{1}$|^(16|17|18|19|20|22)$", "Variable 46 - VPH -  Solo acepta los valores (0,1,2,3,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string VPH { get { return _VPH; } set { _VPH = ValidateValue<string>(value, nameof(VPH)); } }
        /// <sumary>
        /// TDorTTWomFertAge
        /// </sumary>
        private string _TDorTTWomFertAge;
        [Order]
        [Regex(@"^[0-5]{1}$|^(16|17|18|19|20|22)$", "Variable 47 - TD O TT Mujeres Edad Fertil 15 A 49 A�os -  Solo acepta los valores (0,1,2,3,4,5,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TDorTTWomFertAge { get { return _TDorTTWomFertAge; } set { _TDorTTWomFertAge = ValidateValue<string>(value, nameof(TDorTTWomFertAge)); } }
        /// <sumary>
        /// BactPlateCtrl
        /// </sumary>
        private string _BactPlateCtrl;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 48 - Control Placa Bacteriana -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string BactPlateCtrl { get { return _BactPlateCtrl; } set { _BactPlateCtrl = ValidateValue<string>(value, nameof(BactPlateCtrl)); } }
        /// <sumary>
        /// DateAttenPartiCesar
        /// </sumary>
        private string _DateAttenPartiCesar;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 49 - Fecha de Atencion Parto Cesaria -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateAttenPartiCesar { get { return _DateAttenPartiCesar; } set { _DateAttenPartiCesar = ValidateValue<string>(value, nameof(DateAttenPartiCesar)); } }
        /// <sumary>
        /// ExitDateAttenPartiCesar
        /// </sumary>
        private string _ExitDateAttenPartiCesar;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 50 - Salida de Atencion Parto Cesaria -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string ExitDateAttenPartiCesar { get { return _ExitDateAttenPartiCesar; } set { _ExitDateAttenPartiCesar = ValidateValue<string>(value, nameof(ExitDateAttenPartiCesar)); } }
        /// <sumary>
        /// DateBreastfeeding
        /// </sumary>
        private string _DateBreastfeeding;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 51 - Fecha de Consejeria Lactancia M -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateBreastfeeding { get { return _DateBreastfeeding; } set { _DateBreastfeeding = ValidateValue<string>(value, nameof(DateBreastfeeding)); } }
        /// <sumary>
        /// DateNewbornCtrl
        /// </sumary>
        private string _DateNewbornCtrl;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 52 - Control de Recien Nacido -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateNewbornCtrl { get { return _DateNewbornCtrl; } set { _DateNewbornCtrl = ValidateValue<string>(value, nameof(DateNewbornCtrl)); } }
        /// <sumary>
        /// DateFamiPlanFirstTime
        /// </sumary>
        private string _DateFamiPlanFirstTime;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 53 - Planificacion Familiar -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateFamiPlanFirstTime { get { return _DateFamiPlanFirstTime; } set { _DateFamiPlanFirstTime = ValidateValue<string>(value, nameof(DateFamiPlanFirstTime)); } }
        /// <sumary>
        /// SupplyContracMethod
        /// </sumary>
        private string _SupplyContracMethod;
        [Order]
        [Regex(@"^([0-9]|1[0-8]|2[0-1])$", "Variable 54 - Suministro Metodo Anticonceptivo -  Solo acepta numeros (0 a 18 - 20-21).Sin caracteres especiales ni espacios")] public string SupplyContracMethod { get { return _SupplyContracMethod; } set { _SupplyContracMethod = ValidateValue<string>(value, nameof(SupplyContracMethod)); } }
        /// <sumary>
        /// DateContracDelivery
        /// </sumary>
        private string _DateContracDelivery;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 55 - Fecha de Suministro Metodo Anti -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateContracDelivery { get { return _DateContracDelivery; } set { _DateContracDelivery = ValidateValue<string>(value, nameof(DateContracDelivery)); } }
        /// <sumary>
        /// DateFirstTimePrenaCtrl
        /// </sumary>
        private string _DateFirstTimePrenaCtrl;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 56 - Control Prenatal Primera Vez -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateFirstTimePrenaCtrl { get { return _DateFirstTimePrenaCtrl; } set { _DateFirstTimePrenaCtrl = ValidateValue<string>(value, nameof(DateFirstTimePrenaCtrl)); } }
        /// <sumary>
        /// PrenatalCtrl
        /// </sumary>
        private string _PrenatalCtrl;
        [Order]
        [Regex(@"^([01]?\d|20)$|^(21|22|23|24|25)$|^(999)$", "Variable 57 - Control Prenatal -   Solo acepta numero de controles max 2 caracteres o el codigo 999).Sin caracteres especiales ni espacios")] public string PrenatalCtrl { get { return _PrenatalCtrl; } set { _PrenatalCtrl = ValidateValue<string>(value, nameof(PrenatalCtrl)); } }
        /// <sumary>
        /// DateLastPrenatalCtrl
        /// </sumary>
        private string _DateLastPrenatalCtrl;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 58 - Ultimo Control Prenatal -  Solo permite longitud de 10 caracteres (AAAA-MM-DD).Sin caracteres especiales ni espacios")] public string DateLastPrenatalCtrl { get { return _DateLastPrenatalCtrl; } set { _DateLastPrenatalCtrl = ValidateValue<string>(value, nameof(DateLastPrenatalCtrl)); } }
        /// <sumary>
        /// FolicAcidLastPrenaCtrl
        /// </sumary>
        private string _FolicAcidLastPrenaCtrl;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|20|21)$", "Variable 59 - Suministro Acido Folico -  Solo acepta los valores (0,1,16,17,18,20,21).Sin caracteres especiales ni espacios")] public string FolicAcidLastPrenaCtrl { get { return _FolicAcidLastPrenaCtrl; } set { _FolicAcidLastPrenaCtrl = ValidateValue<string>(value, nameof(FolicAcidLastPrenaCtrl)); } }
        /// <sumary>
        /// FerrSulfLastPrenaCtrl
        /// </sumary>
        private string _FerrSulfLastPrenaCtrl;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|20|21)$", "Variable 60 - Suministro de Sulfato Ferroso -  Solo acepta los valores (0,1,16,17,18,19,20,21).Sin caracteres especiales ni espacios")] public string FerrSulfLastPrenaCtrl { get { return _FerrSulfLastPrenaCtrl; } set { _FerrSulfLastPrenaCtrl = ValidateValue<string>(value, nameof(FerrSulfLastPrenaCtrl)); } }
        /// <sumary>
        /// CalciumLastPrenaCtrl
        /// </sumary>
        private string _CalciumLastPrenaCtrl;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|20|21)$", "Variable 61 - Suministro Carbonato de Calcio -  Solo acepta los valores (0,1,16,17,18,19,20,21).Sin caracteres especiales ni espacios")] public string CalciumLastPrenaCtrl { get { return _CalciumLastPrenaCtrl; } set { _CalciumLastPrenaCtrl = ValidateValue<string>(value, nameof(CalciumLastPrenaCtrl)); } }
        /// <sumary>
        /// DateVisualAssessment
        /// </sumary>
        private string _DateVisualAssessment;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 62 - Fecha de Valoracion Agudeza Visual -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateVisualAssessment { get { return _DateVisualAssessment; } set { _DateVisualAssessment = ValidateValue<string>(value, nameof(DateVisualAssessment)); } }
        /// <sumary>
        /// DateConsultOphthalm
        /// </sumary>
        private string _DateConsultOphthalm;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 63 - Fecha de Consulta Oftalmologia -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateConsultOphthalm { get { return _DateConsultOphthalm; } set { _DateConsultOphthalm = ValidateValue<string>(value, nameof(DateConsultOphthalm)); } }
        /// <sumary>
        /// DateDiagMalnutrition
        /// </sumary>
        private string _DateDiagMalnutrition;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 64 - Fecha Diagnostico Desnutricion -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateDiagMalnutrition { get { return _DateDiagMalnutrition; } set { _DateDiagMalnutrition = ValidateValue<string>(value, nameof(DateDiagMalnutrition)); } }
        /// <sumary>
        /// DateConsuVictimAbuse
        /// </sumary>
        private string _DateConsuVictimAbuse;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 65 - Fecha Consulta Mujer Victima Maltrato -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateConsuVictimAbuse { get { return _DateConsuVictimAbuse; } set { _DateConsuVictimAbuse = ValidateValue<string>(value, nameof(DateConsuVictimAbuse)); } }
        /// <sumary>
        /// DateConsuVictSexViolence
        /// </sumary>
        private string _DateConsuVictSexViolence;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 66 - Fecha de Consulta Victima Violencia Sex -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateConsuVictSexViolence { get { return _DateConsuVictSexViolence; } set { _DateConsuVictSexViolence = ValidateValue<string>(value, nameof(DateConsuVictSexViolence)); } }
        /// <sumary>
        /// DateNutritionConsult
        /// </sumary>
        private string _DateNutritionConsult;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 67 - Fecha de Consulta de Nutricion -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateNutritionConsult { get { return _DateNutritionConsult; } set { _DateNutritionConsult = ValidateValue<string>(value, nameof(DateNutritionConsult)); } }
        /// <sumary>
        /// DatePsychologyConsult
        /// </sumary>
        private string _DatePsychologyConsult;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 68 - Fecha de Consulta Psicologia -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DatePsychologyConsult { get { return _DatePsychologyConsult; } set { _DatePsychologyConsult = ValidateValue<string>(value, nameof(DatePsychologyConsult)); } }
        /// <sumary>
        /// DateGrowthDev
        /// </sumary>
        private string _DateGrowthDev;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 69 - Fecha Consulta Crecimiento Desarrollo -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateGrowthDev { get { return _DateGrowthDev; } set { _DateGrowthDev = ValidateValue<string>(value, nameof(DateGrowthDev)); } }
        /// <sumary>
        /// FerrSulfLastConsuUnderTenY
        /// </sumary>
        private string _FerrSulfLastConsuUnderTenY;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|20|21)$", "Variable 70 - Suministro de Sulfato Ferroso Menor 10 A�os -  Solo acepta los valores (0,1,16,17,18,19,20,21).Sin caracteres especiales ni espacios")] public string FerrSulfLastConsuUnderTenY { get { return _FerrSulfLastConsuUnderTenY; } set { _FerrSulfLastConsuUnderTenY = ValidateValue<string>(value, nameof(FerrSulfLastConsuUnderTenY)); } }
        /// <sumary>
        /// VitALastConsuUnderTenY
        /// </sumary>
        private string _VitALastConsuUnderTenY;
        [Order]
        [Regex(@"^[0-1]{1}$|^(16|17|18|20|21)$", "Variable 71 - Suministro de Vitamina A Menor 10 A�os -  Solo acepta los valores (0,1,16,17,18,19,20,21).Sin caracteres especiales ni espacios")] public string VitALastConsuUnderTenY { get { return _VitALastConsuUnderTenY; } set { _VitALastConsuUnderTenY = ValidateValue<string>(value, nameof(VitALastConsuUnderTenY)); } }
        /// <sumary>
        /// DateYoungConsuFirstTime
        /// </sumary>
        private string _DateYoungConsuFirstTime;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 72 - Fecha de Consulta Joven Primera Vez -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateYoungConsuFirstTime { get { return _DateYoungConsuFirstTime; } set { _DateYoungConsuFirstTime = ValidateValue<string>(value, nameof(DateYoungConsuFirstTime)); } }
        /// <sumary>
        /// DateAdultConsuFirstTime
        /// </sumary>
        private string _DateAdultConsuFirstTime;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 73 - Fecha de Consulta Adulto Primera Vez -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateAdultConsuFirstTime { get { return _DateAdultConsuFirstTime; } set { _DateAdultConsuFirstTime = ValidateValue<string>(value, nameof(DateAdultConsuFirstTime)); } }
        /// <sumary>
        /// CondomDelivPatientITS
        /// </sumary>
        private string _CondomDelivPatientITS;
        [Order]
        [Regex(@"^0*(?:[1-9][0-9]?|100)$|^(00[1-9]|0[1-9][0-9]|1[0-4][0-9]|150)$|^(993|994|995|996|997|999|0)$", "Variable 74 - Preservativos Entregados por ITS -  Solo permite longitud de 1 a 3 caracteres numerico).Sin caracteres especiales ni espacios")] public string CondomDelivPatientITS { get { return _CondomDelivPatientITS; } set { _CondomDelivPatientITS = ValidateValue<string>(value, nameof(CondomDelivPatientITS)); } }
        /// <sumary>
        /// DatePreTestElisaVIH
        /// </sumary>
        private string _DatePreTestElisaVIH;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 75 - Asesoria PreTest Elisa VIH -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DatePreTestElisaVIH { get { return _DatePreTestElisaVIH; } set { _DatePreTestElisaVIH = ValidateValue<string>(value, nameof(DatePreTestElisaVIH)); } }
        /// <sumary>
        /// DatePostTestElisaVIH
        /// </sumary>
        private string _DatePostTestElisaVIH;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 76 - Asesoria PosTest Elisa VIH -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DatePostTestElisaVIH { get { return _DatePostTestElisaVIH; } set { _DatePostTestElisaVIH = ValidateValue<string>(value, nameof(DatePostTestElisaVIH)); } }
        /// <sumary>
        /// AttentMentalIllness
        /// </sumary>
        private string _AttentMentalIllness;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 77 - Paciente Diagnostico Ansiedad 6 Meses -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string AttentMentalIllness { get { return _AttentMentalIllness; } set { _AttentMentalIllness = ValidateValue<string>(value, nameof(AttentMentalIllness)); } }
        /// <sumary>
        /// DateHepatitisBPregnant
        /// </sumary>
        private string _DateHepatitisBPregnant;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 78 - Fecha de Antigeno HepatitisB -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateHepatitisBPregnant { get { return _DateHepatitisBPregnant; } set { _DateHepatitisBPregnant = ValidateValue<string>(value, nameof(DateHepatitisBPregnant)); } }
        /// <sumary>
        /// ResultHepatitisBPregnant
        /// </sumary>
        private string _ResultHepatitisBPregnant;
        [Order]
        [Regex(@"^[0-2]{1}$|^(22)$", "Variable 79 - Resultado Antigeno Hepatitis B -  Solo acepta los valores (0,1,2,22).Sin caracteres especiales ni espacios")] public string ResultHepatitisBPregnant { get { return _ResultHepatitisBPregnant; } set { _ResultHepatitisBPregnant = ValidateValue<string>(value, nameof(ResultHepatitisBPregnant)); } }
        /// <sumary>
        /// DateSerologySyphilis
        /// </sumary>
        private string _DateSerologySyphilis;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 80 - FechaSerologiaSifilis -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateSerologySyphilis { get { return _DateSerologySyphilis; } set { _DateSerologySyphilis = ValidateValue<string>(value, nameof(DateSerologySyphilis)); } }
        /// <sumary>
        /// ResultSerologySyphilis
        /// </sumary>
        private string _ResultSerologySyphilis;
        [Order]
        [Regex(@"^[0-2]{1}$|^(22)$", "Variable 81 - Resultado Serologia Sifilis -  Solo acepta los valores (0,1,2,22).Sin caracteres especiales ni espacios")] public string ResultSerologySyphilis { get { return _ResultSerologySyphilis; } set { _ResultSerologySyphilis = ValidateValue<string>(value, nameof(ResultSerologySyphilis)); } }
        /// <sumary>
        /// DateElisaTakingVIH
        /// </sumary>
        private string _DateElisaTakingVIH;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 82 - FechaTomaElisaVIH -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateElisaTakingVIH { get { return _DateElisaTakingVIH; } set { _DateElisaTakingVIH = ValidateValue<string>(value, nameof(DateElisaTakingVIH)); } }
        /// <sumary>
        /// ResultElisaVIH
        /// </sumary>
        private string _ResultElisaVIH;
        [Order]
        [Regex(@"^[0-2]{1}$|^(22)$", "Variable 83 - Resultado Elisa VIH -  Solo acepta los valores (0,1,2,22).Sin caracteres especiales ni espacios")] public string ResultElisaVIH { get { return _ResultElisaVIH; } set { _ResultElisaVIH = ValidateValue<string>(value, nameof(ResultElisaVIH)); } }
        /// <sumary>
        /// DateNeonatalTSH
        /// </sumary>
        private string _DateNeonatalTSH;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 84 - Fecha TSH Neonatal -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateNeonatalTSH { get { return _DateNeonatalTSH; } set { _DateNeonatalTSH = ValidateValue<string>(value, nameof(DateNeonatalTSH)); } }
        /// <sumary>
        /// ResultNeonatalTSH
        /// </sumary>
        private string _ResultNeonatalTSH;
        [Order]
        [Regex(@"^[0-2]{1}$|^(22)$", "Variable 85 - Resultado TSH Neonatal -  Solo acepta los valores (0,1,2,22).Sin caracteres especiales ni espacios")] public string ResultNeonatalTSH { get { return _ResultNeonatalTSH; } set { _ResultNeonatalTSH = ValidateValue<string>(value, nameof(ResultNeonatalTSH)); } }
        /// <sumary>
        /// CervicalCancerScreening
        /// </sumary>
        private string _CervicalCancerScreening;
        [Order]
        [Regex(@"^[0-3]{1}$|^(16|17|18|19|20|22)$", "Variable 86 - Tamizaje Cancer Cuello Uterino -  Solo acepta los valores (0,1,2,3,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string CervicalCancerScreening { get { return _CervicalCancerScreening; } set { _CervicalCancerScreening = ValidateValue<string>(value, nameof(CervicalCancerScreening)); } }
        /// <sumary>
        /// DateCervicalCytology
        /// </sumary>
        private string _DateCervicalCytology;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 87 - Fecha de Citologia Cervico Uterina -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateCervicalCytology { get { return _DateCervicalCytology; } set { _DateCervicalCytology = ValidateValue<string>(value, nameof(DateCervicalCytology)); } }
        /// <sumary>
        /// ResultCervicalCytology
        /// </sumary>
        private string _ResultCervicalCytology;
        [Order]
        [Regex(@"^[0-9]{1}$|^(10|11|12|13|14|15|16|17|18|999)$", "Variable 88 - CitologiaCervicoUterina -  Solo acepta los valores (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) o (999).Sin caracteres especiales ni espacios")] public string ResultCervicalCytology { get { return _ResultCervicalCytology; } set { _ResultCervicalCytology = ValidateValue<string>(value, nameof(ResultCervicalCytology)); } }
        /// <sumary>
        /// QualityCytologySample
        /// </sumary>
        private string _QualityCytologySample;
        [Order]
        [Regex(@"^[0-4]{1}$|^(999)$", "Variable 89 - Calidad Muestra Citologia -  Solo acepta los valores (0,1,2,3,4,999).Sin caracteres especiales ni espacios")] public string QualityCytologySample { get { return _QualityCytologySample; } set { _QualityCytologySample = ValidateValue<string>(value, nameof(QualityCytologySample)); } }
        /// <sumary>
        /// HabilitationCodeCytology
        /// </sumary>
        private string _HabilitationCodeCytology;
        [Order]
        [Regex(@"^[0-9]{12}$|^(0|999)$", "Variable 90 - Codigo de Habilitacion IPS Citologia -  Solo permite longitud de  12 caracteres numerico).Sin caracteres especiales ni espacios")] public string HabilitationCodeCytology { get { return _HabilitationCodeCytology; } set { _HabilitationCodeCytology = ValidateValue<string>(value, nameof(HabilitationCodeCytology)); } }
        /// <sumary>
        /// DateColposcopy
        /// </sumary>
        private string _DateColposcopy;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 91 - Fecha de Colposcopia -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateColposcopy { get { return _DateColposcopy; } set { _DateColposcopy = ValidateValue<string>(value, nameof(DateColposcopy)); } }
        /// <sumary>
        /// HabilitationCodeColposcopy
        /// </sumary>
        private string _HabilitationCodeColposcopy;
        [Order]
        [Regex(@"^[0-9]{12}$|^(0|999)$", "Variable 92 - Codigo de Habilitacion Colposcopia -  Solo permite longitud de 12 caracteres numerico).Sin caracteres especiales ni espacios")] public string HabilitationCodeColposcopy { get { return _HabilitationCodeColposcopy; } set { _HabilitationCodeColposcopy = ValidateValue<string>(value, nameof(HabilitationCodeColposcopy)); } }
        /// <sumary>
        /// DateCervicalBiopsy
        /// </sumary>
        private string _DateCervicalBiopsy;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 93 - Fecha Biopsia Cervical -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateCervicalBiopsy { get { return _DateCervicalBiopsy; } set { _DateCervicalBiopsy = ValidateValue<string>(value, nameof(DateCervicalBiopsy)); } }
        /// <sumary>
        /// ResultCervicalBiopsy
        /// </sumary>
        private string _ResultCervicalBiopsy;
        [Order]
        [Regex(@"^[0-6]{1}$|^(999)$", "Variable 94 - Resultado Biopsia Cervical -  Solo acepta los valores (0,1,2,3,4,5,6) O 999.Sin caracteres especiales ni espacios")] public string ResultCervicalBiopsy { get { return _ResultCervicalBiopsy; } set { _ResultCervicalBiopsy = ValidateValue<string>(value, nameof(ResultCervicalBiopsy)); } }
        /// <sumary>
        /// HabilitationCodeBiopsy
        /// </sumary>
        private string _HabilitationCodeBiopsy;
        [Order]
        [Regex(@"^[0-9]{12}$|^(0|999)$", "Variable 95 - Codigo de Habilitacion IPS Biopsia -  Solo permite longitud de  12 caracteres numerico).Sin caracteres especiales ni espacios")] public string HabilitationCodeBiopsy { get { return _HabilitationCodeBiopsy; } set { _HabilitationCodeBiopsy = ValidateValue<string>(value, nameof(HabilitationCodeBiopsy)); } }
        /// <sumary>
        /// DateMammography
        /// </sumary>
        private string _DateMammography;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 96 - Fecha de Mamografia -  Solo permite longitud de 10 caracteres AAAA-MM-DD ).Sin caracteres especiales ni espacios")] public string DateMammography { get { return _DateMammography; } set { _DateMammography = ValidateValue<string>(value, nameof(DateMammography)); } }
        /// <sumary>
        /// ResultMammography
        /// </sumary>
        private string _ResultMammography;
        [Order]
        [Regex(@"^[0-7]{1}$|^(999)$", "Variable 97 - Resultado Mamografia -  Solo acepta (0,1,2,3,4,5,6,7) codigo 999.Sin caracteres especiales ni espacios")] public string ResultMammography { get { return _ResultMammography; } set { _ResultMammography = ValidateValue<string>(value, nameof(ResultMammography)); } }
        /// <sumary>
        /// HabilitationCodeMammography
        /// </sumary>
        private string _HabilitationCodeMammography;
        [Order]
        [Regex(@"^[0-9]{12}$|^(0|999)$", "Variable 98 - Codigo Habilitacion IPS Mamografia -  Solo acepta el codigo REPS de 12 caracteres o el codigo 999.Sin caracteres especiales ni espacios")] public string HabilitationCodeMammography { get { return _HabilitationCodeMammography; } set { _HabilitationCodeMammography = ValidateValue<string>(value, nameof(HabilitationCodeMammography)); } }
        /// <sumary>
        /// DateBreastBiopsyBACAF
        /// </sumary>
        private string _DateBreastBiopsyBACAF;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 99 - Fecha de Toma Biopsia Seno BACAF -  Solo acepta fecha valida con formato AAAA-MM-DD.si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateBreastBiopsyBACAF { get { return _DateBreastBiopsyBACAF; } set { _DateBreastBiopsyBACAF = ValidateValue<string>(value, nameof(DateBreastBiopsyBACAF)); } }
        /// <sumary>
        /// DateResultBreastBiopsy
        /// </sumary>
        private string _DateResultBreastBiopsy;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 100 - Fecha de Resultado Biopsia Seno BACAF -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateResultBreastBiopsy { get { return _DateResultBreastBiopsy; } set { _DateResultBreastBiopsy = ValidateValue<string>(value, nameof(DateResultBreastBiopsy)); } }
        /// <sumary>
        /// ResultBiopsyBreast
        /// </sumary>
        private string _ResultBiopsyBreast;
        [Order]
        [Regex(@"^[0-5]{1}$|^(999)$", "Variable 101 - BiopsiaSenoBACAF -  Solo acepta (0,1,2,3,4,5) codigo 999.Sin caracteres especiales ni espacios")] public string ResultBiopsyBreast { get { return _ResultBiopsyBreast; } set { _ResultBiopsyBreast = ValidateValue<string>(value, nameof(ResultBiopsyBreast)); } }
        /// <sumary>
        /// HabiliationCodeBiopsyBreast
        /// </sumary>
        private string _HabiliationCodeBiopsyBreast;
        [Order]
        [Regex(@"^[0-9]{12}$|^(0|999)$", "Variable 102 - CodigoHabilitacionIPSSenoBACAF -  Solo acepta el codigo REPS de 12 digitos o el codigo 999.Sin caracteres especiales ni espacios")] public string HabiliationCodeBiopsyBreast { get { return _HabiliationCodeBiopsyBreast; } set { _HabiliationCodeBiopsyBreast = ValidateValue<string>(value, nameof(HabiliationCodeBiopsyBreast)); } }
        /// <sumary>
        /// DateHemoglobin
        /// </sumary>
        private string _DateHemoglobin;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 103 - Fecha de Toma Hemoglobina -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateHemoglobin { get { return _DateHemoglobin; } set { _DateHemoglobin = ValidateValue<string>(value, nameof(DateHemoglobin)); } }
        /// <sumary>
        /// ResultHemoglobin
        /// </sumary>
        private string _ResultHemoglobin;
        [Order]
        [Regex(@"^(\d+)?([.]?\d{0,1})?$|^(999)", "Variable 104 - Hemoglobina -  Solo acepta dato reportado por el laboratorio (decimal delimitado por punto(.) si no reporta ingrese el numero (0).Sin caracteres especiales ni espacios")] public string ResultHemoglobin { get { return _ResultHemoglobin; } set { _ResultHemoglobin = ValidateValue<string>(value, nameof(ResultHemoglobin)); } }
        /// <sumary>
        /// DateGlycemia
        /// </sumary>
        private string _DateGlycemia;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 105 - Fecha de Toma Glicemia Basal -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateGlycemia { get { return _DateGlycemia; } set { _DateGlycemia = ValidateValue<string>(value, nameof(DateGlycemia)); } }
        /// <sumary>
        /// DateCreatinine
        /// </sumary>
        private string _DateCreatinine;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 106 - Fecha de Creatinina -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateCreatinine { get { return _DateCreatinine; } set { _DateCreatinine = ValidateValue<string>(value, nameof(DateCreatinine)); } }
        /// <sumary>
        /// ResultCreatinine
        /// </sumary>
        private string _ResultCreatinine;
        [Order]
        [Regex(@"^(\d+)?([.]?\d{0,1})?$|(0|999)$", "Variable 107 - Creatinina -  Solo acepta dato reportado por el laboratorio (decimal delimitado por punto(.)) si no tiene el dato registrar (999) si no aplica registrar (0).Sin caracteres especiales ni espacios")] public string ResultCreatinine { get { return _ResultCreatinine; } set { _ResultCreatinine = ValidateValue<string>(value, nameof(ResultCreatinine)); } }
        /// <sumary>
        /// DateGlycosylatedHemoglobin
        /// </sumary>
        private string _DateGlycosylatedHemoglobin;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 108 - Fecha de Hemoglobina Glicosilada -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateGlycosylatedHemoglobin { get { return _DateGlycosylatedHemoglobin; } set { _DateGlycosylatedHemoglobin = ValidateValue<string>(value, nameof(DateGlycosylatedHemoglobin)); } }
        /// <sumary>
        /// ResultGlycosylatedHemoglobin
        /// </sumary>
        private string _ResultGlycosylatedHemoglobin;
        [Order]
        [Regex(@"^(\d+)?([.]?\d{0,1})?$|^(999)", "Variable 109 - Resultado Hemoglobina -  Solo acepta dato reportado por el laboratorio (decimal delimitado por punto(.)) si no reporta ingrese el numero (0) cero o 999.Sin caracteres especiales ni espacios")] public string ResultGlycosylatedHemoglobin { get { return _ResultGlycosylatedHemoglobin; } set { _ResultGlycosylatedHemoglobin = ValidateValue<string>(value, nameof(ResultGlycosylatedHemoglobin)); } }
        /// <sumary>
        /// DateMicroalbuminuria
        /// </sumary>
        private string _DateMicroalbuminuria;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 110 - Fecha de Toma Microalbuminuria -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateMicroalbuminuria { get { return _DateMicroalbuminuria; } set { _DateMicroalbuminuria = ValidateValue<string>(value, nameof(DateMicroalbuminuria)); } }
        /// <sumary>
        /// DateHDL
        /// </sumary>
        private string _DateHDL;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 111 - Fecha de Toma HDL -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateHDL { get { return _DateHDL; } set { _DateHDL = ValidateValue<string>(value, nameof(DateHDL)); } }
        /// <sumary>
        /// DateBacilloscopy
        /// </sumary>
        private string _DateBacilloscopy;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 112 - Fecha de Toma Baciloscopia -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string DateBacilloscopy { get { return _DateBacilloscopy; } set { _DateBacilloscopy = ValidateValue<string>(value, nameof(DateBacilloscopy)); } }
        /// <sumary>
        /// ResultBacilloscopy
        /// </sumary>
        private string _ResultBacilloscopy;
        [Order]
        [Regex(@"^[1-4]{1}$|^(22)$", "Variable 113 - Baciloscopia Diagnostico -  Solo acepta los valores (1,2,3,4,22).Sin caracteres especiales ni espacios")] public string ResultBacilloscopy { get { return _ResultBacilloscopy; } set { _ResultBacilloscopy = ValidateValue<string>(value, nameof(ResultBacilloscopy)); } }
        /// <sumary>
        /// TreatmentCongenitalHypothyroidism
        /// </sumary>
        private string _TreatmentCongenitalHypothyroidism;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 114 - TratamientoHipotiroidismoCongenito -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TreatmentCongenitalHypothyroidism { get { return _TreatmentCongenitalHypothyroidism; } set { _TreatmentCongenitalHypothyroidism = ValidateValue<string>(value, nameof(TreatmentCongenitalHypothyroidism)); } }
        /// <sumary>
        /// TreatmentGestationalSyphilis
        /// </sumary>
        private string _TreatmentGestationalSyphilis;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 115 - TratamientoSifilisGestacional -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TreatmentGestationalSyphilis { get { return _TreatmentGestationalSyphilis; } set { _TreatmentGestationalSyphilis = ValidateValue<string>(value, nameof(TreatmentGestationalSyphilis)); } }
        /// <sumary>
        /// TreatmentCongenitalSyphilis
        /// </sumary>
        private string _TreatmentCongenitalSyphilis;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 116 - TratamientoSifilisCongenita -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TreatmentCongenitalSyphilis { get { return _TreatmentCongenitalSyphilis; } set { _TreatmentCongenitalSyphilis = ValidateValue<string>(value, nameof(TreatmentCongenitalSyphilis)); } }
        /// <sumary>
        /// TreatmentLeprosy
        /// </sumary>
        private string _TreatmentLeprosy;
        [Order]
        [Regex(@"^[0-2]{1}$|^(16|17|18|19|20|22)$", "Variable 117 - Tratamiento de Lepra -  Solo acepta los valores (0,1,2,16,17,18,19,20,22).Sin caracteres especiales ni espacios")] public string TreatmentLeprosy { get { return _TreatmentLeprosy; } set { _TreatmentLeprosy = ValidateValue<string>(value, nameof(TreatmentLeprosy)); } }
        /// <sumary>
        /// EndDateTreatmentLeishmaniasis
        /// </sumary>
        private string _EndDateTreatmentLeishmaniasis;
        [Order]
        [Regex(@"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$", "Variable 118 - Fecha de Terminacion Leishmaniasis -  Solo acepta fecha valida con formato AAAA-MM-DD si no se toma registrar 1800-01-01.Sin caracteres especiales ni espacios")] public string EndDateTreatmentLeishmaniasis { get { return _EndDateTreatmentLeishmaniasis; } set { _EndDateTreatmentLeishmaniasis = ValidateValue<string>(value, nameof(EndDateTreatmentLeishmaniasis)); } }
        #endregion

        #region Builders
        public ENT_StructureRes4505En() : base(null) { ExtrictValidation = false; }
        public ENT_StructureRes4505En(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// EntidadResolucion4505
    /// </sumary>
    public class ENT_Person4505 : EntityBase
    {
        #region Properties
        /// <sumary>
        /// IdPerson
        /// </sumary>
        private string _IdPerson;
        [Order]
        public string IdPerson { get { return _IdPerson; } set { _IdPerson = ValidateValue<string>(value, nameof(IdPerson)); } }
        /// <sumary>
        /// IdTypePopulation
        /// </sumary>
        private string _IdTypePopulation;
        [Order]
        public string IdTypePopulation { get { return _IdTypePopulation; } set { _IdTypePopulation = ValidateValue<string>(value, nameof(IdTypePopulation)); } }
        /// <sumary>
        /// IdDocumentType
        /// </sumary>
        private string _IdDocumentType;
        [Order]
        public string IdDocumentType { get { return _IdDocumentType; } set { _IdDocumentType = ValidateValue<string>(value, nameof(IdDocumentType)); } }
        /// <sumary>
        /// DocumentNumber
        /// </sumary>
        private string _DocumentNumber;
        [Order]
        public string DocumentNumber { get { return _DocumentNumber; } set { _DocumentNumber = ValidateValue<string>(value, nameof(DocumentNumber)); } }
        #endregion

        #region Builders
        public ENT_Person4505() : base(null) { ExtrictValidation = false; }
        public ENT_Person4505(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// Entidad recibe parametros 4505
    /// </sumary>
    public class ENT_parameters4505 : EntityBase
    {
        #region Properties
        /// <sumary>
        /// CompanyId
        /// </sumary>
        private long _CompanyId;
        [Order]
        public long CompanyId { get { return _CompanyId; } set { _CompanyId = ValidateValue<long>(value, nameof(CompanyId)); } }
        /// <sumary>
        /// Type
        /// </sumary>
        private string _Type;
        [Order]
        public string Type { get { return _Type; } set { _Type = ValidateValue<string>(value, nameof(Type)); } }
        /// <sumary>
        /// Version
        /// </sumary>
        private long _Version;
        [Order]
        public long Version { get { return _Version; } set { _Version = ValidateValue<long>(value, nameof(Version)); } }
        /// <sumary>
        /// OperatorId
        /// </sumary>
        private long _OperatorId;
        [Order]
        public long OperatorId { get { return _OperatorId; } set { _OperatorId = ValidateValue<long>(value, nameof(OperatorId)); } }
        /// <sumary>
        /// LibraryId
        /// </sumary>
        private long _LibraryId;
        [Order]
        public long LibraryId { get { return _LibraryId; } set { _LibraryId = ValidateValue<long>(value, nameof(LibraryId)); } }
        /// <sumary>
        /// TemplateId
        /// </sumary>
        private long _TemplateId;
        [Order]
        public long TemplateId { get { return _TemplateId; } set { _TemplateId = ValidateValue<long>(value, nameof(TemplateId)); } }
        /// <sumary>
        /// FrmCodi
        /// </sumary>
        private string _FrmCodi;
        [Order]
        public string FrmCodi { get { return _FrmCodi; } set { _FrmCodi = ValidateValue<string>(value, nameof(FrmCodi)); } }
        /// <sumary>
        /// CaseNumber
        /// </sumary>
        private string _CaseNumber;
        [Order]
        public string CaseNumber { get { return _CaseNumber; } set { _CaseNumber = ValidateValue<string>(value, nameof(CaseNumber)); } }
        /// <sumary>
        /// Period
        /// </sumary>
        private long _Period;
        [Order]
        public long Period { get { return _Period; } set { _Period = ValidateValue<long>(value, nameof(Period)); } }
        /// <sumary>
        /// Year
        /// </sumary>
        private long _Year;
        [Order]
        public long Year { get { return _Year; } set { _Year = ValidateValue<long>(value, nameof(Year)); } }
        /// <sumary>
        /// UserCode
        /// </sumary>
        private string _UserCode;
        [Order]
        public string UserCode { get { return _UserCode; } set { _UserCode = ValidateValue<string>(value, nameof(UserCode)); } }
        /// <sumary>
        /// FileId
        /// </sumary>
        private string _FileId;
        [Order]
        public string FileId { get { return _FileId; } set { _FileId = ValidateValue<string>(value, nameof(FileId)); } }
        /// <sumary>
        /// FileHeadRuleId
        /// </sumary>
        private long _FileHeadRuleId;
        [Order]
        public long FileHeadRuleId { get { return _FileHeadRuleId; } set { _FileHeadRuleId = ValidateValue<long>(value, nameof(FileHeadRuleId)); } }
        /// <sumary>
        /// FileDetailRuleId
        /// </sumary>
        private long _FileDetailRuleId;
        [Order]
        public long FileDetailRuleId { get { return _FileDetailRuleId; } set { _FileDetailRuleId = ValidateValue<long>(value, nameof(FileDetailRuleId)); } }
        /// <sumary>
        /// IdTypePopulation
        /// </sumary>
        private long _IdTypePopulation;
        [Order]
        public long IdTypePopulation { get { return _IdTypePopulation; } set { _IdTypePopulation = ValidateValue<long>(value, nameof(IdTypePopulation)); } }
        /// <sumary>
        /// VersionBRM
        /// </sumary>
        private long _VersionBRM;
        [Order]
        public long VersionBRM { get { return _VersionBRM; } set { _VersionBRM = ValidateValue<long>(value, nameof(VersionBRM)); } }
        /// <sumary>
        /// CodeRuleHead
        /// </sumary>
        private string _CodeRuleHead;
        [Order]
        public string CodeRuleHead { get { return _CodeRuleHead; } set { _CodeRuleHead = ValidateValue<string>(value, nameof(CodeRuleHead)); } }
        /// <sumary>
        /// CodeRuleDetail
        /// </sumary>
        private string _CodeRuleDetail;
        [Order]
        public string CodeRuleDetail { get { return _CodeRuleDetail; } set { _CodeRuleDetail = ValidateValue<string>(value, nameof(CodeRuleDetail)); } }
        #endregion

        #region Builders
        public ENT_parameters4505() : base(null) { ExtrictValidation = false; }
        public ENT_parameters4505(object obj) : base(obj) { ExtrictValidation = false; }
        #endregion

        #region Body

        #endregion
    }
    /// <sumary>
    /// Encapsula los datos de respuesta de la ejecución de un servicio web
    /// </sumary>
    public class ENT_ActionResult : EntityBase
    {
        #region Properties
        /// <sumary>
        /// IsSuccessful
        /// </sumary>
        private bool _IsSuccessful;
        [Order]
        public bool IsSuccessful { get { return _IsSuccessful; } set { _IsSuccessful = ValidateValue<bool>(value, nameof(IsSuccessful)); } }
        /// <sumary>
        /// IsError
        /// </sumary>
        private bool _IsError;
        [Order]
        public bool IsError { get { return _IsError; } set { _IsError = ValidateValue<bool>(value, nameof(IsError)); } }
        /// <sumary>
        /// ErrorMessage
        /// </sumary>
        private string _ErrorMessage;
        [Order]
        public string ErrorMessage { get { return _ErrorMessage; } set { _ErrorMessage = ValidateValue<string>(value, nameof(ErrorMessage)); } }
        /// <sumary>
        /// Messages
        /// </sumary>
        private List<string> _Messages;
        [Order]
        public List<string> Messages { get { return _Messages; } set { _Messages = ValidateValue<List<string>>(value, nameof(Messages)); } }
        /// <sumary>
        /// Result
        /// </sumary>
        private object _Result;
        [Order]
        public object Result { get { return _Result; } set { _Result = ValidateValue<object>(value, nameof(Result)); } }
        /// <sumary>
        /// IsSucessfull
        /// </sumary>
        private bool _IsSucessfull;
        [Order]
        public bool IsSucessfull { get { return _IsSucessfull; } set { _IsSucessfull = ValidateValue<bool>(value, nameof(IsSucessfull)); } }
        /// <sumary>
        /// FileName
        /// </sumary>
        private string _FileName;
        [Order]
        public string FileName { get { return _FileName; } set { _FileName = ValidateValue<string>(value, nameof(FileName)); } }
        #endregion

        #region Builders
        public ENT_ActionResult() : base(null) { ExtrictValidation = true; }
        public ENT_ActionResult(object obj) : base(obj) { ExtrictValidation = true; }
        #endregion

        #region Body

        #endregion
    }
    #endregion

    #region Base
    public class EntityBase
    {
        public bool ExtrictValidation;
        public List<string> ValidationErrorsList = new List<string>();
        public EntityBase(object obj)
        {
            if (obj == null) return;

            try
            {
                var properties = this.GetType().GetProperties();
                for (int i = 0; i < properties.Length; i++)
                {
                    bool vlid = true;
                    switch (GetDataType(properties[i].PropertyType.Name, properties[i].PropertyType.FullName, out bool isNulleable))
                    {
                        case "Boolean":
                            vlid = bool.TryParse((obj as dynamic)[properties[i].Name].ToString(), out bool vb);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vb);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int16":
                            vlid = short.TryParse((obj as dynamic)[properties[i].Name].ToString(), out short vs);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vs);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int32":
                            vlid = int.TryParse((obj as dynamic)[properties[i].Name].ToString(), out int vi);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vi);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Int64":
                            vlid = long.TryParse((obj as dynamic)[properties[i].Name].ToString(), out long vl);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vl);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "Double":
                            vlid = double.TryParse((obj as dynamic)[properties[i].Name].ToString(), out double vd);
                            if (vlid) properties[i].SetValue(this, vd);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "DateTime":
                            vlid = DateTime.TryParse((obj as dynamic)[properties[i].Name].ToString(), out DateTime vt);
                            if (vlid || (isNulleable && (obj as dynamic)[properties[i].Name] == null)) properties[i].SetValue(this, vt);
                            else if (isNulleable && (obj as dynamic)[properties[i].Name] == null) { properties[i].SetValue(this, null); }
                            break;
                        case "String":
                            properties[i].SetValue(this, ((obj as dynamic)[properties[i].Name] as JValue)?.ToObject(properties[i].PropertyType));
                            break;
                        case "IEnumerable":
                            properties[i].SetValue(this, ((obj as dynamic)[properties[i].Name] as JArray)?.ToObject(properties[i].PropertyType));
                            break;
                        default:
                            properties[i].SetValue(this, Activator.CreateInstance(properties[i].PropertyType, new object[] { (obj as dynamic)[properties[i].Name] }));
                            break;
                    }

                    if (!vlid)
                        ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no es válido.", properties[i].Name));
                }
            }
            catch (Exception ex) { throw ex; }

            if (ExtrictValidation && ValidationErrorsList.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, ValidationErrorsList));
        }

        /// <summary>
        /// Define el tipo de dato usado por la propiedad
        /// </summary>
        /// <param name="name">Nombre de la propiedad</param>
        /// <param name="fullName">Nombre completo de la propiedad</param>
        /// <param name="isNulleable">salida que define si es poosible ser nula la propiedad</param>
        /// <returns>Nombre del listado</returns>
        private string GetDataType(string name, string fullName, out bool isNulleable)
        {
            isNulleable = false;

            if (name.Contains("Nullable"))
            {
                isNulleable = true;
                name = Regex.Match(fullName, "Int16|Int32|Int64|Double|DateTime|String").ToString();
            }
            else if (name.Contains("List") || name.Contains("IEnumerable") || name.Contains("ICollection") || name.Contains("IList"))
            {
                name = "IEnumerable";
            }

            return name;
        }

        /// <summary>
        /// Valida los valores de un Listado de tipo T
        /// </summary>
        /// <typeparam name="T">Tipo de objeto</typeparam>
        /// <param name="value">valor asignable al objeto</param>
        /// <param name="propName">nombre</param>
        /// <returns>Listado de valores</returns>
        public IEnumerable<T> ValidateValue<T>(IEnumerable<T> values, string propName)
        {
            foreach (var value in values)
                ValidateValue<T>(value, propName);
            return values;
        }

        /// <summary>
        /// Valida el valor de un tipo T
        /// </summary>
        /// <typeparam name="T">Tipo de objeto</typeparam>
        /// <param name="value">valor asignable al objeto</param>
        /// <param name="propName">nombre</param>
        /// <returns>Valor</returns>
        public T ValidateValue<T>(T value, string propName)
        {
            var dataType = typeof(T).Name;
            var attrs = this.GetType().GetProperty(propName).GetCustomAttributes(true);

            for (int i = 0; i < attrs.Length; i++)
            {
                var attrName = attrs[i].GetType().Name;

                if (attrName == nameof(FunctionAttribute))
                {
                    if (!InvokeFunction(((FunctionAttribute)attrs[i]).Value, value))
                    {
                        ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "No se cumple la función de validación "));
                    }
                }

                switch (dataType)
                {
                    case "Int64":
                        if (attrName == nameof(MinValueAttribute))
                            if (Convert.ToInt64(value) < ((MinValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor mínimo "));

                        if (attrName == nameof(MaxValueAttribute))
                            if (Convert.ToInt64(value) > ((MaxValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor máximo "));
                        break;
                    case "String":
                        if (attrName == nameof(LengthAttribute))
                            if (Convert.ToString(value).Length > ((LengthAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Longitud "));

                        if (attrName == nameof(RegexAttribute))
                            if (!Regex.IsMatch(Convert.ToString(value), ((RegexAttribute)attrs[i]).Value))
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, ((RegexAttribute)attrs[i]).Message));
                        break;
                    case "Double":
                        if (attrName == nameof(MinValueAttribute))
                            if (Convert.ToInt64(value) < ((MinValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor mínimo "));

                        if (attrName == nameof(MaxValueAttribute))
                            if (Convert.ToInt64(value) > ((MaxValueAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Valor máximo "));

                        if (attrName == nameof(DecimalCountAttribute))
                        {
                            var match = Regex.Match(Convert.ToDouble(value).ToString(), "(?<=[\\.|,])[0-9]+");
                            if (match.ToString().Length != ((DecimalCountAttribute)attrs[i]).Value)
                                ValidationErrorsList.Add(string.Format("El valor de la propiedad '{0}' no cumple los parámetros de validación {1}.", propName, "Cantidad de decimales "));
                        }
                        break;
                }
            }

            if (ExtrictValidation && ValidationErrorsList.Count > 0)
                throw new ArgumentException(string.Join(Environment.NewLine, ValidationErrorsList));

            return value;
        }

        /// <summary>
        /// Intenta convertir un JSON a un objeto específico
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json">JSON</param>
        /// <param name="result">Objeto resultado</param>
        /// <param name="messages">mensajes de respuesta</param>
        /// <returns>boleano que define si fue válido a no la conversión</returns>
        public bool TryParseFromJson<T>(string json, out T result, out string messages)
        {
            result = Activator.CreateInstance<T>();
            messages = string.Empty;

            try
            {
                var jsonObj = JsonConvert.DeserializeObject(json);
                JsonSerializer serializer = new JsonSerializer();
                result = (T)serializer.Deserialize(new JTokenReader(jsonObj as JObject), typeof(T));
                return true;
            }
            catch (Exception ex)
            {
                messages = ex.Message;
                return false;
            }
        }

        /// <summary>
        /// Ejecuta una función
        /// </summary>
        /// <param name="commandString"></param>
        /// <param name="parameter"></param>
        /// <returns></returns>
        private bool InvokeFunction(string commandString, object parameter)
        {
            string functClass = "Helper";
            Type thisType = Type.GetType($"{this.GetType().Namespace}.{ functClass}");
            MethodInfo theMethod = thisType.GetMethod(commandString);
            var rst = theMethod.Invoke(this, new object[] { parameter });
            return (bool)rst;
        }
    }

    /// <summary>
    /// Provee métodos para indexar una colección de datos tipo T
    /// y realizar búsquedas más rapidas
    /// </summary>
    /// <typeparam name="T">Tipo de dato de la colección</typeparam>
    public sealed class IndexedCollection<T>
    {
        #region Fields

        /// <summary>
        /// Lista de datos no indexados
        /// </summary>
        internal IList<T> NonIndexedList;
        /// <summary>
        /// Lista de datos indexados
        /// </summary>
        internal readonly IDictionary<string, ILookup<object, T>> IndexedList;
        /// <summary>
        /// Indices
        /// </summary>
        internal readonly IList<Expression<Func<T, object>>> Indexes;

        #endregion

        #region Builders

        /// <summary>
        /// Inicializa una nueva instancia de la clase
        /// </summary>
        /// <param name="source">Fuente de datos</param>
        /// <param name="indexes">Indices usados para organizar los datos</param>
        public IndexedCollection(IEnumerable<T> source, params Expression<Func<T, object>>[] indexes)
        {
            NonIndexedList = new List<T>(source);
            IndexedList = new Dictionary<string, ILookup<object, T>>();
            Indexes = new List<Expression<Func<T, object>>>();
            BuildIndexes(indexes);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Busca un valor sobre una propiedad
        /// </summary>
        /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
        /// <param name="value">Valor a buscar</param>
        /// <returns>Conjunto de resultados</returns>
        public IndexedResult FindValue(Expression<Func<T, object>> property, object value)
        {
            return new IndexedResult(this, new List<T>()).And(property, value);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Construye los indices
        /// </summary>
        /// <param name="indexes">Indices como expresiones</param>
        private void BuildIndexes(Expression<Func<T, object>>[] indexes)
        {
            for (int i = 0; i < indexes.Length; i++)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(PropertyName(indexes[i])));
                if (IndexedList.ContainsKey(indexName))
                {
                    continue;
                }

                Indexes.Add(indexes[i]);
                IndexedList.Add(indexName, NonIndexedList.ToLookup(indexes[i].Compile()));
            }
            NonIndexedList = NonIndexedList.Except(IndexedList.SelectMany(x => x.Value).SelectMany(r => r)).ToList();
        }

        /// <summary>
        /// Obtiene el nombre de la propiedad en la expresión
        /// </summary>
        /// <param name="expression">Expresión a evaluar</param>
        /// <returns>Nombre de la propiedad en base64</returns>
        internal string PropertyName(Expression<Func<T, object>> expression)
        {
            if (!(expression.Body is MemberExpression body))
            {
                body = ((UnaryExpression)expression.Body).Operand as MemberExpression;
            }

            return body.Member.Name;
        }

        #endregion

        #region IEnumerable

        /// <summary>
        /// Obtiene una lista de la colección
        /// </summary>
        /// <returns>Lista de tipo T</returns>
        public IList<T> ToList()
        {
            List<T> res = new List<T>(NonIndexedList);
            res.AddRange(IndexedList.SelectMany(x => x.Value).SelectMany(r => r));

            return res;
        }

        #endregion

        #region Classes

        /// <summary>
        /// Encapsula un conjunto de resultados de la busqueda sobre una colección indexada
        /// </summary>
        public class IndexedResult
        {
            #region Fields

            /// <summary>
            /// Instancia a la colección de datos
            /// </summary>
            private readonly IndexedCollection<T> _indexedCollection;
            /// <summary>
            /// Conjunto de resultados
            /// </summary>
            private readonly IEnumerable<T> _resultSet;

            #endregion

            #region Builders

            /// <summary>
            /// Inicializa una nueva instancia de la clase
            /// </summary>
            /// <param name="indexedCollection">Instancia a la colección de datos</param>
            /// <param name="resultSet">Conjunto de resultados</param>
            internal IndexedResult(IndexedCollection<T> indexedCollection, IEnumerable<T> resultSet)
            {
                _indexedCollection = indexedCollection;
                _resultSet = resultSet;
            }

            #endregion

            #region Methods

            /// <summary>
            /// Retorna un subconjunto de resultados donde los elementos cumplan cualquiera de los dos criterios
            /// </summary>
            /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
            /// <param name="value">Valor a buscar</param>
            /// <returns>Subconjunto de resultados</returns>
            public IndexedResult Or(Expression<Func<T, object>> property, object value)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(_indexedCollection.PropertyName(property)));
                if (_indexedCollection.IndexedList.ContainsKey(indexName))
                {
                    return new IndexedResult(_indexedCollection, (_resultSet.Count() == 0 ? (_indexedCollection.IndexedList[indexName].Contains(value) ? _indexedCollection.IndexedList[indexName][value] : new T[0]) : (_indexedCollection.IndexedList[indexName].Contains(value) ? _resultSet.Union(_indexedCollection.IndexedList[indexName][value]) : _resultSet)));
                }

                var c = property.Compile();
                return new IndexedResult(_indexedCollection, _resultSet.Except(_indexedCollection.NonIndexedList.Where(x => c(x).Equals(value))));
            }

            /// <summary>
            /// Retorna un subconjunto de resultados donde los elementos cumplan con ambos criterios
            /// </summary>
            /// <param name="property">Expresión de la propiedad sobre la que se realiza la busqueda</param>
            /// <param name="value">Valor a buscar</param>
            /// <returns>Subconjunto de resultados</returns>
            public IndexedResult And(Expression<Func<T, object>> property, object value)
            {
                string indexName = Convert.ToBase64String(Encoding.UTF8.GetBytes(_indexedCollection.PropertyName(property)));
                if (_indexedCollection.IndexedList.ContainsKey(indexName))
                {
                    return new IndexedResult(_indexedCollection, _resultSet != null ? (_resultSet.Count() == 0 ? (_indexedCollection.IndexedList[indexName].Contains(value) ? _indexedCollection.IndexedList[indexName][value] : null) : (_indexedCollection.IndexedList[indexName].Contains(value) ? _resultSet.Intersect(_indexedCollection.IndexedList[indexName][value]) : new T[0])) : new T[0]);
                }

                var c = property.Compile();
                return new IndexedResult(_indexedCollection, _resultSet.Intersect(_indexedCollection.NonIndexedList.Where(x => c(x).Equals(value))));
            }

            #endregion

            #region IEnumerable

            /// <summary>
            /// Obtiene una lista de la colección
            /// </summary>
            /// <returns>Lista de tipo T</returns>
            public IList<T> ToList()
            {
                return _resultSet != null ? _resultSet.ToList() : new List<T>();
            }

            #endregion
        }

        #endregion
    }
    #endregion

    #region Attributes
    /// <summary>
    /// Longitud permitida
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class LengthAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public LengthAttribute(long Value) { this.Value = Value; }
    }
    /// <summary>
    /// Expresión regular a aplicar
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class RegexAttribute : Attribute
    {
        private string _Value;
        private string _Message;
        public string Value { get { return _Value; } set { _Value = value; } }
        public string Message { get { return _Message; } set { _Message = value; } }

        public RegexAttribute(string Value, string Message) { this._Value = Value; this._Message = Message; }
    }
    /// <summary>
    /// Cantidad de decimales
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class DecimalCountAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public DecimalCountAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Valor máximo
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class MaxValueAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public MaxValueAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Valor mínimo
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class MinValueAttribute : Attribute
    {
        private long _Value;
        public long Value { get { return _Value; } set { _Value = value; } }
        public MinValueAttribute(long Value) { this._Value = Value; }
    }
    /// <summary>
    /// Función
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class FunctionAttribute : Attribute
    {
        private string _Value;
        public string Value { get { return _Value; } set { _Value = value; } }
        public FunctionAttribute(string Value) { this._Value = Value; }
    }
    /// <summary>
    /// Orden
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class OrderAttribute : Attribute
    {
        private readonly int order_;
        public OrderAttribute([CallerLineNumber]int order = 0)
        {
            order_ = order;
        }

        public int Order { get { return order_; } }
    }
    #endregion
}